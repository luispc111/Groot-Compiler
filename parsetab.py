
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CARACTER CARACTERVAL COMA DESDE DIFQUE DIV DOSPUNTOS ENTERO ENTEROVAL ENTONCES ESCRIBIR FLOTANTE FLOTANTEVAL FUNCION HACER HASTA ID IGUAL IGUALQUE LEER LETRERO L_CORCHETE L_LLAVE L_PAR MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS MIENTRAS MULT OR PRINCIPAL PROGRAMA PUNTO PUNTOYCOMA REGRESA R_CORCHETE R_LLAVE R_PAR SI SINO VARIABLES VOID\n    program : PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty\n    \n    variables : VARIABLES variablesU\n              | empty\n\n    variablesU : variablesD\n               | empty\n\n    variablesD : ID neu_addVariableAStack COMA variablesD\n               | ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU\n               | ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU\n    \n    funciones : funcionesU\n              | empty\n    \n    funcionesU : tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD\n    \n    funcionesD : funciones\n               | empty\n    \n    tipo_funcion : ENTERO empty\n                 | FLOTANTE empty\n                 | CARACTER empty\n                 | VOID empty\n    \n    tipo_var : ENTERO empty\n             | FLOTANTE empty\n             | CARACTER empty\n    \n    recibir_parametros : ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty\n                       | empty\n\n    recibir_parametrosD : COMA recibir_parametros empty\n                       | empty\n    \n    mandar_parametros : hiper_exp neu_parametroEnviado mandar_parametrosD empty\n                      | empty\n\n    mandar_parametrosD : COMA mandar_parametros empty\n                       | empty\n    \n    bloque : L_LLAVE bloqueU R_LLAVE empty\n\n    bloqueU : estatuto bloqueD neu_vaciarPilas empty\n            | empty\n\n    bloqueD : bloqueU empty\n            | empty\n    \n    estatuto : asignacion PUNTOYCOMA empty\n             | llamada neu_esEstatuto PUNTOYCOMA empty\n             | retorno PUNTOYCOMA empty\n             | lectura PUNTOYCOMA empty\n             | escritura PUNTOYCOMA empty\n             | decision empty\n             | condicional empty\n             | no_condicional empty\n             | empty\n    \n    asignacion : ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty\n               | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty\n    \n    llamada : ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty\n    \n    retorno : REGRESA L_PAR hiper_exp neu_retorno R_PAR empty\n    \n    lectura : LEER L_PAR ID neu_lectura R_PAR empty\n    \n    escritura : ESCRIBIR L_PAR escrituraD R_PAR empty\n\n    escrituraD : hiper_exp neu_escritura empty\n               | LETRERO neu_letrero empty\n    \n    decision : SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty\n\n    decisionU : SINO neu_iniciarDecisionElse bloque empty\n              | empty\n    \n    condicional : MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty\n    \n    no_condicional : DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty\n    \n    asignacionFor : ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty\n    \n    operadorA : MAS neu_addOperador empty\n              | MENOS neu_addOperador empty\n    \n    operadorT : MULT neu_addOperador empty\n              | DIV neu_addOperador empty\n    \n    operadorL : OR neu_addOperador empty\n              | AND neu_addOperador empty\n    \n    operadorR : MENORQUE neu_addOperador empty\n              | MAYORQUE neu_addOperador empty\n              | MENORIGUALQUE neu_addOperador empty\n              | MAYORIGUALQUE neu_addOperador empty\n              | IGUALQUE neu_addOperador empty\n              | DIFQUE neu_addOperador empty\n    \n    hiper_exp : super_exp neu_hacerHiperExp hiper_expU\n\n    hiper_expU : operadorL hiper_exp empty \n               | empty\n    \n    super_exp : exp neu_hacerSuperExp super_expU\n\n    super_expU : operadorR super_exp empty \n               | empty\n    \n    exp : termino neu_hacerExp expU\n\n    expU : operadorA exp\n         | empty\n    \n    termino : factor neu_hacerTermino terminoU\n\n    terminoU : operadorT termino \n             | empty\n    \n    factor : varcte empty\n           | llamada neu_esExpresion empty\n           | L_PAR hiper_exp R_PAR empty\n    \n    varcte  : ID neu_addID empty\n            | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty\n            | ENTEROVAL neu_addConstanteEntero empty\n            | FLOTANTEVAL neu_addConstanteFlotante empty\n            | CARACTERVAL neu_addConstanteCaracter empty\n    \n    empty : \n    neu_programa : neu_endPrograma : neu_addFuncion : neu_endFuncion : neu_principal : neu_addVariable : neu_addVariableAStack : neu_addArreglo : neu_addID : neu_fondoFalso : neu_addIDArreglo : neu_addConstanteEntero : neu_addConstanteFlotante : neu_addConstanteCaracter : neu_addTermino : neu_llamada_era : neu_llamada_gosub : neu_esEstatuto : neu_esExpresion : neu_addOperador : getGMemoria : getLMemoria : getCMemoria : neu_hacerTermino : neu_hacerExp : neu_hacerSuperExp : neu_hacerHiperExp : neu_asignacion : neu_lectura : neu_escritura : neu_letrero : neu_retorno : neu_iniciarDecision : neu_iniciarDecisionElse : neu_endDecision : neu_condicionalAntes : neu_condicionalDurante : neu_condicionalDespues : neu_addIDFor : neu_asignacionFor : neu_boolFor : neu_endCondicion  : neu_parametroEnviado : neu_recibirParametros : neu_paramValidacion : neu_vaciarPilas : notifError : '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,50,57,79,80,104,],[0,-91,-89,-1,-89,-29,]),'ID':([2,8,22,32,47,48,51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,93,95,96,97,98,99,100,103,104,107,108,109,110,111,112,113,114,115,132,139,140,154,168,177,179,180,182,184,185,186,187,188,189,191,193,194,196,198,199,202,212,213,224,228,229,231,232,233,234,235,236,238,239,241,242,248,251,256,257,259,260,261,262,263,264,265,266,267,268,270,274,278,279,281,286,288,289,292,293,294,295,297,298,],[3,20,31,20,52,20,69,-42,69,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-99,123,127,123,123,-125,134,20,-29,-34,-89,-36,-37,-38,-109,123,123,123,123,-35,123,-99,52,123,-109,-109,123,-109,-109,-109,-109,-109,-109,123,-109,-109,123,-109,-109,123,123,-109,123,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,123,-109,-61,-62,-63,-64,-65,-66,-67,-68,-57,-58,-59,-60,-89,123,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'PUNTOYCOMA':([3,4,33,34,35,36,41,42,43,44,56,61,62,63,64,65,78,85,117,118,119,120,121,122,123,124,125,126,147,148,149,150,151,152,153,155,156,157,159,170,174,175,176,178,181,183,190,192,195,197,200,201,203,204,205,206,207,219,221,225,226,227,230,237,240,244,250,252,255,258,269,275,277,284,285,291,296,],[-90,5,-95,-89,-89,-89,48,-18,-19,-20,-97,84,-107,86,87,88,103,108,-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,-89,-89,-89,-89,-81,-89,-89,-89,-89,-89,-89,-117,-89,-89,-69,-71,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-89,-48,-89,-106,-83,-46,-89,-89,-76,-79,-47,-43,-89,-70,-73,-100,-45,-89,-117,-85,-89,-44,]),'VARIABLES':([5,77,],[8,8,]),'ENTERO':([5,6,7,8,17,18,19,28,40,48,49,55,76,80,103,104,136,137,169,],[-89,13,-3,-89,-2,-4,-5,34,-6,-89,34,-7,34,-89,-89,-29,-93,-8,13,]),'FLOTANTE':([5,6,7,8,17,18,19,28,40,48,49,55,76,80,103,104,136,137,169,],[-89,14,-3,-89,-2,-4,-5,35,-6,-89,35,-7,35,-89,-89,-29,-93,-8,14,]),'CARACTER':([5,6,7,8,17,18,19,28,40,48,49,55,76,80,103,104,136,137,169,],[-89,15,-3,-89,-2,-4,-5,36,-6,-89,36,-7,36,-89,-89,-29,-93,-8,15,]),'VOID':([5,6,7,8,17,18,19,40,48,55,80,103,104,136,137,169,],[-89,16,-3,-89,-2,-4,-5,-6,-89,-7,-89,-89,-29,-93,-8,16,]),'PRINCIPAL':([5,6,7,8,9,10,11,17,18,19,40,48,55,80,103,104,136,137,169,216,217,218,],[-89,-89,-3,-89,21,-10,-9,-2,-4,-5,-6,-89,-7,-89,-89,-29,-93,-8,-89,-11,-12,-10,]),'L_LLAVE':([7,8,17,18,19,40,46,48,55,77,102,103,137,245,271,280,282,287,],[-3,-89,-2,-4,-5,-6,51,-89,-7,-89,51,-89,-8,51,51,-123,51,51,]),'FUNCION':([12,13,14,15,16,23,24,25,26,],[22,-89,-89,-89,-89,-14,-15,-16,-17,]),'DOSPUNTOS':([20,45,52,],[28,49,76,]),'L_CORCHETE':([20,69,123,],[29,93,154,]),'COMA':([20,27,34,35,36,42,43,44,101,117,118,119,120,121,122,123,124,125,126,135,144,147,148,149,150,151,152,153,155,156,157,173,174,176,178,181,183,190,192,195,197,200,201,203,204,205,221,225,227,230,237,240,252,255,258,269,275,277,285,],[-96,32,-89,-89,-89,-18,-19,-20,-133,-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,168,-132,-89,-89,-89,-89,-81,-89,-89,-89,-89,-89,224,-89,-69,-71,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-89,-89,-76,-79,-89,-70,-73,-100,-45,-89,-85,]),'L_PAR':([21,30,31,39,69,70,71,72,73,74,75,93,94,95,97,98,99,112,113,114,115,123,132,140,154,177,179,180,182,184,185,186,187,188,189,191,193,194,196,198,199,202,212,213,224,228,229,231,232,233,234,235,236,238,239,241,242,248,251,256,257,259,260,261,262,263,264,265,266,267,268,274,],[-94,38,-92,47,-105,95,96,97,98,99,100,-99,114,115,115,115,-125,-109,115,115,115,-105,115,115,-99,115,-109,-109,115,-109,-109,-109,-109,-109,-109,115,-109,-109,115,-109,-109,115,115,-109,115,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,115,-109,-61,-62,-63,-64,-65,-66,-67,-68,-57,-58,-59,-60,115,]),'ENTEROVAL':([29,93,95,97,98,99,112,113,114,115,132,140,154,177,179,180,182,184,185,186,187,188,189,191,193,194,196,198,199,202,212,213,224,228,229,231,232,233,234,235,236,238,239,241,242,248,251,256,257,259,260,261,262,263,264,265,266,267,268,274,],[37,-99,124,124,124,-125,-109,124,124,124,124,124,-99,124,-109,-109,124,-109,-109,-109,-109,-109,-109,124,-109,-109,124,-109,-109,124,124,-109,124,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,124,-109,-61,-62,-63,-64,-65,-66,-67,-68,-57,-58,-59,-60,124,]),'R_PAR':([34,35,36,38,42,43,44,47,53,54,101,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,160,161,163,166,167,168,172,173,174,176,178,181,183,190,192,195,197,200,201,203,204,205,208,209,211,214,215,221,222,223,224,225,227,230,237,240,249,252,253,254,255,258,269,273,275,276,277,283,285,290,],[-89,-89,-89,46,-18,-19,-20,-89,77,-22,-133,-89,-121,-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,-118,159,-119,-120,162,164,-89,-134,-26,-132,174,175,-89,-89,-89,-89,-81,-89,-89,-89,-89,-89,206,-89,-89,-126,-89,-24,-89,221,-89,-89,-69,-71,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-49,-50,246,-21,-89,-106,-89,-28,-89,-83,-89,-89,-76,-79,-23,-89,-25,-89,-70,-73,-100,-129,-45,-27,-89,-89,-85,-56,]),'R_CORCHETE':([37,117,118,119,120,121,122,123,124,125,126,141,147,148,149,150,151,152,153,155,156,157,174,176,178,181,183,190,192,195,197,200,201,203,204,205,221,225,227,230,237,240,243,252,255,258,269,275,277,285,],[45,-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,171,-89,-89,-89,-89,-81,-89,-89,-89,-89,-89,-89,-69,-71,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-89,-89,-76,-79,269,-89,-70,-73,-100,-45,-89,-85,]),'R_LLAVE':([51,58,59,60,66,67,68,80,81,82,83,84,86,87,88,89,90,91,104,105,106,107,108,109,110,111,138,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[-89,80,-31,-89,-89,-89,-89,-89,-135,-31,-89,-89,-89,-89,-89,-39,-40,-41,-29,-89,-32,-34,-89,-36,-37,-38,-30,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'REGRESA':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[70,-42,70,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'LEER':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[71,-42,71,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'ESCRIBIR':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[72,-42,72,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'SI':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[73,-42,73,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'MIENTRAS':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[74,-42,74,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'DESDE':([51,59,60,66,67,68,80,82,84,86,87,88,89,90,91,104,107,108,109,110,111,139,270,278,279,281,286,288,289,292,293,294,295,297,298,],[75,-42,75,-89,-89,-89,-89,-42,-89,-89,-89,-89,-39,-40,-41,-29,-34,-89,-36,-37,-38,-35,-89,-124,-53,-127,-89,-89,-131,-51,-89,-54,-89,-52,-55,]),'IGUAL':([69,92,134,165,171,220,],[-98,112,-128,213,-100,251,]),'SINO':([80,104,270,],[-89,-29,280,]),'FLOTANTEVAL':([93,95,97,98,99,112,113,114,115,132,140,154,177,179,180,182,184,185,186,187,188,189,191,193,194,196,198,199,202,212,213,224,228,229,231,232,233,234,235,236,238,239,241,242,248,251,256,257,259,260,261,262,263,264,265,266,267,268,274,],[-99,125,125,125,-125,-109,125,125,125,125,125,-99,125,-109,-109,125,-109,-109,-109,-109,-109,-109,125,-109,-109,125,-109,-109,125,125,-109,125,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,125,-109,-61,-62,-63,-64,-65,-66,-67,-68,-57,-58,-59,-60,125,]),'CARACTERVAL':([93,95,97,98,99,112,113,114,115,132,140,154,177,179,180,182,184,185,186,187,188,189,191,193,194,196,198,199,202,212,213,224,228,229,231,232,233,234,235,236,238,239,241,242,248,251,256,257,259,260,261,262,263,264,265,266,267,268,274,],[-99,126,126,126,-125,-109,126,126,126,126,126,-99,126,-109,-109,126,-109,-109,-109,-109,-109,-109,126,-109,-109,126,-109,-109,126,126,-109,126,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,-89,126,-109,-61,-62,-63,-64,-65,-66,-67,-68,-57,-58,-59,-60,126,]),'LETRERO':([97,],[130,]),'OR':([117,118,119,120,121,122,123,124,125,126,147,148,149,150,151,152,153,155,156,157,174,181,183,190,192,195,197,200,201,203,204,205,221,225,230,237,240,252,258,269,275,277,285,],[-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,179,-89,-89,-89,-81,-89,-89,-89,-89,-89,-89,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-89,-76,-79,-89,-73,-100,-45,-89,-85,]),'AND':([117,118,119,120,121,122,123,124,125,126,147,148,149,150,151,152,153,155,156,157,174,181,183,190,192,195,197,200,201,203,204,205,221,225,230,237,240,252,258,269,275,277,285,],[-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,180,-89,-89,-89,-81,-89,-89,-89,-89,-89,-89,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-89,-76,-79,-89,-73,-100,-45,-89,-85,]),'HACER':([117,118,119,120,121,122,123,124,125,126,147,148,149,150,151,152,153,155,156,157,174,176,178,181,183,190,192,195,197,200,201,203,204,205,221,225,227,230,237,240,246,247,252,255,258,269,272,275,277,285,],[-116,-115,-114,-113,-89,-108,-98,-101,-102,-103,-89,-89,-89,-89,-81,-89,-89,-89,-89,-89,-89,-69,-71,-72,-74,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-89,-89,-76,-79,271,-130,-89,-70,-73,-100,282,-45,-89,-85,]),'MENORQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,184,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'MAYORQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,185,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'MENORIGUALQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,186,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'MAYORIGUALQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,187,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'IGUALQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,188,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'DIFQUE':([118,119,120,121,122,123,124,125,126,148,149,150,151,152,153,155,156,157,174,190,192,195,197,200,201,203,204,205,221,225,237,240,252,269,275,277,285,],[-115,-114,-113,-89,-108,-98,-101,-102,-103,189,-89,-89,-81,-89,-89,-89,-89,-89,-89,-75,-77,-78,-80,-82,-84,-86,-87,-88,-106,-83,-76,-79,-89,-100,-45,-89,-85,]),'MAS':([119,120,121,122,123,124,125,126,149,150,151,152,153,155,156,157,174,195,197,200,201,203,204,205,221,225,240,252,269,275,277,285,],[-114,-113,-89,-108,-98,-101,-102,-103,193,-89,-81,-89,-89,-89,-89,-89,-89,-78,-80,-82,-84,-86,-87,-88,-106,-83,-79,-89,-100,-45,-89,-85,]),'MENOS':([119,120,121,122,123,124,125,126,149,150,151,152,153,155,156,157,174,195,197,200,201,203,204,205,221,225,240,252,269,275,277,285,],[-114,-113,-89,-108,-98,-101,-102,-103,194,-89,-81,-89,-89,-89,-89,-89,-89,-78,-80,-82,-84,-86,-87,-88,-106,-83,-79,-89,-100,-45,-89,-85,]),'MULT':([120,121,122,123,124,125,126,150,151,152,153,155,156,157,174,200,201,203,204,205,221,225,252,269,275,277,285,],[-113,-89,-108,-98,-101,-102,-103,198,-81,-89,-89,-89,-89,-89,-89,-82,-84,-86,-87,-88,-106,-83,-89,-100,-45,-89,-85,]),'DIV':([120,121,122,123,124,125,126,150,151,152,153,155,156,157,174,200,201,203,204,205,221,225,252,269,275,277,285,],[-113,-89,-108,-98,-101,-102,-103,199,-81,-89,-89,-89,-89,-89,-89,-82,-84,-86,-87,-88,-106,-83,-89,-100,-45,-89,-85,]),'ENTONCES':([162,210,],[-122,245,]),'HASTA':([164,],[212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neu_programa':([3,],[4,]),'variables':([5,77,],[6,102,]),'empty':([5,6,8,13,14,15,16,34,35,36,47,48,51,57,60,66,67,68,77,80,83,84,86,87,88,103,105,108,114,121,135,147,148,149,150,152,153,155,156,157,159,160,161,166,168,169,173,174,175,206,215,219,222,224,227,228,229,230,231,232,233,234,235,236,238,239,241,242,252,254,270,277,283,286,288,291,293,295,],[7,10,19,23,24,25,26,42,43,44,54,19,59,79,82,89,90,91,7,104,106,107,109,110,111,19,138,139,143,151,167,178,183,192,197,200,201,203,204,205,207,208,209,214,54,218,223,225,226,244,249,250,253,143,255,256,257,258,259,260,261,262,263,264,265,266,267,268,275,276,279,285,290,292,294,296,297,298,]),'funciones':([6,169,],[9,217,]),'funcionesU':([6,169,],[11,11,]),'tipo_funcion':([6,169,],[12,12,]),'variablesU':([8,48,103,],[17,55,137,]),'variablesD':([8,32,48,103,],[18,40,18,18,]),'neu_addVariableAStack':([20,],[27,]),'neu_principal':([21,],[30,]),'tipo_var':([28,49,76,],[33,56,101,]),'neu_addFuncion':([31,],[39,]),'neu_addVariable':([33,],[41,]),'bloque':([46,102,245,271,282,287,],[50,136,270,281,289,293,]),'recibir_parametros':([47,168,],[53,215,]),'neu_endPrograma':([50,],[57,]),'bloqueU':([51,60,],[58,83,]),'estatuto':([51,60,],[60,60,]),'asignacion':([51,60,],[61,61,]),'llamada':([51,60,95,97,98,113,114,115,132,140,177,182,191,196,202,212,224,248,274,],[62,62,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'retorno':([51,60,],[63,63,]),'lectura':([51,60,],[64,64,]),'escritura':([51,60,],[65,65,]),'decision':([51,60,],[66,66,]),'condicional':([51,60,],[67,67,]),'no_condicional':([51,60,],[68,68,]),'neu_addArreglo':([56,],[78,]),'bloqueD':([60,],[81,]),'neu_esEstatuto':([62,],[85,]),'neu_addID':([69,123,],[92,153,]),'neu_llamada_era':([69,123,],[94,94,]),'neu_vaciarPilas':([81,],[105,]),'neu_fondoFalso':([93,154,],[113,202,]),'hiper_exp':([95,97,98,113,114,115,132,140,177,202,212,224,248,274,],[116,129,131,141,144,145,163,170,227,243,247,144,273,284,]),'super_exp':([95,97,98,113,114,115,132,140,177,182,202,212,224,248,274,],[117,117,117,117,117,117,117,117,117,230,117,117,117,117,117,]),'exp':([95,97,98,113,114,115,132,140,177,182,191,202,212,224,248,274,],[118,118,118,118,118,118,118,118,118,118,237,118,118,118,118,118,]),'termino':([95,97,98,113,114,115,132,140,177,182,191,196,202,212,224,248,274,],[119,119,119,119,119,119,119,119,119,119,119,240,119,119,119,119,119,]),'factor':([95,97,98,113,114,115,132,140,177,182,191,196,202,212,224,248,274,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'varcte':([95,97,98,113,114,115,132,140,177,182,191,196,202,212,224,248,274,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'escrituraD':([97,],[128,]),'neu_condicionalAntes':([99,],[132,]),'asignacionFor':([100,],[133,]),'neu_recibirParametros':([101,],[135,]),'neu_addOperador':([112,179,180,184,185,186,187,188,189,193,194,198,199,213,251,],[140,228,229,231,232,233,234,235,236,238,239,241,242,248,274,]),'mandar_parametros':([114,224,],[142,254,]),'neu_retorno':([116,],[146,]),'neu_hacerHiperExp':([117,],[147,]),'neu_hacerSuperExp':([118,],[148,]),'neu_hacerExp':([119,],[149,]),'neu_hacerTermino':([120,],[150,]),'neu_esExpresion':([122,],[152,]),'neu_addConstanteEntero':([124,],[155,]),'neu_addConstanteFlotante':([125,],[156,]),'neu_addConstanteCaracter':([126,],[157,]),'neu_lectura':([127,],[158,]),'neu_escritura':([129,],[160,]),'neu_letrero':([130,],[161,]),'neu_addIDFor':([134,],[165,]),'recibir_parametrosD':([135,],[166,]),'neu_endFuncion':([136,],[169,]),'neu_paramValidacion':([142,],[172,]),'neu_parametroEnviado':([144,],[173,]),'hiper_expU':([147,],[176,]),'operadorL':([147,],[177,]),'super_expU':([148,],[181,]),'operadorR':([148,],[182,]),'expU':([149,],[190,]),'operadorA':([149,],[191,]),'terminoU':([150,],[195,]),'operadorT':([150,],[196,]),'neu_iniciarDecision':([162,],[210,]),'neu_condicionalDurante':([163,],[211,]),'funcionesD':([169,],[216,]),'neu_asignacion':([170,284,],[219,291,]),'neu_addIDArreglo':([171,269,],[220,277,]),'mandar_parametrosD':([173,],[222,]),'neu_llamada_gosub':([221,],[252,]),'neu_boolFor':([247,],[272,]),'decisionU':([270,],[278,]),'neu_asignacionFor':([273,],[283,]),'neu_endDecision':([278,],[286,]),'neu_iniciarDecisionElse':([280,],[287,]),'neu_condicionalDespues':([281,],[288,]),'neu_endCondicion':([289,],[295,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty','program',13,'p_programa','lexer_parser.py',257),
  ('variables -> VARIABLES variablesU','variables',2,'p_variales','lexer_parser.py',263),
  ('variables -> empty','variables',1,'p_variales','lexer_parser.py',264),
  ('variablesU -> variablesD','variablesU',1,'p_variales','lexer_parser.py',266),
  ('variablesU -> empty','variablesU',1,'p_variales','lexer_parser.py',267),
  ('variablesD -> ID neu_addVariableAStack COMA variablesD','variablesD',4,'p_variales','lexer_parser.py',269),
  ('variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU','variablesD',6,'p_variales','lexer_parser.py',270),
  ('variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU','variablesD',9,'p_variales','lexer_parser.py',271),
  ('funciones -> funcionesU','funciones',1,'p_funciones','lexer_parser.py',277),
  ('funciones -> empty','funciones',1,'p_funciones','lexer_parser.py',278),
  ('funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD','funcionesU',11,'p_funciones','lexer_parser.py',280),
  ('funcionesD -> funciones','funcionesD',1,'p_funciones','lexer_parser.py',282),
  ('funcionesD -> empty','funcionesD',1,'p_funciones','lexer_parser.py',283),
  ('tipo_funcion -> ENTERO empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',289),
  ('tipo_funcion -> FLOTANTE empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',290),
  ('tipo_funcion -> CARACTER empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',291),
  ('tipo_funcion -> VOID empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',292),
  ('tipo_var -> ENTERO empty','tipo_var',2,'p_tipo_var','lexer_parser.py',298),
  ('tipo_var -> FLOTANTE empty','tipo_var',2,'p_tipo_var','lexer_parser.py',299),
  ('tipo_var -> CARACTER empty','tipo_var',2,'p_tipo_var','lexer_parser.py',300),
  ('recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty','recibir_parametros',6,'p_recibir_parametros','lexer_parser.py',306),
  ('recibir_parametros -> empty','recibir_parametros',1,'p_recibir_parametros','lexer_parser.py',307),
  ('recibir_parametrosD -> COMA recibir_parametros empty','recibir_parametrosD',3,'p_recibir_parametros','lexer_parser.py',309),
  ('recibir_parametrosD -> empty','recibir_parametrosD',1,'p_recibir_parametros','lexer_parser.py',310),
  ('mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty','mandar_parametros',4,'p_mandar_parametros','lexer_parser.py',316),
  ('mandar_parametros -> empty','mandar_parametros',1,'p_mandar_parametros','lexer_parser.py',317),
  ('mandar_parametrosD -> COMA mandar_parametros empty','mandar_parametrosD',3,'p_mandar_parametros','lexer_parser.py',319),
  ('mandar_parametrosD -> empty','mandar_parametrosD',1,'p_mandar_parametros','lexer_parser.py',320),
  ('bloque -> L_LLAVE bloqueU R_LLAVE empty','bloque',4,'p_bloque','lexer_parser.py',328),
  ('bloqueU -> estatuto bloqueD neu_vaciarPilas empty','bloqueU',4,'p_bloque','lexer_parser.py',330),
  ('bloqueU -> empty','bloqueU',1,'p_bloque','lexer_parser.py',331),
  ('bloqueD -> bloqueU empty','bloqueD',2,'p_bloque','lexer_parser.py',333),
  ('bloqueD -> empty','bloqueD',1,'p_bloque','lexer_parser.py',334),
  ('estatuto -> asignacion PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',340),
  ('estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty','estatuto',4,'p_estatuto','lexer_parser.py',341),
  ('estatuto -> retorno PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',342),
  ('estatuto -> lectura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',343),
  ('estatuto -> escritura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',344),
  ('estatuto -> decision empty','estatuto',2,'p_estatuto','lexer_parser.py',345),
  ('estatuto -> condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',346),
  ('estatuto -> no_condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',347),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexer_parser.py',348),
  ('asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',7,'p_asignacion','lexer_parser.py',353),
  ('asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',11,'p_asignacion','lexer_parser.py',354),
  ('llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty','llamada',8,'p_llamada','lexer_parser.py',360),
  ('retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty','retorno',6,'p_retorno','lexer_parser.py',366),
  ('lectura -> LEER L_PAR ID neu_lectura R_PAR empty','lectura',6,'p_lectura','lexer_parser.py',372),
  ('escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty','escritura',5,'p_escritura','lexer_parser.py',378),
  ('escrituraD -> hiper_exp neu_escritura empty','escrituraD',3,'p_escritura','lexer_parser.py',380),
  ('escrituraD -> LETRERO neu_letrero empty','escrituraD',3,'p_escritura','lexer_parser.py',381),
  ('decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty','decision',10,'p_decision','lexer_parser.py',387),
  ('decisionU -> SINO neu_iniciarDecisionElse bloque empty','decisionU',4,'p_decision','lexer_parser.py',389),
  ('decisionU -> empty','decisionU',1,'p_decision','lexer_parser.py',390),
  ('condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty','condicional',10,'p_condicional','lexer_parser.py',396),
  ('no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty','no_condicional',11,'p_no_condicional','lexer_parser.py',402),
  ('asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty','asignacionFor',7,'p_asignacionFor','lexer_parser.py',407),
  ('operadorA -> MAS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',415),
  ('operadorA -> MENOS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',416),
  ('operadorT -> MULT neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',422),
  ('operadorT -> DIV neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',423),
  ('operadorL -> OR neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',429),
  ('operadorL -> AND neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',430),
  ('operadorR -> MENORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',436),
  ('operadorR -> MAYORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',437),
  ('operadorR -> MENORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',438),
  ('operadorR -> MAYORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',439),
  ('operadorR -> IGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',440),
  ('operadorR -> DIFQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',441),
  ('hiper_exp -> super_exp neu_hacerHiperExp hiper_expU','hiper_exp',3,'p_hiper_exp','lexer_parser.py',449),
  ('hiper_expU -> operadorL hiper_exp empty','hiper_expU',3,'p_hiper_exp','lexer_parser.py',451),
  ('hiper_expU -> empty','hiper_expU',1,'p_hiper_exp','lexer_parser.py',452),
  ('super_exp -> exp neu_hacerSuperExp super_expU','super_exp',3,'p_super_exp','lexer_parser.py',457),
  ('super_expU -> operadorR super_exp empty','super_expU',3,'p_super_exp','lexer_parser.py',459),
  ('super_expU -> empty','super_expU',1,'p_super_exp','lexer_parser.py',460),
  ('exp -> termino neu_hacerExp expU','exp',3,'p_exp','lexer_parser.py',465),
  ('expU -> operadorA exp','expU',2,'p_exp','lexer_parser.py',467),
  ('expU -> empty','expU',1,'p_exp','lexer_parser.py',468),
  ('termino -> factor neu_hacerTermino terminoU','termino',3,'p_termino','lexer_parser.py',473),
  ('terminoU -> operadorT termino','terminoU',2,'p_termino','lexer_parser.py',475),
  ('terminoU -> empty','terminoU',1,'p_termino','lexer_parser.py',476),
  ('factor -> varcte empty','factor',2,'p_factor','lexer_parser.py',481),
  ('factor -> llamada neu_esExpresion empty','factor',3,'p_factor','lexer_parser.py',482),
  ('factor -> L_PAR hiper_exp R_PAR empty','factor',4,'p_factor','lexer_parser.py',483),
  ('varcte -> ID neu_addID empty','varcte',3,'p_varcte','lexer_parser.py',489),
  ('varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty','varcte',7,'p_varcte','lexer_parser.py',490),
  ('varcte -> ENTEROVAL neu_addConstanteEntero empty','varcte',3,'p_varcte','lexer_parser.py',491),
  ('varcte -> FLOTANTEVAL neu_addConstanteFlotante empty','varcte',3,'p_varcte','lexer_parser.py',492),
  ('varcte -> CARACTERVAL neu_addConstanteCaracter empty','varcte',3,'p_varcte','lexer_parser.py',493),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',504),
  ('neu_programa -> <empty>','neu_programa',0,'p_neu_programa','lexer_parser.py',513),
  ('neu_endPrograma -> <empty>','neu_endPrograma',0,'p_neu_endPrograma','lexer_parser.py',523),
  ('neu_addFuncion -> <empty>','neu_addFuncion',0,'p_neu_addFuncion','lexer_parser.py',528),
  ('neu_endFuncion -> <empty>','neu_endFuncion',0,'p_neu_endFuncion','lexer_parser.py',554),
  ('neu_principal -> <empty>','neu_principal',0,'p_neu_principal','lexer_parser.py',566),
  ('neu_addVariable -> <empty>','neu_addVariable',0,'p_neu_addVariable','lexer_parser.py',575),
  ('neu_addVariableAStack -> <empty>','neu_addVariableAStack',0,'p_neu_addVariableAStack','lexer_parser.py',598),
  ('neu_addArreglo -> <empty>','neu_addArreglo',0,'p_neu_addArreglo','lexer_parser.py',605),
  ('neu_addID -> <empty>','neu_addID',0,'p_neu_addID','lexer_parser.py',621),
  ('neu_fondoFalso -> <empty>','neu_fondoFalso',0,'p_neu_fondoFalso','lexer_parser.py',633),
  ('neu_addIDArreglo -> <empty>','neu_addIDArreglo',0,'p_neu_addIDArreglo','lexer_parser.py',638),
  ('neu_addConstanteEntero -> <empty>','neu_addConstanteEntero',0,'p_neu_addConstanteEntero','lexer_parser.py',684),
  ('neu_addConstanteFlotante -> <empty>','neu_addConstanteFlotante',0,'p_neu_addConstanteFlotante','lexer_parser.py',693),
  ('neu_addConstanteCaracter -> <empty>','neu_addConstanteCaracter',0,'p_neu_addConstanteCaracter','lexer_parser.py',702),
  ('neu_addTermino -> <empty>','neu_addTermino',0,'p_neu_addTermino','lexer_parser.py',710),
  ('neu_llamada_era -> <empty>','neu_llamada_era',0,'p_neu_llamada_era','lexer_parser.py',717),
  ('neu_llamada_gosub -> <empty>','neu_llamada_gosub',0,'p_neu_llamada_gosub','lexer_parser.py',730),
  ('neu_esEstatuto -> <empty>','neu_esEstatuto',0,'p_neu_esEstatuto','lexer_parser.py',749),
  ('neu_esExpresion -> <empty>','neu_esExpresion',0,'p_neu_esExpresion','lexer_parser.py',756),
  ('neu_addOperador -> <empty>','neu_addOperador',0,'p_neu_addOperador','lexer_parser.py',764),
  ('getGMemoria -> <empty>','getGMemoria',0,'p_getGMemoria','lexer_parser.py',777),
  ('getLMemoria -> <empty>','getLMemoria',0,'p_getLMemoria','lexer_parser.py',801),
  ('getCMemoria -> <empty>','getCMemoria',0,'p_getCMemoria','lexer_parser.py',824),
  ('neu_hacerTermino -> <empty>','neu_hacerTermino',0,'p_neu_hacerTermino','lexer_parser.py',849),
  ('neu_hacerExp -> <empty>','neu_hacerExp',0,'p_neu_hacerExp','lexer_parser.py',874),
  ('neu_hacerSuperExp -> <empty>','neu_hacerSuperExp',0,'p_neu_hacerSuperExp','lexer_parser.py',899),
  ('neu_hacerHiperExp -> <empty>','neu_hacerHiperExp',0,'p_neu_hacerHiperExp','lexer_parser.py',924),
  ('neu_asignacion -> <empty>','neu_asignacion',0,'p_neu_asignacion','lexer_parser.py',948),
  ('neu_lectura -> <empty>','neu_lectura',0,'p_neu_lectura','lexer_parser.py',960),
  ('neu_escritura -> <empty>','neu_escritura',0,'p_neu_escritura','lexer_parser.py',968),
  ('neu_letrero -> <empty>','neu_letrero',0,'p_neu_letrero','lexer_parser.py',973),
  ('neu_retorno -> <empty>','neu_retorno',0,'p_neu_retorno','lexer_parser.py',983),
  ('neu_iniciarDecision -> <empty>','neu_iniciarDecision',0,'p_neu_iniciarDecision','lexer_parser.py',994),
  ('neu_iniciarDecisionElse -> <empty>','neu_iniciarDecisionElse',0,'p_neu_iniciarDecisionElse','lexer_parser.py',1002),
  ('neu_endDecision -> <empty>','neu_endDecision',0,'p_neu_endDecision','lexer_parser.py',1008),
  ('neu_condicionalAntes -> <empty>','neu_condicionalAntes',0,'p_neu_condicionalAntes','lexer_parser.py',1013),
  ('neu_condicionalDurante -> <empty>','neu_condicionalDurante',0,'p_neu_condicionalDurante','lexer_parser.py',1017),
  ('neu_condicionalDespues -> <empty>','neu_condicionalDespues',0,'p_neu_condicionalDespues','lexer_parser.py',1021),
  ('neu_addIDFor -> <empty>','neu_addIDFor',0,'p_neu_addIDFor','lexer_parser.py',1027),
  ('neu_asignacionFor -> <empty>','neu_asignacionFor',0,'p_neu_asignacionFor','lexer_parser.py',1045),
  ('neu_boolFor -> <empty>','neu_boolFor',0,'p_neu_boolFor','lexer_parser.py',1054),
  ('neu_endCondicion -> <empty>','neu_endCondicion',0,'p_neu_endCondicion','lexer_parser.py',1077),
  ('neu_parametroEnviado -> <empty>','neu_parametroEnviado',0,'p_neu_parametroEnviado','lexer_parser.py',1096),
  ('neu_recibirParametros -> <empty>','neu_recibirParametros',0,'p_neu_recibirParametros','lexer_parser.py',1116),
  ('neu_paramValidacion -> <empty>','neu_paramValidacion',0,'p_neu_paramValidacion','lexer_parser.py',1134),
  ('neu_vaciarPilas -> <empty>','neu_vaciarPilas',0,'p_neu_vaciarPilas','lexer_parser.py',1141),
  ('notifError -> <empty>','notifError',0,'p_notifError','lexer_parser.py',1150),
]
