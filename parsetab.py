
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CARACTER CARACTERVAL COMA DESDE DIFQUE DIV DOSPUNTOS ENTERO ENTEROVAL ENTONCES ESCRIBIR FLOTANTE FLOTANTEVAL FUNCION HACER HASTA ID IGUAL IGUALQUE LEER LETRERO L_CORCHETE L_LLAVE L_PAR MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS MIENTRAS MULT OR PRINCIPAL PROGRAMA PUNTO PUNTOYCOMA REGRESA R_CORCHETE R_LLAVE R_PAR SI SINO VARIABLES VOID\n    program : PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty\n    \n    variables : VARIABLES variablesU\n              | empty\n\n    variablesU : variablesD\n               | empty\n\n    variablesD : ID neu_addVariableAStack COMA variablesD\n               | ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU\n    \n    funciones : funcionesU\n              | empty\n    \n    funcionesU : tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD\n    \n    funcionesD : funciones\n               | empty\n    \n    tipo_funcion : ENTERO empty\n                 | FLOTANTE empty\n                 | CARACTER empty\n                 | VOID empty\n    \n    tipo_var : ENTERO empty\n             | FLOTANTE empty\n             | CARACTER empty\n    \n    recibir_parametros : ID DOSPUNTOS tipo_var recibir_parametrosD empty\n                       | empty\n\n    recibir_parametrosD : COMA recibir_parametros empty\n                       | empty\n    \n    mandar_parametros : hiper_exp neu_parametroEnviado mandar_parametrosD empty\n                      | empty\n\n    mandar_parametrosD : COMA mandar_parametros empty\n                       | empty\n    \n    bloque : L_LLAVE bloqueU R_LLAVE empty\n\n    bloqueU : estatuto bloqueD neu_vaciarPilas empty\n            | empty\n\n    bloqueD : bloqueU empty\n            | empty\n    \n    estatuto : asignacion PUNTOYCOMA empty\n             | llamada PUNTOYCOMA empty\n             | retorno PUNTOYCOMA empty\n             | lectura PUNTOYCOMA empty\n             | escritura PUNTOYCOMA empty\n             | decision empty\n             | condicional empty\n             | no_condicional empty\n             | empty\n    \n    asignacion : ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty\n    \n    llamada : ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty\n    \n    retorno : REGRESA L_PAR hiper_exp neu_retorno R_PAR empty\n    \n    lectura : LEER L_PAR ID neu_lectura R_PAR empty\n    \n    escritura : ESCRIBIR L_PAR escrituraD R_PAR empty\n\n    escrituraD : hiper_exp neu_escritura empty\n               | LETRERO empty\n    \n    decision : SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty\n\n    decisionU : SINO neu_iniciarDecisionElse bloque empty\n              | empty\n    \n    condicional : MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty\n    \n    no_condicional : DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty\n    \n    asignacionFor : ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty\n    \n    operadorA : MAS neu_addOperador empty\n              | MENOS neu_addOperador empty\n    \n    operadorT : MULT neu_addOperador empty\n              | DIV neu_addOperador empty\n    \n    operadorL : OR neu_addOperador empty\n              | AND neu_addOperador empty\n    \n    operadorR : MENORQUE neu_addOperador empty\n              | MAYORQUE neu_addOperador empty\n              | MENORIGUALQUE neu_addOperador empty\n              | MAYORIGUALQUE neu_addOperador empty\n              | IGUALQUE neu_addOperador empty\n              | DIFQUE neu_addOperador empty\n    \n    hiper_exp : super_exp neu_hacerHiperExp hiper_expU\n\n    hiper_expU : operadorL hiper_exp empty \n               | empty\n    \n    super_exp : exp neu_hacerSuperExp super_expU\n\n    super_expU : operadorR super_exp empty \n               | empty\n    \n    exp : termino neu_hacerExp expU\n\n    expU : operadorA exp\n         | empty\n    \n    termino : factor neu_hacerTermino terminoU\n\n    terminoU : operadorT termino \n             | empty\n    \n    factor : varcte empty\n           | llamada empty\n           | L_PAR hiper_exp R_PAR empty\n    \n    varcte  : ID neu_addID empty\n            | ENTEROVAL neu_addConstanteEntero empty\n            | FLOTANTEVAL neu_addConstanteFlotante empty\n            | CARACTERVAL neu_addConstanteCaracter empty\n    \n    empty : \n    neu_programa : neu_endPrograma : neu_addFuncion : neu_endFuncion : neu_principal : neu_addVariable : neu_addVariableAStack : neu_addID : neu_addConstanteEntero : neu_addConstanteFlotante : neu_addConstanteCaracter : neu_addTermino : neu_llamada_era : neu_llamada_gosub : neu_addOperador : getGMemoria : getLMemoria : getCMemoria : neu_hacerTermino : neu_hacerExp : neu_hacerSuperExp : neu_hacerHiperExp : neu_asignacion : neu_lectura : neu_escritura : neu_retorno : neu_iniciarDecision : neu_iniciarDecisionElse : neu_endDecision : neu_condicionalAntes : neu_condicionalDurante : neu_condicionalDespues : neu_addIDFor : neu_asignacionFor : neu_boolFor : neu_endCondicion  : neu_parametroEnviado : neu_vaciarPilas : notifError : '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,46,52,73,74,96,],[0,-88,-86,-1,-86,-28,]),'ID':([2,8,22,31,44,45,47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,88,89,90,91,92,93,96,99,100,101,102,103,104,105,106,123,128,131,164,166,167,169,171,172,173,174,175,176,178,180,181,183,185,186,196,197,206,210,211,213,214,215,216,217,218,220,221,223,224,229,235,236,238,239,240,241,242,243,244,245,246,247,248,253,254,256,259,261,262,264,265,266,267,268,269,],[3,20,30,20,48,20,64,-41,64,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,114,118,114,114,-116,125,-28,-33,-34,-35,-36,-37,-101,114,114,114,48,114,114,-101,-101,114,-101,-101,-101,-101,-101,-101,114,-101,-101,114,-101,-101,114,-101,114,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,114,-59,-60,-61,-62,-63,-64,-65,-66,-55,-56,-57,-58,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'PUNTOYCOMA':([3,4,32,33,34,35,39,40,41,42,56,57,58,59,60,108,109,110,111,112,113,114,115,116,117,137,138,139,140,141,142,143,144,145,146,148,158,159,161,162,163,165,168,170,177,179,182,184,187,188,189,190,191,192,202,203,207,208,209,212,219,222,225,230,231,234,237,],[-87,5,-92,-86,-86,-86,45,-17,-18,-19,78,79,80,81,82,-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,-86,-86,-86,-86,-79,-80,-86,-86,-86,-86,-86,-109,-100,-86,-86,-67,-69,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-86,-46,-86,-86,-81,-44,-86,-86,-74,-77,-45,-42,-43,-68,-71,]),'VARIABLES':([5,72,],[8,8,]),'ENTERO':([5,6,7,8,17,18,19,28,38,45,51,71,74,96,129,157,],[-86,13,-3,-86,-2,-4,-5,33,-6,-86,-7,33,-86,-28,-90,13,]),'FLOTANTE':([5,6,7,8,17,18,19,28,38,45,51,71,74,96,129,157,],[-86,14,-3,-86,-2,-4,-5,34,-6,-86,-7,34,-86,-28,-90,14,]),'CARACTER':([5,6,7,8,17,18,19,28,38,45,51,71,74,96,129,157,],[-86,15,-3,-86,-2,-4,-5,35,-6,-86,-7,35,-86,-28,-90,15,]),'VOID':([5,6,7,8,17,18,19,38,45,51,74,96,129,157,],[-86,16,-3,-86,-2,-4,-5,-6,-86,-7,-86,-28,-90,16,]),'PRINCIPAL':([5,6,7,8,9,10,11,17,18,19,38,45,51,74,96,129,157,199,200,201,],[-86,-86,-3,-86,21,-9,-8,-2,-4,-5,-6,-86,-7,-86,-28,-90,-86,-10,-11,-9,]),'L_LLAVE':([7,8,17,18,19,38,43,45,51,72,95,226,249,255,257,260,],[-3,-86,-2,-4,-5,-6,47,-86,-7,-86,47,47,47,-114,47,47,]),'FUNCION':([12,13,14,15,16,23,24,25,26,],[22,-86,-86,-86,-86,-13,-14,-15,-16,]),'DOSPUNTOS':([20,48,],[28,71,]),'COMA':([20,27,33,34,35,40,41,42,94,108,109,110,111,112,113,114,115,116,117,134,137,138,139,140,141,142,143,144,145,146,159,160,161,163,165,168,170,177,179,182,184,187,188,189,190,203,207,209,212,219,222,231,234,237,],[-93,31,-86,-86,-86,-17,-18,-19,128,-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,-123,-86,-86,-86,-86,-79,-80,-86,-86,-86,-86,-100,206,-86,-67,-69,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-86,-86,-74,-77,-43,-68,-71,]),'L_PAR':([21,29,30,37,64,65,66,67,68,69,70,87,88,90,91,92,104,105,106,114,123,131,164,166,167,169,171,172,173,174,175,176,178,180,181,183,185,186,196,197,206,210,211,213,214,215,216,217,218,220,221,223,224,229,235,236,238,239,240,241,242,243,244,245,246,247,],[-91,36,-89,44,-99,88,89,90,91,92,93,105,106,106,106,-116,-101,106,106,-99,106,106,106,-101,-101,106,-101,-101,-101,-101,-101,-101,106,-101,-101,106,-101,-101,106,-101,106,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,106,-59,-60,-61,-62,-63,-64,-65,-66,-55,-56,-57,-58,]),'R_PAR':([33,34,35,36,40,41,42,44,49,50,94,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,152,155,156,159,160,161,163,165,168,170,177,179,182,184,187,188,189,190,193,195,198,203,204,205,206,207,209,212,219,222,231,232,233,234,237,251,252,258,263,],[-86,-86,-86,43,-17,-18,-19,-86,72,-21,-86,-86,-112,-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,-110,148,-111,-86,151,153,-86,-23,-86,159,-25,-123,161,162,-86,-86,-86,-86,-79,-80,-86,-86,-86,-86,191,-86,-48,-117,-20,-86,-100,-86,-86,-67,-69,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-47,227,-22,-86,-86,-27,-86,-81,-86,-86,-74,-77,-43,-24,-86,-68,-71,-120,-26,-86,-54,]),'R_LLAVE':([47,53,54,55,61,62,63,74,75,76,77,78,79,80,81,82,83,84,85,96,97,98,99,100,101,102,103,130,248,253,254,256,259,261,262,264,265,266,267,268,269,],[-86,74,-30,-86,-86,-86,-86,-86,-124,-30,-86,-86,-86,-86,-86,-86,-38,-39,-40,-28,-86,-31,-33,-34,-35,-36,-37,-29,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'REGRESA':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[65,-41,65,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'LEER':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[66,-41,66,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'ESCRIBIR':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[67,-41,67,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'SI':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[68,-41,68,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'MIENTRAS':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[69,-41,69,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'DESDE':([47,54,55,61,62,63,74,76,78,79,80,81,82,83,84,85,96,99,100,101,102,103,248,253,254,256,259,261,262,264,265,266,267,268,269,],[70,-41,70,-86,-86,-86,-86,-41,-86,-86,-86,-86,-86,-38,-39,-40,-28,-33,-34,-35,-36,-37,-86,-115,-51,-118,-86,-86,-122,-49,-86,-52,-86,-50,-53,]),'IGUAL':([64,86,125,154,],[-94,104,-119,197,]),'SINO':([74,96,248,],[-86,-28,255,]),'ENTEROVAL':([88,90,91,92,104,105,106,123,131,164,166,167,169,171,172,173,174,175,176,178,180,181,183,185,186,196,197,206,210,211,213,214,215,216,217,218,220,221,223,224,229,235,236,238,239,240,241,242,243,244,245,246,247,],[115,115,115,-116,-101,115,115,115,115,115,-101,-101,115,-101,-101,-101,-101,-101,-101,115,-101,-101,115,-101,-101,115,-101,115,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,115,-59,-60,-61,-62,-63,-64,-65,-66,-55,-56,-57,-58,]),'FLOTANTEVAL':([88,90,91,92,104,105,106,123,131,164,166,167,169,171,172,173,174,175,176,178,180,181,183,185,186,196,197,206,210,211,213,214,215,216,217,218,220,221,223,224,229,235,236,238,239,240,241,242,243,244,245,246,247,],[116,116,116,-116,-101,116,116,116,116,116,-101,-101,116,-101,-101,-101,-101,-101,-101,116,-101,-101,116,-101,-101,116,-101,116,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,116,-59,-60,-61,-62,-63,-64,-65,-66,-55,-56,-57,-58,]),'CARACTERVAL':([88,90,91,92,104,105,106,123,131,164,166,167,169,171,172,173,174,175,176,178,180,181,183,185,186,196,197,206,210,211,213,214,215,216,217,218,220,221,223,224,229,235,236,238,239,240,241,242,243,244,245,246,247,],[117,117,117,-116,-101,117,117,117,117,117,-101,-101,117,-101,-101,-101,-101,-101,-101,117,-101,-101,117,-101,-101,117,-101,117,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,117,-59,-60,-61,-62,-63,-64,-65,-66,-55,-56,-57,-58,]),'LETRERO':([90,],[121,]),'OR':([108,109,110,111,112,113,114,115,116,117,137,138,139,140,141,142,143,144,145,146,159,161,168,170,177,179,182,184,187,188,189,190,203,207,212,219,222,231,237,],[-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,166,-86,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-86,-74,-77,-43,-71,]),'AND':([108,109,110,111,112,113,114,115,116,117,137,138,139,140,141,142,143,144,145,146,159,161,168,170,177,179,182,184,187,188,189,190,203,207,212,219,222,231,237,],[-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,167,-86,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-86,-74,-77,-43,-71,]),'HACER':([108,109,110,111,112,113,114,115,116,117,137,138,139,140,141,142,143,144,145,146,159,161,163,165,168,170,177,179,182,184,187,188,189,190,203,207,209,212,219,222,227,228,231,234,237,250,],[-108,-107,-106,-105,-86,-86,-94,-95,-96,-97,-86,-86,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-67,-69,-70,-72,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-86,-86,-74,-77,249,-121,-43,-68,-71,257,]),'MENORQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,171,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'MAYORQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,172,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'MENORIGUALQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,173,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'MAYORIGUALQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,174,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'IGUALQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,175,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'DIFQUE':([109,110,111,112,113,114,115,116,117,138,139,140,141,142,143,144,145,146,159,161,177,179,182,184,187,188,189,190,203,207,219,222,231,],[-107,-106,-105,-86,-86,-94,-95,-96,-97,176,-86,-86,-79,-80,-86,-86,-86,-86,-100,-86,-73,-75,-76,-78,-82,-83,-84,-85,-86,-81,-74,-77,-43,]),'MAS':([110,111,112,113,114,115,116,117,139,140,141,142,143,144,145,146,159,161,182,184,187,188,189,190,203,207,222,231,],[-106,-105,-86,-86,-94,-95,-96,-97,180,-86,-79,-80,-86,-86,-86,-86,-100,-86,-76,-78,-82,-83,-84,-85,-86,-81,-77,-43,]),'MENOS':([110,111,112,113,114,115,116,117,139,140,141,142,143,144,145,146,159,161,182,184,187,188,189,190,203,207,222,231,],[-106,-105,-86,-86,-94,-95,-96,-97,181,-86,-79,-80,-86,-86,-86,-86,-100,-86,-76,-78,-82,-83,-84,-85,-86,-81,-77,-43,]),'MULT':([111,112,113,114,115,116,117,140,141,142,143,144,145,146,159,161,187,188,189,190,203,207,231,],[-105,-86,-86,-94,-95,-96,-97,185,-79,-80,-86,-86,-86,-86,-100,-86,-82,-83,-84,-85,-86,-81,-43,]),'DIV':([111,112,113,114,115,116,117,140,141,142,143,144,145,146,159,161,187,188,189,190,203,207,231,],[-105,-86,-86,-94,-95,-96,-97,186,-79,-80,-86,-86,-86,-86,-100,-86,-82,-83,-84,-85,-86,-81,-43,]),'ENTONCES':([151,194,],[-113,226,]),'HASTA':([153,],[196,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neu_programa':([3,],[4,]),'variables':([5,72,],[6,95,]),'empty':([5,6,8,13,14,15,16,33,34,35,44,45,47,52,55,61,62,63,72,74,77,78,79,80,81,82,94,97,105,112,113,121,126,128,137,138,139,140,143,144,145,146,148,149,156,157,160,161,162,191,202,203,204,206,209,210,211,212,213,214,215,216,217,218,220,221,223,224,233,248,258,259,261,265,267,],[7,10,19,23,24,25,26,40,41,42,50,19,54,73,76,83,84,85,7,96,98,99,100,101,102,103,127,130,133,141,142,150,155,50,165,170,179,184,187,188,189,190,192,193,198,201,205,207,208,225,230,231,232,133,234,235,236,237,238,239,240,241,242,243,244,245,246,247,252,254,263,264,266,268,269,]),'funciones':([6,157,],[9,200,]),'funcionesU':([6,157,],[11,11,]),'tipo_funcion':([6,157,],[12,12,]),'variablesU':([8,45,],[17,51,]),'variablesD':([8,31,45,],[18,38,18,]),'neu_addVariableAStack':([20,],[27,]),'neu_principal':([21,],[29,]),'tipo_var':([28,71,],[32,94,]),'neu_addFuncion':([30,],[37,]),'neu_addVariable':([32,],[39,]),'bloque':([43,95,226,249,257,260,],[46,129,248,256,262,265,]),'recibir_parametros':([44,128,],[49,156,]),'neu_endPrograma':([46,],[52,]),'bloqueU':([47,55,],[53,77,]),'estatuto':([47,55,],[55,55,]),'asignacion':([47,55,],[56,56,]),'llamada':([47,55,88,90,91,105,106,123,131,164,169,178,183,196,206,229,],[57,57,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'retorno':([47,55,],[58,58,]),'lectura':([47,55,],[59,59,]),'escritura':([47,55,],[60,60,]),'decision':([47,55,],[61,61,]),'condicional':([47,55,],[62,62,]),'no_condicional':([47,55,],[63,63,]),'bloqueD':([55,],[75,]),'neu_addID':([64,114,],[86,143,]),'neu_llamada_era':([64,114,],[87,87,]),'neu_vaciarPilas':([75,],[97,]),'hiper_exp':([88,90,91,105,106,123,131,164,196,206,229,],[107,120,122,134,135,152,158,209,228,134,251,]),'super_exp':([88,90,91,105,106,123,131,164,169,196,206,229,],[108,108,108,108,108,108,108,108,212,108,108,108,]),'exp':([88,90,91,105,106,123,131,164,169,178,196,206,229,],[109,109,109,109,109,109,109,109,109,219,109,109,109,]),'termino':([88,90,91,105,106,123,131,164,169,178,183,196,206,229,],[110,110,110,110,110,110,110,110,110,110,222,110,110,110,]),'factor':([88,90,91,105,106,123,131,164,169,178,183,196,206,229,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'varcte':([88,90,91,105,106,123,131,164,169,178,183,196,206,229,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'escrituraD':([90,],[119,]),'neu_condicionalAntes':([92,],[123,]),'asignacionFor':([93,],[124,]),'recibir_parametrosD':([94,],[126,]),'neu_addOperador':([104,166,167,171,172,173,174,175,176,180,181,185,186,197,],[131,210,211,213,214,215,216,217,218,220,221,223,224,229,]),'mandar_parametros':([105,206,],[132,233,]),'neu_retorno':([107,],[136,]),'neu_hacerHiperExp':([108,],[137,]),'neu_hacerSuperExp':([109,],[138,]),'neu_hacerExp':([110,],[139,]),'neu_hacerTermino':([111,],[140,]),'neu_addConstanteEntero':([115,],[144,]),'neu_addConstanteFlotante':([116,],[145,]),'neu_addConstanteCaracter':([117,],[146,]),'neu_lectura':([118,],[147,]),'neu_escritura':([120,],[149,]),'neu_addIDFor':([125,],[154,]),'neu_endFuncion':([129,],[157,]),'neu_parametroEnviado':([134,],[160,]),'hiper_expU':([137,],[163,]),'operadorL':([137,],[164,]),'super_expU':([138,],[168,]),'operadorR':([138,],[169,]),'expU':([139,],[177,]),'operadorA':([139,],[178,]),'terminoU':([140,],[182,]),'operadorT':([140,],[183,]),'neu_iniciarDecision':([151,],[194,]),'neu_condicionalDurante':([152,],[195,]),'funcionesD':([157,],[199,]),'neu_asignacion':([158,],[202,]),'neu_llamada_gosub':([159,],[203,]),'mandar_parametrosD':([160,],[204,]),'neu_boolFor':([228,],[250,]),'decisionU':([248,],[253,]),'neu_asignacionFor':([251,],[258,]),'neu_endDecision':([253,],[259,]),'neu_iniciarDecisionElse':([255,],[260,]),'neu_condicionalDespues':([256,],[261,]),'neu_endCondicion':([262,],[267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty','program',13,'p_programa','lexer_parser.py',241),
  ('variables -> VARIABLES variablesU','variables',2,'p_variales','lexer_parser.py',247),
  ('variables -> empty','variables',1,'p_variales','lexer_parser.py',248),
  ('variablesU -> variablesD','variablesU',1,'p_variales','lexer_parser.py',250),
  ('variablesU -> empty','variablesU',1,'p_variales','lexer_parser.py',251),
  ('variablesD -> ID neu_addVariableAStack COMA variablesD','variablesD',4,'p_variales','lexer_parser.py',253),
  ('variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU','variablesD',6,'p_variales','lexer_parser.py',254),
  ('funciones -> funcionesU','funciones',1,'p_funciones','lexer_parser.py',260),
  ('funciones -> empty','funciones',1,'p_funciones','lexer_parser.py',261),
  ('funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD','funcionesU',11,'p_funciones','lexer_parser.py',263),
  ('funcionesD -> funciones','funcionesD',1,'p_funciones','lexer_parser.py',265),
  ('funcionesD -> empty','funcionesD',1,'p_funciones','lexer_parser.py',266),
  ('tipo_funcion -> ENTERO empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',272),
  ('tipo_funcion -> FLOTANTE empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',273),
  ('tipo_funcion -> CARACTER empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',274),
  ('tipo_funcion -> VOID empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',275),
  ('tipo_var -> ENTERO empty','tipo_var',2,'p_tipo_var','lexer_parser.py',281),
  ('tipo_var -> FLOTANTE empty','tipo_var',2,'p_tipo_var','lexer_parser.py',282),
  ('tipo_var -> CARACTER empty','tipo_var',2,'p_tipo_var','lexer_parser.py',283),
  ('recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty','recibir_parametros',5,'p_recibir_parametros','lexer_parser.py',289),
  ('recibir_parametros -> empty','recibir_parametros',1,'p_recibir_parametros','lexer_parser.py',290),
  ('recibir_parametrosD -> COMA recibir_parametros empty','recibir_parametrosD',3,'p_recibir_parametros','lexer_parser.py',292),
  ('recibir_parametrosD -> empty','recibir_parametrosD',1,'p_recibir_parametros','lexer_parser.py',293),
  ('mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty','mandar_parametros',4,'p_mandar_parametros','lexer_parser.py',298),
  ('mandar_parametros -> empty','mandar_parametros',1,'p_mandar_parametros','lexer_parser.py',299),
  ('mandar_parametrosD -> COMA mandar_parametros empty','mandar_parametrosD',3,'p_mandar_parametros','lexer_parser.py',301),
  ('mandar_parametrosD -> empty','mandar_parametrosD',1,'p_mandar_parametros','lexer_parser.py',302),
  ('bloque -> L_LLAVE bloqueU R_LLAVE empty','bloque',4,'p_bloque','lexer_parser.py',310),
  ('bloqueU -> estatuto bloqueD neu_vaciarPilas empty','bloqueU',4,'p_bloque','lexer_parser.py',312),
  ('bloqueU -> empty','bloqueU',1,'p_bloque','lexer_parser.py',313),
  ('bloqueD -> bloqueU empty','bloqueD',2,'p_bloque','lexer_parser.py',315),
  ('bloqueD -> empty','bloqueD',1,'p_bloque','lexer_parser.py',316),
  ('estatuto -> asignacion PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',322),
  ('estatuto -> llamada PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',323),
  ('estatuto -> retorno PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',324),
  ('estatuto -> lectura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',325),
  ('estatuto -> escritura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',326),
  ('estatuto -> decision empty','estatuto',2,'p_estatuto','lexer_parser.py',327),
  ('estatuto -> condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',328),
  ('estatuto -> no_condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',329),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexer_parser.py',330),
  ('asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',7,'p_asignacion','lexer_parser.py',335),
  ('llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty','llamada',7,'p_llamada','lexer_parser.py',341),
  ('retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty','retorno',6,'p_retorno','lexer_parser.py',347),
  ('lectura -> LEER L_PAR ID neu_lectura R_PAR empty','lectura',6,'p_lectura','lexer_parser.py',353),
  ('escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty','escritura',5,'p_escritura','lexer_parser.py',359),
  ('escrituraD -> hiper_exp neu_escritura empty','escrituraD',3,'p_escritura','lexer_parser.py',361),
  ('escrituraD -> LETRERO empty','escrituraD',2,'p_escritura','lexer_parser.py',362),
  ('decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty','decision',10,'p_decision','lexer_parser.py',368),
  ('decisionU -> SINO neu_iniciarDecisionElse bloque empty','decisionU',4,'p_decision','lexer_parser.py',370),
  ('decisionU -> empty','decisionU',1,'p_decision','lexer_parser.py',371),
  ('condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty','condicional',10,'p_condicional','lexer_parser.py',377),
  ('no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty','no_condicional',11,'p_no_condicional','lexer_parser.py',383),
  ('asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty','asignacionFor',7,'p_asignacionFor','lexer_parser.py',388),
  ('operadorA -> MAS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',396),
  ('operadorA -> MENOS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',397),
  ('operadorT -> MULT neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',403),
  ('operadorT -> DIV neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',404),
  ('operadorL -> OR neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',410),
  ('operadorL -> AND neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',411),
  ('operadorR -> MENORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',417),
  ('operadorR -> MAYORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',418),
  ('operadorR -> MENORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',419),
  ('operadorR -> MAYORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',420),
  ('operadorR -> IGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',421),
  ('operadorR -> DIFQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',422),
  ('hiper_exp -> super_exp neu_hacerHiperExp hiper_expU','hiper_exp',3,'p_hiper_exp','lexer_parser.py',430),
  ('hiper_expU -> operadorL hiper_exp empty','hiper_expU',3,'p_hiper_exp','lexer_parser.py',432),
  ('hiper_expU -> empty','hiper_expU',1,'p_hiper_exp','lexer_parser.py',433),
  ('super_exp -> exp neu_hacerSuperExp super_expU','super_exp',3,'p_super_exp','lexer_parser.py',438),
  ('super_expU -> operadorR super_exp empty','super_expU',3,'p_super_exp','lexer_parser.py',440),
  ('super_expU -> empty','super_expU',1,'p_super_exp','lexer_parser.py',441),
  ('exp -> termino neu_hacerExp expU','exp',3,'p_exp','lexer_parser.py',446),
  ('expU -> operadorA exp','expU',2,'p_exp','lexer_parser.py',448),
  ('expU -> empty','expU',1,'p_exp','lexer_parser.py',449),
  ('termino -> factor neu_hacerTermino terminoU','termino',3,'p_termino','lexer_parser.py',454),
  ('terminoU -> operadorT termino','terminoU',2,'p_termino','lexer_parser.py',456),
  ('terminoU -> empty','terminoU',1,'p_termino','lexer_parser.py',457),
  ('factor -> varcte empty','factor',2,'p_factor','lexer_parser.py',462),
  ('factor -> llamada empty','factor',2,'p_factor','lexer_parser.py',463),
  ('factor -> L_PAR hiper_exp R_PAR empty','factor',4,'p_factor','lexer_parser.py',464),
  ('varcte -> ID neu_addID empty','varcte',3,'p_varcte','lexer_parser.py',469),
  ('varcte -> ENTEROVAL neu_addConstanteEntero empty','varcte',3,'p_varcte','lexer_parser.py',470),
  ('varcte -> FLOTANTEVAL neu_addConstanteFlotante empty','varcte',3,'p_varcte','lexer_parser.py',471),
  ('varcte -> CARACTERVAL neu_addConstanteCaracter empty','varcte',3,'p_varcte','lexer_parser.py',472),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',483),
  ('neu_programa -> <empty>','neu_programa',0,'p_neu_programa','lexer_parser.py',492),
  ('neu_endPrograma -> <empty>','neu_endPrograma',0,'p_neu_endPrograma','lexer_parser.py',502),
  ('neu_addFuncion -> <empty>','neu_addFuncion',0,'p_neu_addFuncion','lexer_parser.py',507),
  ('neu_endFuncion -> <empty>','neu_endFuncion',0,'p_neu_endFuncion','lexer_parser.py',532),
  ('neu_principal -> <empty>','neu_principal',0,'p_neu_principal','lexer_parser.py',537),
  ('neu_addVariable -> <empty>','neu_addVariable',0,'p_neu_addVariable','lexer_parser.py',546),
  ('neu_addVariableAStack -> <empty>','neu_addVariableAStack',0,'p_neu_addVariableAStack','lexer_parser.py',568),
  ('neu_addID -> <empty>','neu_addID',0,'p_neu_addID','lexer_parser.py',575),
  ('neu_addConstanteEntero -> <empty>','neu_addConstanteEntero',0,'p_neu_addConstanteEntero','lexer_parser.py',588),
  ('neu_addConstanteFlotante -> <empty>','neu_addConstanteFlotante',0,'p_neu_addConstanteFlotante','lexer_parser.py',597),
  ('neu_addConstanteCaracter -> <empty>','neu_addConstanteCaracter',0,'p_neu_addConstanteCaracter','lexer_parser.py',606),
  ('neu_addTermino -> <empty>','neu_addTermino',0,'p_neu_addTermino','lexer_parser.py',614),
  ('neu_llamada_era -> <empty>','neu_llamada_era',0,'p_neu_llamada_era','lexer_parser.py',621),
  ('neu_llamada_gosub -> <empty>','neu_llamada_gosub',0,'p_neu_llamada_gosub','lexer_parser.py',631),
  ('neu_addOperador -> <empty>','neu_addOperador',0,'p_neu_addOperador','lexer_parser.py',636),
  ('getGMemoria -> <empty>','getGMemoria',0,'p_getGMemoria','lexer_parser.py',649),
  ('getLMemoria -> <empty>','getLMemoria',0,'p_getLMemoria','lexer_parser.py',672),
  ('getCMemoria -> <empty>','getCMemoria',0,'p_getCMemoria','lexer_parser.py',695),
  ('neu_hacerTermino -> <empty>','neu_hacerTermino',0,'p_neu_hacerTermino','lexer_parser.py',720),
  ('neu_hacerExp -> <empty>','neu_hacerExp',0,'p_neu_hacerExp','lexer_parser.py',745),
  ('neu_hacerSuperExp -> <empty>','neu_hacerSuperExp',0,'p_neu_hacerSuperExp','lexer_parser.py',770),
  ('neu_hacerHiperExp -> <empty>','neu_hacerHiperExp',0,'p_neu_hacerHiperExp','lexer_parser.py',795),
  ('neu_asignacion -> <empty>','neu_asignacion',0,'p_neu_asignacion','lexer_parser.py',819),
  ('neu_lectura -> <empty>','neu_lectura',0,'p_neu_lectura','lexer_parser.py',831),
  ('neu_escritura -> <empty>','neu_escritura',0,'p_neu_escritura','lexer_parser.py',839),
  ('neu_retorno -> <empty>','neu_retorno',0,'p_neu_retorno','lexer_parser.py',844),
  ('neu_iniciarDecision -> <empty>','neu_iniciarDecision',0,'p_neu_iniciarDecision','lexer_parser.py',853),
  ('neu_iniciarDecisionElse -> <empty>','neu_iniciarDecisionElse',0,'p_neu_iniciarDecisionElse','lexer_parser.py',861),
  ('neu_endDecision -> <empty>','neu_endDecision',0,'p_neu_endDecision','lexer_parser.py',867),
  ('neu_condicionalAntes -> <empty>','neu_condicionalAntes',0,'p_neu_condicionalAntes','lexer_parser.py',872),
  ('neu_condicionalDurante -> <empty>','neu_condicionalDurante',0,'p_neu_condicionalDurante','lexer_parser.py',876),
  ('neu_condicionalDespues -> <empty>','neu_condicionalDespues',0,'p_neu_condicionalDespues','lexer_parser.py',880),
  ('neu_addIDFor -> <empty>','neu_addIDFor',0,'p_neu_addIDFor','lexer_parser.py',886),
  ('neu_asignacionFor -> <empty>','neu_asignacionFor',0,'p_neu_asignacionFor','lexer_parser.py',904),
  ('neu_boolFor -> <empty>','neu_boolFor',0,'p_neu_boolFor','lexer_parser.py',913),
  ('neu_endCondicion -> <empty>','neu_endCondicion',0,'p_neu_endCondicion','lexer_parser.py',936),
  ('neu_parametroEnviado -> <empty>','neu_parametroEnviado',0,'p_neu_parametroEnviado','lexer_parser.py',955),
  ('neu_vaciarPilas -> <empty>','neu_vaciarPilas',0,'p_neu_vaciarPilas','lexer_parser.py',964),
  ('notifError -> <empty>','notifError',0,'p_notifError','lexer_parser.py',973),
]
