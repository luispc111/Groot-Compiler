
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CARACTER CARACTERVAL COMA DESDE DIFQUE DIV DOSPUNTOS ENTERO ENTEROVAL ENTONCES ESCRIBIR FLOTANTE FLOTANTEVAL FUNCION HACER HASTA ID IGUAL IGUALQUE LEER LETRERO L_CORCHETE L_LLAVE L_PAR MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS MIENTRAS MULT OR PRINCIPAL PROGRAMA PUNTOYCOMA REGRESA R_CORCHETE R_LLAVE R_PAR SI SINO VARIABLES VOID\n    program : PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty\n    \n    variables : VARIABLES variablesU\n              | empty\n\n    variablesU : variablesD\n               | empty\n\n    variablesD : ID neu_addVariableAStack COMA variablesD\n               | ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU\n               | ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU\n               | ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU\n    \n    funciones : funcionesU\n              | empty\n    \n    funcionesU : tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD\n    \n    funcionesD : funciones\n               | empty\n    \n    tipo_funcion : ENTERO empty\n                 | FLOTANTE empty\n                 | CARACTER empty\n                 | VOID empty\n    \n    tipo_var : ENTERO empty\n             | FLOTANTE empty\n             | CARACTER empty\n    \n    recibir_parametros : ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty\n                       | empty\n\n    recibir_parametrosD : COMA recibir_parametros empty\n                       | empty\n    \n    mandar_parametros : hiper_exp neu_parametroEnviado mandar_parametrosD empty\n                      | empty\n\n    mandar_parametrosD : COMA mandar_parametros empty\n                       | empty\n    \n    bloque : L_LLAVE bloqueU R_LLAVE empty\n\n    bloqueU : estatuto bloqueD neu_vaciarPilas empty\n            | empty\n\n    bloqueD : bloqueU empty\n            | empty\n    \n    estatuto : asignacion PUNTOYCOMA empty\n             | llamada neu_esEstatuto PUNTOYCOMA empty\n             | retorno PUNTOYCOMA empty\n             | lectura PUNTOYCOMA empty\n             | escritura PUNTOYCOMA empty\n             | decision empty\n             | condicional empty\n             | no_condicional empty\n             | empty\n    \n    asignacion : ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty\n               | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty\n               | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty\n    \n    llamada : ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty\n    \n    retorno : REGRESA L_PAR hiper_exp neu_retorno R_PAR empty\n    \n    lectura : LEER L_PAR ID neu_lectura R_PAR empty\n    \n    escritura : ESCRIBIR L_PAR escrituraD R_PAR empty\n\n    escrituraD : hiper_exp neu_escritura empty\n               | LETRERO neu_letrero empty\n    \n    decision : SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty\n\n    decisionU : SINO neu_iniciarDecisionElse bloque empty\n              | empty\n    \n    condicional : MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty\n    \n    no_condicional : DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty\n    \n    asignacionFor : ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty\n    \n    operadorA : MAS neu_addOperador empty\n              | MENOS neu_addOperador empty\n    \n    operadorT : MULT neu_addOperador empty\n              | DIV neu_addOperador empty\n    \n    operadorL : OR neu_addOperador empty\n              | AND neu_addOperador empty\n    \n    operadorR : MENORQUE neu_addOperador empty\n              | MAYORQUE neu_addOperador empty\n              | MENORIGUALQUE neu_addOperador empty\n              | MAYORIGUALQUE neu_addOperador empty\n              | IGUALQUE neu_addOperador empty\n              | DIFQUE neu_addOperador empty\n    \n    hiper_exp : super_exp neu_hacerHiperExp hiper_expU\n\n    hiper_expU : operadorL hiper_exp empty \n               | empty\n    \n    super_exp : exp neu_hacerSuperExp super_expU\n\n    super_expU : operadorR super_exp empty \n               | empty\n    \n    exp : termino neu_hacerExp expU\n\n    expU : operadorA exp\n         | empty\n    \n    termino : factor neu_hacerTermino terminoU\n\n    terminoU : operadorT termino \n             | empty\n    \n    factor : varcte empty\n           | llamada neu_esExpresion empty\n           | L_PAR hiper_exp R_PAR empty\n    \n    varcte  : ID neu_addID empty\n            | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty\n            | ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty\n            | ENTEROVAL neu_addConstanteEntero empty\n            | FLOTANTEVAL neu_addConstanteFlotante empty\n            | CARACTERVAL neu_addConstanteCaracter empty\n    \n    empty : \n    neu_programa : neu_endPrograma : neu_addFuncion : neu_endFuncion : neu_principal : neu_addVariable : neu_addVariableAStack : neu_addArreglo : neu_addMatriz : neu_addID : neu_fondoFalso : neu_addIDArreglo : neu_addIDMatriz : neu_addConstanteEntero : neu_addConstanteFlotante : neu_addConstanteCaracter : neu_llamada_era : neu_llamada_gosub : neu_esEstatuto : neu_esExpresion : neu_addOperador : getGMemoria : getLMemoria : getCMemoria : neu_hacerTermino : neu_hacerExp : neu_hacerSuperExp : neu_hacerHiperExp : neu_asignacion : neu_lectura : neu_escritura : neu_letrero : neu_retorno : neu_iniciarDecision : neu_iniciarDecisionElse : neu_endDecision : neu_condicionalAntes : neu_condicionalDurante : neu_condicionalDespues : neu_addIDFor : neu_asignacionFor : neu_boolFor : neu_endCondicion  : neu_parametroEnviado : neu_recibirParametros : neu_paramValidacion : neu_vaciarPilas : notifError : '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,51,59,82,83,108,],[0,-94,-92,-1,-92,-30,]),'ID':([2,8,22,32,47,48,52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,96,98,99,100,101,102,103,107,108,111,112,113,114,115,116,117,118,119,136,144,145,159,173,183,185,186,188,190,191,192,193,194,195,197,199,200,202,204,205,208,218,219,225,227,232,236,237,239,240,241,242,243,244,246,247,249,250,256,260,261,266,267,269,270,271,272,273,274,275,276,277,278,280,285,288,290,291,293,298,300,302,303,308,309,310,311,312,315,316,317,],[3,20,31,20,53,20,71,-43,71,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-103,127,131,127,127,-129,138,20,-30,-35,-92,-37,-38,-39,-113,127,127,127,127,-36,127,-103,53,127,-113,-113,127,-113,-113,-113,-113,-113,-113,127,-113,-113,127,-113,-113,127,127,-113,20,-103,127,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,127,127,-113,-63,-64,-65,-66,-67,-68,-69,-70,-59,-60,-61,-62,-92,127,-103,-128,-55,-131,127,-92,-92,-135,-53,-92,-56,-92,-113,-54,-57,127,]),'PUNTOYCOMA':([3,4,33,34,35,36,41,42,43,44,58,63,64,65,66,67,81,88,121,122,123,124,125,126,127,128,129,130,141,152,153,154,155,156,157,158,160,161,162,164,175,176,180,181,182,184,187,189,196,198,201,203,206,207,209,210,211,212,213,226,229,233,234,235,238,245,248,252,259,262,265,268,279,286,289,297,299,306,313,314,318,319,320,321,322,],[-93,5,-98,-92,-92,-92,48,-19,-20,-21,-100,87,-111,89,90,91,107,112,-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,-101,-92,-92,-92,-92,-83,-92,-92,-92,-92,-92,-92,225,-121,-92,-92,-71,-73,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-92,-50,-92,-110,-85,-48,-92,-92,-78,-81,-49,-44,-92,-72,-75,-104,-47,-92,-121,-87,-92,-45,-105,-92,-121,-88,-92,-46,]),'VARIABLES':([5,79,],[8,8,]),'ENTERO':([5,6,7,8,17,18,19,28,40,48,50,56,78,83,106,107,108,140,142,174,225,258,],[-92,13,-3,-92,-2,-4,-5,34,-6,-92,34,-7,34,-92,34,-92,-30,-96,-8,13,-92,-9,]),'FLOTANTE':([5,6,7,8,17,18,19,28,40,48,50,56,78,83,106,107,108,140,142,174,225,258,],[-92,14,-3,-92,-2,-4,-5,35,-6,-92,35,-7,35,-92,35,-92,-30,-96,-8,14,-92,-9,]),'CARACTER':([5,6,7,8,17,18,19,28,40,48,50,56,78,83,106,107,108,140,142,174,225,258,],[-92,15,-3,-92,-2,-4,-5,36,-6,-92,36,-7,36,-92,36,-92,-30,-96,-8,15,-92,-9,]),'VOID':([5,6,7,8,17,18,19,40,48,56,83,107,108,140,142,174,225,258,],[-92,16,-3,-92,-2,-4,-5,-6,-92,-7,-92,-92,-30,-96,-8,16,-92,-9,]),'PRINCIPAL':([5,6,7,8,9,10,11,17,18,19,40,48,56,83,107,108,140,142,174,222,223,224,225,258,],[-92,-92,-3,-92,21,-11,-10,-2,-4,-5,-6,-92,-7,-92,-92,-30,-96,-8,-92,-12,-13,-11,-92,-9,]),'L_LLAVE':([7,8,17,18,19,40,46,48,56,79,105,107,142,225,253,258,281,292,294,301,],[-3,-92,-2,-4,-5,-6,52,-92,-7,-92,52,-92,-8,-92,52,-9,52,-127,52,52,]),'FUNCION':([12,13,14,15,16,23,24,25,26,],[22,-92,-92,-92,-92,-15,-16,-17,-18,]),'DOSPUNTOS':([20,45,53,80,],[28,50,78,106,]),'L_CORCHETE':([20,45,71,127,177,279,],[29,49,96,159,227,288,]),'COMA':([20,27,34,35,36,42,43,44,104,121,122,123,124,125,126,127,128,129,130,139,149,152,153,154,155,156,157,158,160,161,162,179,180,182,184,187,189,196,198,201,203,206,207,209,210,211,229,233,235,238,245,248,262,265,268,279,286,289,299,314,318,320,],[-99,32,-92,-92,-92,-19,-20,-21,-137,-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,173,-136,-92,-92,-92,-92,-83,-92,-92,-92,-92,-92,232,-92,-71,-73,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-92,-92,-78,-81,-92,-72,-75,-104,-47,-92,-87,-105,-92,-88,]),'L_PAR':([21,30,31,39,71,72,73,74,75,76,77,96,97,98,100,101,102,116,117,118,119,127,136,145,159,183,185,186,188,190,191,192,193,194,195,197,199,200,202,204,205,208,218,219,227,232,236,237,239,240,241,242,243,244,246,247,249,250,256,260,261,266,267,269,270,271,272,273,274,275,276,277,278,285,288,298,312,317,],[-97,38,-95,47,-109,98,99,100,101,102,103,-103,118,119,119,119,-129,-113,119,119,119,-109,119,119,-103,119,-113,-113,119,-113,-113,-113,-113,-113,-113,119,-113,-113,119,-113,-113,119,119,-113,-103,119,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,119,119,-113,-63,-64,-65,-66,-67,-68,-69,-70,-59,-60,-61,-62,119,-103,119,-113,119,]),'ENTEROVAL':([29,49,96,98,100,101,102,116,117,118,119,136,145,159,183,185,186,188,190,191,192,193,194,195,197,199,200,202,204,205,208,218,219,227,232,236,237,239,240,241,242,243,244,246,247,249,250,256,260,261,266,267,269,270,271,272,273,274,275,276,277,278,285,288,298,312,317,],[37,57,-103,128,128,128,-129,-113,128,128,128,128,128,-103,128,-113,-113,128,-113,-113,-113,-113,-113,-113,128,-113,-113,128,-113,-113,128,128,-113,-103,128,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,128,128,-113,-63,-64,-65,-66,-67,-68,-69,-70,-59,-60,-61,-62,128,-103,128,-113,128,]),'R_PAR':([34,35,36,38,42,43,44,47,54,55,104,118,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,139,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,165,166,168,171,172,173,178,179,180,182,184,187,189,196,198,201,203,206,207,209,210,211,214,215,217,220,221,229,230,231,232,233,235,238,245,248,257,262,263,264,265,268,279,283,286,287,289,295,299,304,314,318,320,],[-92,-92,-92,46,-19,-20,-21,-92,79,-23,-137,-92,-125,-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,-122,164,-123,-124,167,169,-92,-138,-27,-136,180,181,-92,-92,-92,-92,-83,-92,-92,-92,-92,-92,212,-92,-92,-130,-92,-25,-92,229,-92,-92,-71,-73,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-51,-52,254,-22,-92,-110,-92,-29,-92,-85,-92,-92,-78,-81,-24,-92,-26,-92,-72,-75,-104,-133,-47,-28,-92,-92,-87,-58,-105,-92,-88,]),'R_CORCHETE':([37,57,121,122,123,124,125,126,127,128,129,130,146,152,153,154,155,156,157,158,160,161,162,180,182,184,187,189,196,198,201,203,206,207,209,210,211,229,233,235,238,245,248,251,262,265,268,279,284,286,289,299,307,314,318,320,],[45,80,-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,177,-92,-92,-92,-92,-83,-92,-92,-92,-92,-92,-92,-71,-73,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-92,-92,-78,-81,279,-92,-72,-75,-104,296,-47,-92,-87,314,-105,-92,-88,]),'R_LLAVE':([52,60,61,62,68,69,70,83,84,85,86,87,89,90,91,92,93,94,108,109,110,111,112,113,114,115,143,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[-92,83,-32,-92,-92,-92,-92,-92,-139,-32,-92,-92,-92,-92,-92,-40,-41,-42,-30,-92,-33,-35,-92,-37,-38,-39,-31,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'REGRESA':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[72,-43,72,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'LEER':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[73,-43,73,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'ESCRIBIR':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[74,-43,74,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'SI':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[75,-43,75,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'MIENTRAS':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[76,-43,76,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'DESDE':([52,61,62,68,69,70,83,85,87,89,90,91,92,93,94,108,111,112,113,114,115,144,280,290,291,293,300,302,303,308,309,310,311,315,316,],[77,-43,77,-92,-92,-92,-92,-43,-92,-92,-92,-92,-40,-41,-42,-30,-35,-92,-37,-38,-39,-36,-92,-128,-55,-131,-92,-92,-135,-53,-92,-56,-92,-54,-57,]),'IGUAL':([71,95,138,170,177,228,296,305,],[-102,116,-132,219,-104,261,-105,312,]),'SINO':([83,108,280,],[-92,-30,292,]),'FLOTANTEVAL':([96,98,100,101,102,116,117,118,119,136,145,159,183,185,186,188,190,191,192,193,194,195,197,199,200,202,204,205,208,218,219,227,232,236,237,239,240,241,242,243,244,246,247,249,250,256,260,261,266,267,269,270,271,272,273,274,275,276,277,278,285,288,298,312,317,],[-103,129,129,129,-129,-113,129,129,129,129,129,-103,129,-113,-113,129,-113,-113,-113,-113,-113,-113,129,-113,-113,129,-113,-113,129,129,-113,-103,129,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,129,129,-113,-63,-64,-65,-66,-67,-68,-69,-70,-59,-60,-61,-62,129,-103,129,-113,129,]),'CARACTERVAL':([96,98,100,101,102,116,117,118,119,136,145,159,183,185,186,188,190,191,192,193,194,195,197,199,200,202,204,205,208,218,219,227,232,236,237,239,240,241,242,243,244,246,247,249,250,256,260,261,266,267,269,270,271,272,273,274,275,276,277,278,285,288,298,312,317,],[-103,130,130,130,-129,-113,130,130,130,130,130,-103,130,-113,-113,130,-113,-113,-113,-113,-113,-113,130,-113,-113,130,-113,-113,130,130,-113,-103,130,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,-92,130,130,-113,-63,-64,-65,-66,-67,-68,-69,-70,-59,-60,-61,-62,130,-103,130,-113,130,]),'LETRERO':([100,],[134,]),'OR':([121,122,123,124,125,126,127,128,129,130,152,153,154,155,156,157,158,160,161,162,180,187,189,196,198,201,203,206,207,209,210,211,229,233,238,245,248,262,268,279,286,289,299,314,318,320,],[-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,185,-92,-92,-92,-83,-92,-92,-92,-92,-92,-92,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-92,-78,-81,-92,-75,-104,-47,-92,-87,-105,-92,-88,]),'AND':([121,122,123,124,125,126,127,128,129,130,152,153,154,155,156,157,158,160,161,162,180,187,189,196,198,201,203,206,207,209,210,211,229,233,238,245,248,262,268,279,286,289,299,314,318,320,],[-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,186,-92,-92,-92,-83,-92,-92,-92,-92,-92,-92,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-92,-78,-81,-92,-75,-104,-47,-92,-87,-105,-92,-88,]),'HACER':([121,122,123,124,125,126,127,128,129,130,152,153,154,155,156,157,158,160,161,162,180,182,184,187,189,196,198,201,203,206,207,209,210,211,229,233,235,238,245,248,254,255,262,265,268,279,282,286,289,299,314,318,320,],[-120,-119,-118,-117,-92,-112,-102,-106,-107,-108,-92,-92,-92,-92,-83,-92,-92,-92,-92,-92,-92,-71,-73,-74,-76,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-92,-92,-78,-81,281,-134,-92,-72,-75,-104,294,-47,-92,-87,-105,-92,-88,]),'MENORQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,190,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MAYORQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,191,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MENORIGUALQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,192,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MAYORIGUALQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,193,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'IGUALQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,194,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'DIFQUE':([122,123,124,125,126,127,128,129,130,153,154,155,156,157,158,160,161,162,180,196,198,201,203,206,207,209,210,211,229,233,245,248,262,279,286,289,299,314,318,320,],[-119,-118,-117,-92,-112,-102,-106,-107,-108,195,-92,-92,-83,-92,-92,-92,-92,-92,-92,-77,-79,-80,-82,-84,-86,-89,-90,-91,-110,-85,-78,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MAS':([123,124,125,126,127,128,129,130,154,155,156,157,158,160,161,162,180,201,203,206,207,209,210,211,229,233,248,262,279,286,289,299,314,318,320,],[-118,-117,-92,-112,-102,-106,-107,-108,199,-92,-83,-92,-92,-92,-92,-92,-92,-80,-82,-84,-86,-89,-90,-91,-110,-85,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MENOS':([123,124,125,126,127,128,129,130,154,155,156,157,158,160,161,162,180,201,203,206,207,209,210,211,229,233,248,262,279,286,289,299,314,318,320,],[-118,-117,-92,-112,-102,-106,-107,-108,200,-92,-83,-92,-92,-92,-92,-92,-92,-80,-82,-84,-86,-89,-90,-91,-110,-85,-81,-92,-104,-47,-92,-87,-105,-92,-88,]),'MULT':([124,125,126,127,128,129,130,155,156,157,158,160,161,162,180,206,207,209,210,211,229,233,262,279,286,289,299,314,318,320,],[-117,-92,-112,-102,-106,-107,-108,204,-83,-92,-92,-92,-92,-92,-92,-84,-86,-89,-90,-91,-110,-85,-92,-104,-47,-92,-87,-105,-92,-88,]),'DIV':([124,125,126,127,128,129,130,155,156,157,158,160,161,162,180,206,207,209,210,211,229,233,262,279,286,289,299,314,318,320,],[-117,-92,-112,-102,-106,-107,-108,205,-83,-92,-92,-92,-92,-92,-92,-84,-86,-89,-90,-91,-110,-85,-92,-104,-47,-92,-87,-105,-92,-88,]),'ENTONCES':([167,216,],[-126,253,]),'HASTA':([169,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neu_programa':([3,],[4,]),'variables':([5,79,],[6,105,]),'empty':([5,6,8,13,14,15,16,34,35,36,47,48,52,59,62,68,69,70,79,83,86,87,89,90,91,107,109,112,118,125,139,152,153,154,155,157,158,160,161,162,164,165,166,171,173,174,179,180,181,212,221,225,226,230,232,235,236,237,238,239,240,241,242,243,244,246,247,249,250,262,264,280,289,295,300,302,306,309,311,318,321,],[7,10,19,23,24,25,26,42,43,44,55,19,61,82,85,92,93,94,7,108,110,111,113,114,115,19,143,144,148,156,172,184,189,198,203,206,207,209,210,211,213,214,215,220,55,224,231,233,234,252,257,19,259,263,148,265,266,267,268,269,270,271,272,273,274,275,276,277,278,286,287,291,299,304,308,310,313,315,316,320,322,]),'funciones':([6,174,],[9,223,]),'funcionesU':([6,174,],[11,11,]),'tipo_funcion':([6,174,],[12,12,]),'variablesU':([8,48,107,225,],[17,56,142,258,]),'variablesD':([8,32,48,107,225,],[18,40,18,18,18,]),'neu_addVariableAStack':([20,],[27,]),'neu_principal':([21,],[30,]),'tipo_var':([28,50,78,106,],[33,58,104,141,]),'neu_addFuncion':([31,],[39,]),'neu_addVariable':([33,],[41,]),'bloque':([46,105,253,281,294,301,],[51,140,280,293,303,309,]),'recibir_parametros':([47,173,],[54,221,]),'neu_endPrograma':([51,],[59,]),'bloqueU':([52,62,],[60,86,]),'estatuto':([52,62,],[62,62,]),'asignacion':([52,62,],[63,63,]),'llamada':([52,62,98,100,101,117,118,119,136,145,183,188,197,202,208,218,232,256,260,285,298,317,],[64,64,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'retorno':([52,62,],[65,65,]),'lectura':([52,62,],[66,66,]),'escritura':([52,62,],[67,67,]),'decision':([52,62,],[68,68,]),'condicional':([52,62,],[69,69,]),'no_condicional':([52,62,],[70,70,]),'neu_addArreglo':([58,],[81,]),'bloqueD':([62,],[84,]),'neu_esEstatuto':([64,],[88,]),'neu_addID':([71,127,],[95,158,]),'neu_llamada_era':([71,127,],[97,97,]),'neu_vaciarPilas':([84,],[109,]),'neu_fondoFalso':([96,159,227,288,],[117,208,260,298,]),'hiper_exp':([98,100,101,117,118,119,136,145,183,208,218,232,256,260,285,298,317,],[120,133,135,146,149,150,168,176,235,251,255,149,283,284,297,307,319,]),'super_exp':([98,100,101,117,118,119,136,145,183,188,208,218,232,256,260,285,298,317,],[121,121,121,121,121,121,121,121,121,238,121,121,121,121,121,121,121,121,]),'exp':([98,100,101,117,118,119,136,145,183,188,197,208,218,232,256,260,285,298,317,],[122,122,122,122,122,122,122,122,122,122,245,122,122,122,122,122,122,122,122,]),'termino':([98,100,101,117,118,119,136,145,183,188,197,202,208,218,232,256,260,285,298,317,],[123,123,123,123,123,123,123,123,123,123,123,248,123,123,123,123,123,123,123,123,]),'factor':([98,100,101,117,118,119,136,145,183,188,197,202,208,218,232,256,260,285,298,317,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'varcte':([98,100,101,117,118,119,136,145,183,188,197,202,208,218,232,256,260,285,298,317,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'escrituraD':([100,],[132,]),'neu_condicionalAntes':([102,],[136,]),'asignacionFor':([103,],[137,]),'neu_recibirParametros':([104,],[139,]),'neu_addOperador':([116,185,186,190,191,192,193,194,195,199,200,204,205,219,261,312,],[145,236,237,239,240,241,242,243,244,246,247,249,250,256,285,317,]),'mandar_parametros':([118,232,],[147,264,]),'neu_retorno':([120,],[151,]),'neu_hacerHiperExp':([121,],[152,]),'neu_hacerSuperExp':([122,],[153,]),'neu_hacerExp':([123,],[154,]),'neu_hacerTermino':([124,],[155,]),'neu_esExpresion':([126,],[157,]),'neu_addConstanteEntero':([128,],[160,]),'neu_addConstanteFlotante':([129,],[161,]),'neu_addConstanteCaracter':([130,],[162,]),'neu_lectura':([131,],[163,]),'neu_escritura':([133,],[165,]),'neu_letrero':([134,],[166,]),'neu_addIDFor':([138,],[170,]),'recibir_parametrosD':([139,],[171,]),'neu_endFuncion':([140,],[174,]),'neu_addMatriz':([141,],[175,]),'neu_paramValidacion':([147,],[178,]),'neu_parametroEnviado':([149,],[179,]),'hiper_expU':([152,],[182,]),'operadorL':([152,],[183,]),'super_expU':([153,],[187,]),'operadorR':([153,],[188,]),'expU':([154,],[196,]),'operadorA':([154,],[197,]),'terminoU':([155,],[201,]),'operadorT':([155,],[202,]),'neu_iniciarDecision':([167,],[216,]),'neu_condicionalDurante':([168,],[217,]),'funcionesD':([174,],[222,]),'neu_asignacion':([176,297,319,],[226,306,321,]),'neu_addIDArreglo':([177,279,],[228,289,]),'mandar_parametrosD':([179,],[230,]),'neu_llamada_gosub':([229,],[262,]),'neu_boolFor':([255,],[282,]),'decisionU':([280,],[290,]),'neu_asignacionFor':([283,],[295,]),'neu_endDecision':([290,],[300,]),'neu_iniciarDecisionElse':([292,],[301,]),'neu_condicionalDespues':([293,],[302,]),'neu_addIDMatriz':([296,314,],[305,318,]),'neu_endCondicion':([303,],[311,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty','program',13,'p_programa','lexer_parser.py',264),
  ('variables -> VARIABLES variablesU','variables',2,'p_variales','lexer_parser.py',270),
  ('variables -> empty','variables',1,'p_variales','lexer_parser.py',271),
  ('variablesU -> variablesD','variablesU',1,'p_variales','lexer_parser.py',273),
  ('variablesU -> empty','variablesU',1,'p_variales','lexer_parser.py',274),
  ('variablesD -> ID neu_addVariableAStack COMA variablesD','variablesD',4,'p_variales','lexer_parser.py',276),
  ('variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU','variablesD',6,'p_variales','lexer_parser.py',277),
  ('variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU','variablesD',9,'p_variales','lexer_parser.py',278),
  ('variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU','variablesD',12,'p_variales','lexer_parser.py',279),
  ('funciones -> funcionesU','funciones',1,'p_funciones','lexer_parser.py',285),
  ('funciones -> empty','funciones',1,'p_funciones','lexer_parser.py',286),
  ('funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD','funcionesU',11,'p_funciones','lexer_parser.py',288),
  ('funcionesD -> funciones','funcionesD',1,'p_funciones','lexer_parser.py',290),
  ('funcionesD -> empty','funcionesD',1,'p_funciones','lexer_parser.py',291),
  ('tipo_funcion -> ENTERO empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',297),
  ('tipo_funcion -> FLOTANTE empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',298),
  ('tipo_funcion -> CARACTER empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',299),
  ('tipo_funcion -> VOID empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',300),
  ('tipo_var -> ENTERO empty','tipo_var',2,'p_tipo_var','lexer_parser.py',306),
  ('tipo_var -> FLOTANTE empty','tipo_var',2,'p_tipo_var','lexer_parser.py',307),
  ('tipo_var -> CARACTER empty','tipo_var',2,'p_tipo_var','lexer_parser.py',308),
  ('recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty','recibir_parametros',6,'p_recibir_parametros','lexer_parser.py',314),
  ('recibir_parametros -> empty','recibir_parametros',1,'p_recibir_parametros','lexer_parser.py',315),
  ('recibir_parametrosD -> COMA recibir_parametros empty','recibir_parametrosD',3,'p_recibir_parametros','lexer_parser.py',317),
  ('recibir_parametrosD -> empty','recibir_parametrosD',1,'p_recibir_parametros','lexer_parser.py',318),
  ('mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty','mandar_parametros',4,'p_mandar_parametros','lexer_parser.py',324),
  ('mandar_parametros -> empty','mandar_parametros',1,'p_mandar_parametros','lexer_parser.py',325),
  ('mandar_parametrosD -> COMA mandar_parametros empty','mandar_parametrosD',3,'p_mandar_parametros','lexer_parser.py',327),
  ('mandar_parametrosD -> empty','mandar_parametrosD',1,'p_mandar_parametros','lexer_parser.py',328),
  ('bloque -> L_LLAVE bloqueU R_LLAVE empty','bloque',4,'p_bloque','lexer_parser.py',336),
  ('bloqueU -> estatuto bloqueD neu_vaciarPilas empty','bloqueU',4,'p_bloque','lexer_parser.py',338),
  ('bloqueU -> empty','bloqueU',1,'p_bloque','lexer_parser.py',339),
  ('bloqueD -> bloqueU empty','bloqueD',2,'p_bloque','lexer_parser.py',341),
  ('bloqueD -> empty','bloqueD',1,'p_bloque','lexer_parser.py',342),
  ('estatuto -> asignacion PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',348),
  ('estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty','estatuto',4,'p_estatuto','lexer_parser.py',349),
  ('estatuto -> retorno PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',350),
  ('estatuto -> lectura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',351),
  ('estatuto -> escritura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',352),
  ('estatuto -> decision empty','estatuto',2,'p_estatuto','lexer_parser.py',353),
  ('estatuto -> condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',354),
  ('estatuto -> no_condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',355),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexer_parser.py',356),
  ('asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',7,'p_asignacion','lexer_parser.py',361),
  ('asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',11,'p_asignacion','lexer_parser.py',362),
  ('asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',15,'p_asignacion','lexer_parser.py',363),
  ('llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty','llamada',8,'p_llamada','lexer_parser.py',369),
  ('retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty','retorno',6,'p_retorno','lexer_parser.py',375),
  ('lectura -> LEER L_PAR ID neu_lectura R_PAR empty','lectura',6,'p_lectura','lexer_parser.py',381),
  ('escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty','escritura',5,'p_escritura','lexer_parser.py',387),
  ('escrituraD -> hiper_exp neu_escritura empty','escrituraD',3,'p_escritura','lexer_parser.py',389),
  ('escrituraD -> LETRERO neu_letrero empty','escrituraD',3,'p_escritura','lexer_parser.py',390),
  ('decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty','decision',10,'p_decision','lexer_parser.py',396),
  ('decisionU -> SINO neu_iniciarDecisionElse bloque empty','decisionU',4,'p_decision','lexer_parser.py',398),
  ('decisionU -> empty','decisionU',1,'p_decision','lexer_parser.py',399),
  ('condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty','condicional',10,'p_condicional','lexer_parser.py',405),
  ('no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty','no_condicional',11,'p_no_condicional','lexer_parser.py',411),
  ('asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty','asignacionFor',7,'p_asignacionFor','lexer_parser.py',416),
  ('operadorA -> MAS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',424),
  ('operadorA -> MENOS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',425),
  ('operadorT -> MULT neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',431),
  ('operadorT -> DIV neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',432),
  ('operadorL -> OR neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',438),
  ('operadorL -> AND neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',439),
  ('operadorR -> MENORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',445),
  ('operadorR -> MAYORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',446),
  ('operadorR -> MENORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',447),
  ('operadorR -> MAYORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',448),
  ('operadorR -> IGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',449),
  ('operadorR -> DIFQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',450),
  ('hiper_exp -> super_exp neu_hacerHiperExp hiper_expU','hiper_exp',3,'p_hiper_exp','lexer_parser.py',458),
  ('hiper_expU -> operadorL hiper_exp empty','hiper_expU',3,'p_hiper_exp','lexer_parser.py',460),
  ('hiper_expU -> empty','hiper_expU',1,'p_hiper_exp','lexer_parser.py',461),
  ('super_exp -> exp neu_hacerSuperExp super_expU','super_exp',3,'p_super_exp','lexer_parser.py',466),
  ('super_expU -> operadorR super_exp empty','super_expU',3,'p_super_exp','lexer_parser.py',468),
  ('super_expU -> empty','super_expU',1,'p_super_exp','lexer_parser.py',469),
  ('exp -> termino neu_hacerExp expU','exp',3,'p_exp','lexer_parser.py',474),
  ('expU -> operadorA exp','expU',2,'p_exp','lexer_parser.py',476),
  ('expU -> empty','expU',1,'p_exp','lexer_parser.py',477),
  ('termino -> factor neu_hacerTermino terminoU','termino',3,'p_termino','lexer_parser.py',482),
  ('terminoU -> operadorT termino','terminoU',2,'p_termino','lexer_parser.py',484),
  ('terminoU -> empty','terminoU',1,'p_termino','lexer_parser.py',485),
  ('factor -> varcte empty','factor',2,'p_factor','lexer_parser.py',490),
  ('factor -> llamada neu_esExpresion empty','factor',3,'p_factor','lexer_parser.py',491),
  ('factor -> L_PAR hiper_exp R_PAR empty','factor',4,'p_factor','lexer_parser.py',492),
  ('varcte -> ID neu_addID empty','varcte',3,'p_varcte','lexer_parser.py',498),
  ('varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty','varcte',7,'p_varcte','lexer_parser.py',499),
  ('varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty','varcte',11,'p_varcte','lexer_parser.py',500),
  ('varcte -> ENTEROVAL neu_addConstanteEntero empty','varcte',3,'p_varcte','lexer_parser.py',501),
  ('varcte -> FLOTANTEVAL neu_addConstanteFlotante empty','varcte',3,'p_varcte','lexer_parser.py',502),
  ('varcte -> CARACTERVAL neu_addConstanteCaracter empty','varcte',3,'p_varcte','lexer_parser.py',503),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',515),
  ('neu_programa -> <empty>','neu_programa',0,'p_neu_programa','lexer_parser.py',524),
  ('neu_endPrograma -> <empty>','neu_endPrograma',0,'p_neu_endPrograma','lexer_parser.py',535),
  ('neu_addFuncion -> <empty>','neu_addFuncion',0,'p_neu_addFuncion','lexer_parser.py',540),
  ('neu_endFuncion -> <empty>','neu_endFuncion',0,'p_neu_endFuncion','lexer_parser.py',566),
  ('neu_principal -> <empty>','neu_principal',0,'p_neu_principal','lexer_parser.py',580),
  ('neu_addVariable -> <empty>','neu_addVariable',0,'p_neu_addVariable','lexer_parser.py',591),
  ('neu_addVariableAStack -> <empty>','neu_addVariableAStack',0,'p_neu_addVariableAStack','lexer_parser.py',614),
  ('neu_addArreglo -> <empty>','neu_addArreglo',0,'p_neu_addArreglo','lexer_parser.py',621),
  ('neu_addMatriz -> <empty>','neu_addMatriz',0,'p_neu_addMatriz','lexer_parser.py',637),
  ('neu_addID -> <empty>','neu_addID',0,'p_neu_addID','lexer_parser.py',655),
  ('neu_fondoFalso -> <empty>','neu_fondoFalso',0,'p_neu_fondoFalso','lexer_parser.py',667),
  ('neu_addIDArreglo -> <empty>','neu_addIDArreglo',0,'p_neu_addIDArreglo','lexer_parser.py',672),
  ('neu_addIDMatriz -> <empty>','neu_addIDMatriz',0,'p_neu_addIDMatriz','lexer_parser.py',707),
  ('neu_addConstanteEntero -> <empty>','neu_addConstanteEntero',0,'p_neu_addConstanteEntero','lexer_parser.py',770),
  ('neu_addConstanteFlotante -> <empty>','neu_addConstanteFlotante',0,'p_neu_addConstanteFlotante','lexer_parser.py',779),
  ('neu_addConstanteCaracter -> <empty>','neu_addConstanteCaracter',0,'p_neu_addConstanteCaracter','lexer_parser.py',788),
  ('neu_llamada_era -> <empty>','neu_llamada_era',0,'p_neu_llamada_era','lexer_parser.py',799),
  ('neu_llamada_gosub -> <empty>','neu_llamada_gosub',0,'p_neu_llamada_gosub','lexer_parser.py',812),
  ('neu_esEstatuto -> <empty>','neu_esEstatuto',0,'p_neu_esEstatuto','lexer_parser.py',832),
  ('neu_esExpresion -> <empty>','neu_esExpresion',0,'p_neu_esExpresion','lexer_parser.py',840),
  ('neu_addOperador -> <empty>','neu_addOperador',0,'p_neu_addOperador','lexer_parser.py',848),
  ('getGMemoria -> <empty>','getGMemoria',0,'p_getGMemoria','lexer_parser.py',861),
  ('getLMemoria -> <empty>','getLMemoria',0,'p_getLMemoria','lexer_parser.py',885),
  ('getCMemoria -> <empty>','getCMemoria',0,'p_getCMemoria','lexer_parser.py',908),
  ('neu_hacerTermino -> <empty>','neu_hacerTermino',0,'p_neu_hacerTermino','lexer_parser.py',933),
  ('neu_hacerExp -> <empty>','neu_hacerExp',0,'p_neu_hacerExp','lexer_parser.py',958),
  ('neu_hacerSuperExp -> <empty>','neu_hacerSuperExp',0,'p_neu_hacerSuperExp','lexer_parser.py',983),
  ('neu_hacerHiperExp -> <empty>','neu_hacerHiperExp',0,'p_neu_hacerHiperExp','lexer_parser.py',1008),
  ('neu_asignacion -> <empty>','neu_asignacion',0,'p_neu_asignacion','lexer_parser.py',1032),
  ('neu_lectura -> <empty>','neu_lectura',0,'p_neu_lectura','lexer_parser.py',1044),
  ('neu_escritura -> <empty>','neu_escritura',0,'p_neu_escritura','lexer_parser.py',1056),
  ('neu_letrero -> <empty>','neu_letrero',0,'p_neu_letrero','lexer_parser.py',1061),
  ('neu_retorno -> <empty>','neu_retorno',0,'p_neu_retorno','lexer_parser.py',1071),
  ('neu_iniciarDecision -> <empty>','neu_iniciarDecision',0,'p_neu_iniciarDecision','lexer_parser.py',1083),
  ('neu_iniciarDecisionElse -> <empty>','neu_iniciarDecisionElse',0,'p_neu_iniciarDecisionElse','lexer_parser.py',1092),
  ('neu_endDecision -> <empty>','neu_endDecision',0,'p_neu_endDecision','lexer_parser.py',1098),
  ('neu_condicionalAntes -> <empty>','neu_condicionalAntes',0,'p_neu_condicionalAntes','lexer_parser.py',1103),
  ('neu_condicionalDurante -> <empty>','neu_condicionalDurante',0,'p_neu_condicionalDurante','lexer_parser.py',1107),
  ('neu_condicionalDespues -> <empty>','neu_condicionalDespues',0,'p_neu_condicionalDespues','lexer_parser.py',1111),
  ('neu_addIDFor -> <empty>','neu_addIDFor',0,'p_neu_addIDFor','lexer_parser.py',1117),
  ('neu_asignacionFor -> <empty>','neu_asignacionFor',0,'p_neu_asignacionFor','lexer_parser.py',1135),
  ('neu_boolFor -> <empty>','neu_boolFor',0,'p_neu_boolFor','lexer_parser.py',1144),
  ('neu_endCondicion -> <empty>','neu_endCondicion',0,'p_neu_endCondicion','lexer_parser.py',1168),
  ('neu_parametroEnviado -> <empty>','neu_parametroEnviado',0,'p_neu_parametroEnviado','lexer_parser.py',1188),
  ('neu_recibirParametros -> <empty>','neu_recibirParametros',0,'p_neu_recibirParametros','lexer_parser.py',1208),
  ('neu_paramValidacion -> <empty>','neu_paramValidacion',0,'p_neu_paramValidacion','lexer_parser.py',1226),
  ('neu_vaciarPilas -> <empty>','neu_vaciarPilas',0,'p_neu_vaciarPilas','lexer_parser.py',1233),
  ('notifError -> <empty>','notifError',0,'p_notifError','lexer_parser.py',1242),
]
