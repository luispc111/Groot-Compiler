
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARCO CARACTER CARACTERVAL CIRCULO COLOR COMA DESDE DIFQUE DIV DOSPUNTOS ENTERO ENTEROVAL ENTONCES ESCRIBIR FLOTANTE FLOTANTEVAL FUNCION GROSOR HACER HASTA ID IGUAL IGUALQUE LEER LETRERO LINEA L_CORCHETE L_LLAVE L_PAR MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS MIENTRAS MULT OR PENDOWN PENUP PRINCIPAL PROGRAMA PUNTO PUNTOXY PUNTOYCOMA REGRESA R_CORCHETE R_LLAVE R_PAR SI SINO VARIABLES VOID\n    program : PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty\n    \n    variables : VARIABLES variablesU\n              | empty\n\n    variablesU : variablesD\n               | empty\n\n    variablesD : ID neu_addVariableAStack COMA variablesD\n               | ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU\n    \n    funciones : funcionesU\n              | empty\n    \n    funcionesU : tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD\n    \n    funcionesD : funciones\n               | empty\n    \n    tipo_funcion : ENTERO empty\n                 | FLOTANTE empty\n                 | CARACTER empty\n                 | VOID empty\n    \n    tipo_var : ENTERO empty\n             | FLOTANTE empty\n             | CARACTER empty\n    \n    recibir_parametros : ID DOSPUNTOS tipo_var recibir_parametrosD empty\n                       | empty\n\n    recibir_parametrosD : COMA recibir_parametros empty\n                       | empty\n    \n    mandar_parametros : ID mandar_parametrosD empty\n                      | empty\n\n    mandar_parametrosD : COMA mandar_parametros empty\n                       | empty\n    \n    bloque : L_LLAVE bloqueU R_LLAVE empty\n\n    bloqueU : estatuto bloqueD neu_vaciarPilas empty\n            | empty\n\n    bloqueD : bloqueU empty\n            | empty\n    \n    estatuto : asignacion PUNTOYCOMA empty\n             | llamada PUNTOYCOMA empty\n             | retorno PUNTOYCOMA empty\n             | lectura PUNTOYCOMA empty\n             | escritura PUNTOYCOMA empty\n             | decision empty\n             | condicional empty\n             | no_condicional empty\n             | funciones_especiales PUNTOYCOMA empty\n             | empty\n    \n    asignacion : ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty\n    \n    llamada : ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty\n    \n    retorno : REGRESA L_PAR hiper_exp neu_retorno R_PAR empty\n    \n    lectura : LEER L_PAR ID neu_lectura R_PAR empty\n    \n    escritura : ESCRIBIR L_PAR escrituraD R_PAR empty\n\n    escrituraD : hiper_exp neu_escritura empty\n               | LETRERO empty\n    \n    decision : SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty\n\n    decisionU : SINO neu_iniciarDecisionElse bloque empty\n              | empty\n    \n    condicional : MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty\n    \n    no_condicional : DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty\n    \n    asignacionFor : ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty\n    \n    funciones_especiales : circulo empty\n                         | color empty\n                         | grosor empty\n                         | linea empty\n                         | puntoxy empty\n                         | arco empty\n                         | penup empty\n                         | pendown empty\n                         | empty\n    \n    circulo : CIRCULO L_PAR hiper_exp R_PAR empty\n    \n    color : COLOR L_PAR hiper_exp R_PAR empty\n    \n    grosor : GROSOR L_PAR hiper_exp R_PAR empty\n    \n    linea : LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty\n    \n    puntoxy : PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty\n    \n    arco : ARCO L_PAR hiper_exp R_PAR empty\n    \n    penup : PENUP L_PAR hiper_exp R_PAR empty\n    \n    pendown : PENDOWN L_PAR hiper_exp R_PAR empty\n    \n    operadorA : MAS neu_addOperador empty\n              | MENOS neu_addOperador empty\n    \n    operadorT : MULT neu_addOperador empty\n              | DIV neu_addOperador empty\n    \n    operadorL : OR neu_addOperador empty\n              | AND neu_addOperador empty\n    \n    operadorR : MENORQUE neu_addOperador empty\n              | MAYORQUE neu_addOperador empty\n              | MENORIGUALQUE neu_addOperador empty\n              | MAYORIGUALQUE neu_addOperador empty\n              | IGUALQUE neu_addOperador empty\n              | DIFQUE neu_addOperador empty\n    \n    hiper_exp : super_exp neu_hacerHiperExp hiper_expU\n\n    hiper_expU : operadorL hiper_exp empty \n               | empty\n    \n    super_exp : exp neu_hacerSuperExp super_expU\n\n    super_expU : operadorR super_exp empty \n               | empty\n    \n    exp : termino neu_hacerExp expU\n\n    expU : operadorA exp\n         | empty\n    \n    termino : factor neu_hacerTermino terminoU\n\n    terminoU : operadorT termino \n             | empty\n    \n    factor : varcte empty\n           | llamada empty\n           | L_PAR hiper_exp R_PAR empty\n    \n    varcte  : ID neu_addID empty\n            | ENTEROVAL neu_addConstanteEntero empty\n            | FLOTANTEVAL neu_addConstanteFlotante empty\n            | CARACTERVAL neu_addConstanteCaracter empty\n    \n    empty : \n    neu_programa : neu_endPrograma : neu_addFuncion : neu_endFuncion : neu_principal : neu_addVariable : neu_addVariableAStack : neu_addID : neu_addConstanteEntero : neu_addConstanteFlotante : neu_addConstanteCaracter : neu_addTermino : neu_llamada_era : neu_llamada_gosub : neu_addOperador : getGMemoria : getLMemoria : getCMemoria : neu_hacerTermino : neu_hacerExp : neu_hacerSuperExp : neu_hacerHiperExp : neu_asignacion : neu_lectura : neu_escritura : neu_retorno : neu_iniciarDecision : neu_iniciarDecisionElse : neu_endDecision : neu_condicionalAntes : neu_condicionalDurante : neu_condicionalDespues : neu_addIDFor : neu_asignacionFor : neu_boolFor : neu_endCondicion  : neu_vaciarPilas : notifError : '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,46,52,90,91,130,],[0,-106,-104,-1,-104,-28,]),'ID':([2,8,22,31,44,45,47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,106,107,108,109,110,111,120,121,122,123,124,125,126,127,130,133,134,135,136,137,138,139,140,141,158,171,174,201,202,212,217,219,220,222,224,225,226,227,228,229,231,233,234,236,238,239,249,250,270,271,273,274,275,276,277,278,280,281,283,284,289,290,296,297,299,300,301,302,303,304,305,306,307,308,309,315,316,318,321,322,324,325,328,329,330,331,333,334,],[3,20,30,20,48,20,65,-42,65,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,149,153,149,149,-134,160,149,149,149,149,149,149,149,149,-28,-33,-34,-35,-36,-37,-41,-119,175,149,149,48,149,149,149,175,149,-119,-119,149,-119,-119,-119,-119,-119,-119,149,-119,-119,149,-119,-119,149,-119,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,149,149,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,-104,-133,-52,-136,149,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'PUNTOYCOMA':([3,4,32,33,34,35,39,40,41,42,47,54,55,56,57,58,59,60,61,62,63,64,72,73,74,75,76,77,78,79,91,93,95,96,97,98,99,100,101,102,103,112,113,114,115,116,117,118,119,130,133,134,135,136,137,138,143,144,145,146,147,148,149,150,151,152,180,181,182,183,184,185,186,187,188,189,191,198,199,200,203,204,205,209,213,214,215,216,218,221,223,230,232,235,237,240,241,242,243,244,245,251,252,253,256,257,258,263,266,267,268,269,272,279,282,285,291,292,294,295,298,309,314,315,316,318,322,324,325,328,329,330,331,332,333,334,335,],[-105,5,-110,-104,-104,-104,45,-17,-18,-19,-104,-42,-104,95,96,97,98,99,-104,-104,-104,103,-104,-104,-104,-104,-104,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-56,-57,-58,-59,-60,-61,-62,-63,-28,-33,-34,-35,-36,-37,-41,-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-127,-118,-104,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-47,-65,-66,-67,-70,-71,-72,-104,-104,-99,-45,-104,-104,-92,-95,-46,-104,-43,-44,-86,-89,-104,-69,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-104,-51,-54,-68,]),'VARIABLES':([5,89,],[8,8,]),'ENTERO':([5,6,7,8,17,18,19,28,38,45,51,88,91,130,172,208,],[-104,13,-3,-104,-2,-4,-5,33,-6,-104,-7,33,-104,-28,-108,13,]),'FLOTANTE':([5,6,7,8,17,18,19,28,38,45,51,88,91,130,172,208,],[-104,14,-3,-104,-2,-4,-5,34,-6,-104,-7,34,-104,-28,-108,14,]),'CARACTER':([5,6,7,8,17,18,19,28,38,45,51,88,91,130,172,208,],[-104,15,-3,-104,-2,-4,-5,35,-6,-104,-7,35,-104,-28,-108,15,]),'VOID':([5,6,7,8,17,18,19,38,45,51,91,130,172,208,],[-104,16,-3,-104,-2,-4,-5,-6,-104,-7,-104,-28,-108,16,]),'PRINCIPAL':([5,6,7,8,9,10,11,17,18,19,38,45,51,91,130,172,208,260,261,262,],[-104,-104,-3,-104,21,-9,-8,-2,-4,-5,-6,-104,-7,-104,-28,-108,-104,-10,-11,-9,]),'L_LLAVE':([7,8,17,18,19,38,43,45,51,89,129,286,310,317,319,323,],[-3,-104,-2,-4,-5,-6,47,-104,-7,-104,47,47,47,-132,47,47,]),'FUNCION':([12,13,14,15,16,23,24,25,26,],[22,-104,-104,-104,-104,-13,-14,-15,-16,]),'DOSPUNTOS':([20,48,],[28,88,]),'COMA':([20,27,33,34,35,40,41,42,128,143,144,145,146,147,148,149,150,151,152,164,165,175,180,181,182,183,184,185,186,187,188,189,213,214,216,218,221,223,230,232,235,237,240,241,242,243,254,266,267,269,272,279,282,294,295,298,313,],[-111,31,-104,-104,-104,-17,-18,-19,171,-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,201,202,212,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,290,-104,-99,-104,-104,-92,-95,-44,-86,-89,321,]),'L_PAR':([21,29,30,37,65,66,67,68,69,70,71,80,81,82,83,84,85,86,87,105,106,108,109,110,120,121,122,123,124,125,126,127,139,141,149,158,174,201,202,217,219,220,222,224,225,226,227,228,229,231,233,234,236,238,239,249,250,270,271,273,274,275,276,277,278,280,281,283,284,289,290,296,297,299,300,301,302,303,304,305,306,307,308,321,],[-109,36,-107,44,-117,106,107,108,109,110,111,120,121,122,123,124,125,126,127,140,141,141,141,-134,141,141,141,141,141,141,141,141,-119,141,-117,141,141,141,141,141,-119,-119,141,-119,-119,-119,-119,-119,-119,141,-119,-119,141,-119,-119,141,-119,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,141,141,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,141,]),'R_PAR':([33,34,35,36,40,41,42,44,49,50,128,140,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,162,163,166,167,168,169,170,171,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,195,206,207,210,211,212,213,214,216,218,221,223,230,232,235,237,240,241,242,243,246,248,255,259,264,265,266,267,269,272,279,282,293,294,295,298,312,320,326,327,],[-104,-104,-104,43,-17,-18,-19,-104,89,-21,-104,-104,-130,-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,-128,191,-129,-104,194,196,198,199,200,203,204,205,-104,-23,-104,-104,213,-25,214,215,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,244,-104,-49,-135,-20,-104,-104,-27,-104,-118,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-48,287,291,-22,-24,-104,-104,-99,-104,-104,-92,-95,-26,-44,-86,-89,-138,-104,-55,332,]),'R_LLAVE':([47,53,54,55,61,62,63,91,92,93,94,95,96,97,98,99,100,101,102,103,130,131,132,133,134,135,136,137,138,173,309,315,316,318,322,324,325,328,329,330,331,333,334,],[-104,91,-30,-104,-104,-104,-104,-104,-141,-30,-104,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-104,-31,-33,-34,-35,-36,-37,-41,-29,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'REGRESA':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[66,-42,66,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'LEER':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[67,-42,67,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'ESCRIBIR':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[68,-42,68,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'SI':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[69,-42,69,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'MIENTRAS':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[70,-42,70,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'DESDE':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[71,-42,71,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'CIRCULO':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[80,-42,80,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'COLOR':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[81,-42,81,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'GROSOR':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[82,-42,82,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'LINEA':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[83,-42,83,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'PUNTOXY':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[84,-42,84,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'ARCO':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[85,-42,85,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'PENUP':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[86,-42,86,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'PENDOWN':([47,54,55,61,62,63,91,93,95,96,97,98,99,100,101,102,103,130,133,134,135,136,137,138,309,315,316,318,322,324,325,328,329,330,331,333,334,],[87,-42,87,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-133,-52,-136,-104,-104,-140,-50,-104,-53,-104,-51,-54,]),'IGUAL':([65,104,160,197,],[-112,139,-137,250,]),'SINO':([91,130,309,],[-104,-28,317,]),'ENTEROVAL':([106,108,109,110,120,121,122,123,124,125,126,127,139,141,158,174,201,202,217,219,220,222,224,225,226,227,228,229,231,233,234,236,238,239,249,250,270,271,273,274,275,276,277,278,280,281,283,284,289,290,296,297,299,300,301,302,303,304,305,306,307,308,321,],[150,150,150,-134,150,150,150,150,150,150,150,150,-119,150,150,150,150,150,150,-119,-119,150,-119,-119,-119,-119,-119,-119,150,-119,-119,150,-119,-119,150,-119,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,150,150,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,150,]),'FLOTANTEVAL':([106,108,109,110,120,121,122,123,124,125,126,127,139,141,158,174,201,202,217,219,220,222,224,225,226,227,228,229,231,233,234,236,238,239,249,250,270,271,273,274,275,276,277,278,280,281,283,284,289,290,296,297,299,300,301,302,303,304,305,306,307,308,321,],[151,151,151,-134,151,151,151,151,151,151,151,151,-119,151,151,151,151,151,151,-119,-119,151,-119,-119,-119,-119,-119,-119,151,-119,-119,151,-119,-119,151,-119,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,151,151,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,151,]),'CARACTERVAL':([106,108,109,110,120,121,122,123,124,125,126,127,139,141,158,174,201,202,217,219,220,222,224,225,226,227,228,229,231,233,234,236,238,239,249,250,270,271,273,274,275,276,277,278,280,281,283,284,289,290,296,297,299,300,301,302,303,304,305,306,307,308,321,],[152,152,152,-134,152,152,152,152,152,152,152,152,-119,152,152,152,152,152,152,-119,-119,152,-119,-119,-119,-119,-119,-119,152,-119,-119,152,-119,-119,152,-119,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,152,152,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,152,]),'LETRERO':([108,],[156,]),'OR':([143,144,145,146,147,148,149,150,151,152,180,181,182,183,184,185,186,187,188,189,213,214,221,223,230,232,235,237,240,241,242,243,266,267,272,279,282,294,298,],[-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,219,-104,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-92,-95,-44,-89,]),'AND':([143,144,145,146,147,148,149,150,151,152,180,181,182,183,184,185,186,187,188,189,213,214,221,223,230,232,235,237,240,241,242,243,266,267,272,279,282,294,298,],[-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,220,-104,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-92,-95,-44,-89,]),'HACER':([143,144,145,146,147,148,149,150,151,152,180,181,182,183,184,185,186,187,188,189,213,214,216,218,221,223,230,232,235,237,240,241,242,243,266,267,269,272,279,282,287,288,294,295,298,311,],[-126,-125,-124,-123,-104,-104,-112,-113,-114,-115,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-104,-92,-95,310,-139,-44,-86,-89,319,]),'MENORQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,224,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAYORQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,225,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MENORIGUALQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,226,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAYORIGUALQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,227,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'IGUALQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,228,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'DIFQUE':([144,145,146,147,148,149,150,151,152,181,182,183,184,185,186,187,188,189,213,214,230,232,235,237,240,241,242,243,266,267,279,282,294,],[-125,-124,-123,-104,-104,-112,-113,-114,-115,229,-104,-104,-97,-98,-104,-104,-104,-104,-118,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAS':([145,146,147,148,149,150,151,152,182,183,184,185,186,187,188,189,213,214,235,237,240,241,242,243,266,267,282,294,],[-124,-123,-104,-104,-112,-113,-114,-115,233,-104,-97,-98,-104,-104,-104,-104,-118,-104,-94,-96,-100,-101,-102,-103,-104,-99,-95,-44,]),'MENOS':([145,146,147,148,149,150,151,152,182,183,184,185,186,187,188,189,213,214,235,237,240,241,242,243,266,267,282,294,],[-124,-123,-104,-104,-112,-113,-114,-115,234,-104,-97,-98,-104,-104,-104,-104,-118,-104,-94,-96,-100,-101,-102,-103,-104,-99,-95,-44,]),'MULT':([146,147,148,149,150,151,152,183,184,185,186,187,188,189,213,214,240,241,242,243,266,267,294,],[-123,-104,-104,-112,-113,-114,-115,238,-97,-98,-104,-104,-104,-104,-118,-104,-100,-101,-102,-103,-104,-99,-44,]),'DIV':([146,147,148,149,150,151,152,183,184,185,186,187,188,189,213,214,240,241,242,243,266,267,294,],[-123,-104,-104,-112,-113,-114,-115,239,-97,-98,-104,-104,-104,-104,-118,-104,-100,-101,-102,-103,-104,-99,-44,]),'ENTONCES':([194,247,],[-131,286,]),'HASTA':([196,],[249,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neu_programa':([3,],[4,]),'variables':([5,89,],[6,129,]),'empty':([5,6,8,13,14,15,16,33,34,35,44,45,47,52,55,61,62,63,72,73,74,75,76,77,78,79,89,91,94,95,96,97,98,99,103,128,131,140,147,148,156,169,171,175,180,181,182,183,186,187,188,189,191,192,198,199,200,203,204,205,207,208,210,212,214,215,244,263,265,266,269,270,271,272,273,274,275,276,277,278,280,281,283,284,291,309,320,322,324,329,331,332,],[7,10,19,23,24,25,26,40,41,42,50,19,54,90,93,100,101,102,112,113,114,115,116,117,118,119,7,130,132,133,134,135,136,137,138,170,173,177,184,185,193,206,50,211,218,223,232,237,240,241,242,243,245,246,251,252,253,256,257,258,259,262,264,177,267,268,285,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,314,316,326,328,330,333,334,335,]),'funciones':([6,208,],[9,261,]),'funcionesU':([6,208,],[11,11,]),'tipo_funcion':([6,208,],[12,12,]),'variablesU':([8,45,],[17,51,]),'variablesD':([8,31,45,],[18,38,18,]),'neu_addVariableAStack':([20,],[27,]),'neu_principal':([21,],[29,]),'tipo_var':([28,88,],[32,128,]),'neu_addFuncion':([30,],[37,]),'neu_addVariable':([32,],[39,]),'bloque':([43,129,286,310,319,323,],[46,172,309,318,325,329,]),'recibir_parametros':([44,171,],[49,207,]),'neu_endPrograma':([46,],[52,]),'bloqueU':([47,55,],[53,94,]),'estatuto':([47,55,],[55,55,]),'asignacion':([47,55,],[56,56,]),'llamada':([47,55,106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,231,236,249,289,290,321,],[57,57,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'retorno':([47,55,],[58,58,]),'lectura':([47,55,],[59,59,]),'escritura':([47,55,],[60,60,]),'decision':([47,55,],[61,61,]),'condicional':([47,55,],[62,62,]),'no_condicional':([47,55,],[63,63,]),'funciones_especiales':([47,55,],[64,64,]),'circulo':([47,55,],[72,72,]),'color':([47,55,],[73,73,]),'grosor':([47,55,],[74,74,]),'linea':([47,55,],[75,75,]),'puntoxy':([47,55,],[76,76,]),'arco':([47,55,],[77,77,]),'penup':([47,55,],[78,78,]),'pendown':([47,55,],[79,79,]),'bloqueD':([55,],[92,]),'neu_addID':([65,149,],[104,186,]),'neu_llamada_era':([65,149,],[105,105,]),'neu_vaciarPilas':([92,],[131,]),'hiper_exp':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,249,289,290,321,],[142,155,157,161,162,163,164,165,166,167,168,178,195,209,254,255,269,288,312,313,327,]),'super_exp':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,249,289,290,321,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,272,143,143,143,143,]),'exp':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,231,249,289,290,321,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,279,144,144,144,144,]),'termino':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,231,236,249,289,290,321,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,282,145,145,145,145,]),'factor':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,231,236,249,289,290,321,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'varcte':([106,108,109,120,121,122,123,124,125,126,127,141,158,174,201,202,217,222,231,236,249,289,290,321,],[147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'escrituraD':([108,],[154,]),'neu_condicionalAntes':([110,],[158,]),'asignacionFor':([111,],[159,]),'recibir_parametrosD':([128,],[169,]),'neu_addOperador':([139,219,220,224,225,226,227,228,229,233,234,238,239,250,],[174,270,271,273,274,275,276,277,278,280,281,283,284,289,]),'mandar_parametros':([140,212,],[176,265,]),'neu_retorno':([142,],[179,]),'neu_hacerHiperExp':([143,],[180,]),'neu_hacerSuperExp':([144,],[181,]),'neu_hacerExp':([145,],[182,]),'neu_hacerTermino':([146,],[183,]),'neu_addConstanteEntero':([150,],[187,]),'neu_addConstanteFlotante':([151,],[188,]),'neu_addConstanteCaracter':([152,],[189,]),'neu_lectura':([153,],[190,]),'neu_escritura':([155,],[192,]),'neu_addIDFor':([160,],[197,]),'neu_endFuncion':([172,],[208,]),'mandar_parametrosD':([175,],[210,]),'hiper_expU':([180,],[216,]),'operadorL':([180,],[217,]),'super_expU':([181,],[221,]),'operadorR':([181,],[222,]),'expU':([182,],[230,]),'operadorA':([182,],[231,]),'terminoU':([183,],[235,]),'operadorT':([183,],[236,]),'neu_iniciarDecision':([194,],[247,]),'neu_condicionalDurante':([195,],[248,]),'funcionesD':([208,],[260,]),'neu_asignacion':([209,],[263,]),'neu_llamada_gosub':([213,],[266,]),'neu_boolFor':([288,],[311,]),'decisionU':([309,],[315,]),'neu_asignacionFor':([312,],[320,]),'neu_endDecision':([315,],[322,]),'neu_iniciarDecisionElse':([317,],[323,]),'neu_condicionalDespues':([318,],[324,]),'neu_endCondicion':([325,],[331,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty','program',13,'p_programa','lexer_parser.py',261),
  ('variables -> VARIABLES variablesU','variables',2,'p_variales','lexer_parser.py',267),
  ('variables -> empty','variables',1,'p_variales','lexer_parser.py',268),
  ('variablesU -> variablesD','variablesU',1,'p_variales','lexer_parser.py',270),
  ('variablesU -> empty','variablesU',1,'p_variales','lexer_parser.py',271),
  ('variablesD -> ID neu_addVariableAStack COMA variablesD','variablesD',4,'p_variales','lexer_parser.py',273),
  ('variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU','variablesD',6,'p_variales','lexer_parser.py',274),
  ('funciones -> funcionesU','funciones',1,'p_funciones','lexer_parser.py',280),
  ('funciones -> empty','funciones',1,'p_funciones','lexer_parser.py',281),
  ('funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD','funcionesU',11,'p_funciones','lexer_parser.py',283),
  ('funcionesD -> funciones','funcionesD',1,'p_funciones','lexer_parser.py',285),
  ('funcionesD -> empty','funcionesD',1,'p_funciones','lexer_parser.py',286),
  ('tipo_funcion -> ENTERO empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',292),
  ('tipo_funcion -> FLOTANTE empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',293),
  ('tipo_funcion -> CARACTER empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',294),
  ('tipo_funcion -> VOID empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',295),
  ('tipo_var -> ENTERO empty','tipo_var',2,'p_tipo_var','lexer_parser.py',301),
  ('tipo_var -> FLOTANTE empty','tipo_var',2,'p_tipo_var','lexer_parser.py',302),
  ('tipo_var -> CARACTER empty','tipo_var',2,'p_tipo_var','lexer_parser.py',303),
  ('recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty','recibir_parametros',5,'p_recibir_parametros','lexer_parser.py',309),
  ('recibir_parametros -> empty','recibir_parametros',1,'p_recibir_parametros','lexer_parser.py',310),
  ('recibir_parametrosD -> COMA recibir_parametros empty','recibir_parametrosD',3,'p_recibir_parametros','lexer_parser.py',312),
  ('recibir_parametrosD -> empty','recibir_parametrosD',1,'p_recibir_parametros','lexer_parser.py',313),
  ('mandar_parametros -> ID mandar_parametrosD empty','mandar_parametros',3,'p_mandar_parametros','lexer_parser.py',318),
  ('mandar_parametros -> empty','mandar_parametros',1,'p_mandar_parametros','lexer_parser.py',319),
  ('mandar_parametrosD -> COMA mandar_parametros empty','mandar_parametrosD',3,'p_mandar_parametros','lexer_parser.py',321),
  ('mandar_parametrosD -> empty','mandar_parametrosD',1,'p_mandar_parametros','lexer_parser.py',322),
  ('bloque -> L_LLAVE bloqueU R_LLAVE empty','bloque',4,'p_bloque','lexer_parser.py',329),
  ('bloqueU -> estatuto bloqueD neu_vaciarPilas empty','bloqueU',4,'p_bloque','lexer_parser.py',331),
  ('bloqueU -> empty','bloqueU',1,'p_bloque','lexer_parser.py',332),
  ('bloqueD -> bloqueU empty','bloqueD',2,'p_bloque','lexer_parser.py',334),
  ('bloqueD -> empty','bloqueD',1,'p_bloque','lexer_parser.py',335),
  ('estatuto -> asignacion PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',341),
  ('estatuto -> llamada PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',342),
  ('estatuto -> retorno PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',343),
  ('estatuto -> lectura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',344),
  ('estatuto -> escritura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',345),
  ('estatuto -> decision empty','estatuto',2,'p_estatuto','lexer_parser.py',346),
  ('estatuto -> condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',347),
  ('estatuto -> no_condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',348),
  ('estatuto -> funciones_especiales PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',349),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexer_parser.py',350),
  ('asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',7,'p_asignacion','lexer_parser.py',355),
  ('llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty','llamada',7,'p_llamada','lexer_parser.py',361),
  ('retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty','retorno',6,'p_retorno','lexer_parser.py',367),
  ('lectura -> LEER L_PAR ID neu_lectura R_PAR empty','lectura',6,'p_lectura','lexer_parser.py',373),
  ('escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty','escritura',5,'p_escritura','lexer_parser.py',379),
  ('escrituraD -> hiper_exp neu_escritura empty','escrituraD',3,'p_escritura','lexer_parser.py',381),
  ('escrituraD -> LETRERO empty','escrituraD',2,'p_escritura','lexer_parser.py',382),
  ('decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty','decision',10,'p_decision','lexer_parser.py',388),
  ('decisionU -> SINO neu_iniciarDecisionElse bloque empty','decisionU',4,'p_decision','lexer_parser.py',390),
  ('decisionU -> empty','decisionU',1,'p_decision','lexer_parser.py',391),
  ('condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty','condicional',10,'p_condicional','lexer_parser.py',397),
  ('no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty','no_condicional',11,'p_no_condicional','lexer_parser.py',403),
  ('asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty','asignacionFor',7,'p_asignacionFor','lexer_parser.py',408),
  ('funciones_especiales -> circulo empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',416),
  ('funciones_especiales -> color empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',417),
  ('funciones_especiales -> grosor empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',418),
  ('funciones_especiales -> linea empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',419),
  ('funciones_especiales -> puntoxy empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',420),
  ('funciones_especiales -> arco empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',421),
  ('funciones_especiales -> penup empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',422),
  ('funciones_especiales -> pendown empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',423),
  ('funciones_especiales -> empty','funciones_especiales',1,'p_funciones_especiales','lexer_parser.py',424),
  ('circulo -> CIRCULO L_PAR hiper_exp R_PAR empty','circulo',5,'p_circulo','lexer_parser.py',429),
  ('color -> COLOR L_PAR hiper_exp R_PAR empty','color',5,'p_color','lexer_parser.py',434),
  ('grosor -> GROSOR L_PAR hiper_exp R_PAR empty','grosor',5,'p_grosor','lexer_parser.py',439),
  ('linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty','linea',11,'p_linea','lexer_parser.py',444),
  ('puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty','puntoxy',7,'p_puntoxy','lexer_parser.py',449),
  ('arco -> ARCO L_PAR hiper_exp R_PAR empty','arco',5,'p_arco','lexer_parser.py',454),
  ('penup -> PENUP L_PAR hiper_exp R_PAR empty','penup',5,'p_penup','lexer_parser.py',459),
  ('pendown -> PENDOWN L_PAR hiper_exp R_PAR empty','pendown',5,'p_pendown','lexer_parser.py',464),
  ('operadorA -> MAS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',471),
  ('operadorA -> MENOS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',472),
  ('operadorT -> MULT neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',478),
  ('operadorT -> DIV neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',479),
  ('operadorL -> OR neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',485),
  ('operadorL -> AND neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',486),
  ('operadorR -> MENORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',492),
  ('operadorR -> MAYORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',493),
  ('operadorR -> MENORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',494),
  ('operadorR -> MAYORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',495),
  ('operadorR -> IGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',496),
  ('operadorR -> DIFQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',497),
  ('hiper_exp -> super_exp neu_hacerHiperExp hiper_expU','hiper_exp',3,'p_hiper_exp','lexer_parser.py',505),
  ('hiper_expU -> operadorL hiper_exp empty','hiper_expU',3,'p_hiper_exp','lexer_parser.py',507),
  ('hiper_expU -> empty','hiper_expU',1,'p_hiper_exp','lexer_parser.py',508),
  ('super_exp -> exp neu_hacerSuperExp super_expU','super_exp',3,'p_super_exp','lexer_parser.py',513),
  ('super_expU -> operadorR super_exp empty','super_expU',3,'p_super_exp','lexer_parser.py',515),
  ('super_expU -> empty','super_expU',1,'p_super_exp','lexer_parser.py',516),
  ('exp -> termino neu_hacerExp expU','exp',3,'p_exp','lexer_parser.py',521),
  ('expU -> operadorA exp','expU',2,'p_exp','lexer_parser.py',523),
  ('expU -> empty','expU',1,'p_exp','lexer_parser.py',524),
  ('termino -> factor neu_hacerTermino terminoU','termino',3,'p_termino','lexer_parser.py',529),
  ('terminoU -> operadorT termino','terminoU',2,'p_termino','lexer_parser.py',531),
  ('terminoU -> empty','terminoU',1,'p_termino','lexer_parser.py',532),
  ('factor -> varcte empty','factor',2,'p_factor','lexer_parser.py',537),
  ('factor -> llamada empty','factor',2,'p_factor','lexer_parser.py',538),
  ('factor -> L_PAR hiper_exp R_PAR empty','factor',4,'p_factor','lexer_parser.py',539),
  ('varcte -> ID neu_addID empty','varcte',3,'p_varcte','lexer_parser.py',544),
  ('varcte -> ENTEROVAL neu_addConstanteEntero empty','varcte',3,'p_varcte','lexer_parser.py',545),
  ('varcte -> FLOTANTEVAL neu_addConstanteFlotante empty','varcte',3,'p_varcte','lexer_parser.py',546),
  ('varcte -> CARACTERVAL neu_addConstanteCaracter empty','varcte',3,'p_varcte','lexer_parser.py',547),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',558),
  ('neu_programa -> <empty>','neu_programa',0,'p_neu_programa','lexer_parser.py',567),
  ('neu_endPrograma -> <empty>','neu_endPrograma',0,'p_neu_endPrograma','lexer_parser.py',577),
  ('neu_addFuncion -> <empty>','neu_addFuncion',0,'p_neu_addFuncion','lexer_parser.py',582),
  ('neu_endFuncion -> <empty>','neu_endFuncion',0,'p_neu_endFuncion','lexer_parser.py',602),
  ('neu_principal -> <empty>','neu_principal',0,'p_neu_principal','lexer_parser.py',607),
  ('neu_addVariable -> <empty>','neu_addVariable',0,'p_neu_addVariable','lexer_parser.py',616),
  ('neu_addVariableAStack -> <empty>','neu_addVariableAStack',0,'p_neu_addVariableAStack','lexer_parser.py',638),
  ('neu_addID -> <empty>','neu_addID',0,'p_neu_addID','lexer_parser.py',645),
  ('neu_addConstanteEntero -> <empty>','neu_addConstanteEntero',0,'p_neu_addConstanteEntero','lexer_parser.py',658),
  ('neu_addConstanteFlotante -> <empty>','neu_addConstanteFlotante',0,'p_neu_addConstanteFlotante','lexer_parser.py',667),
  ('neu_addConstanteCaracter -> <empty>','neu_addConstanteCaracter',0,'p_neu_addConstanteCaracter','lexer_parser.py',676),
  ('neu_addTermino -> <empty>','neu_addTermino',0,'p_neu_addTermino','lexer_parser.py',684),
  ('neu_llamada_era -> <empty>','neu_llamada_era',0,'p_neu_llamada_era','lexer_parser.py',691),
  ('neu_llamada_gosub -> <empty>','neu_llamada_gosub',0,'p_neu_llamada_gosub','lexer_parser.py',699),
  ('neu_addOperador -> <empty>','neu_addOperador',0,'p_neu_addOperador','lexer_parser.py',704),
  ('getGMemoria -> <empty>','getGMemoria',0,'p_getGMemoria','lexer_parser.py',717),
  ('getLMemoria -> <empty>','getLMemoria',0,'p_getLMemoria','lexer_parser.py',740),
  ('getCMemoria -> <empty>','getCMemoria',0,'p_getCMemoria','lexer_parser.py',763),
  ('neu_hacerTermino -> <empty>','neu_hacerTermino',0,'p_neu_hacerTermino','lexer_parser.py',788),
  ('neu_hacerExp -> <empty>','neu_hacerExp',0,'p_neu_hacerExp','lexer_parser.py',813),
  ('neu_hacerSuperExp -> <empty>','neu_hacerSuperExp',0,'p_neu_hacerSuperExp','lexer_parser.py',838),
  ('neu_hacerHiperExp -> <empty>','neu_hacerHiperExp',0,'p_neu_hacerHiperExp','lexer_parser.py',863),
  ('neu_asignacion -> <empty>','neu_asignacion',0,'p_neu_asignacion','lexer_parser.py',887),
  ('neu_lectura -> <empty>','neu_lectura',0,'p_neu_lectura','lexer_parser.py',894),
  ('neu_escritura -> <empty>','neu_escritura',0,'p_neu_escritura','lexer_parser.py',902),
  ('neu_retorno -> <empty>','neu_retorno',0,'p_neu_retorno','lexer_parser.py',907),
  ('neu_iniciarDecision -> <empty>','neu_iniciarDecision',0,'p_neu_iniciarDecision','lexer_parser.py',916),
  ('neu_iniciarDecisionElse -> <empty>','neu_iniciarDecisionElse',0,'p_neu_iniciarDecisionElse','lexer_parser.py',924),
  ('neu_endDecision -> <empty>','neu_endDecision',0,'p_neu_endDecision','lexer_parser.py',930),
  ('neu_condicionalAntes -> <empty>','neu_condicionalAntes',0,'p_neu_condicionalAntes','lexer_parser.py',935),
  ('neu_condicionalDurante -> <empty>','neu_condicionalDurante',0,'p_neu_condicionalDurante','lexer_parser.py',939),
  ('neu_condicionalDespues -> <empty>','neu_condicionalDespues',0,'p_neu_condicionalDespues','lexer_parser.py',943),
  ('neu_addIDFor -> <empty>','neu_addIDFor',0,'p_neu_addIDFor','lexer_parser.py',949),
  ('neu_asignacionFor -> <empty>','neu_asignacionFor',0,'p_neu_asignacionFor','lexer_parser.py',967),
  ('neu_boolFor -> <empty>','neu_boolFor',0,'p_neu_boolFor','lexer_parser.py',976),
  ('neu_endCondicion -> <empty>','neu_endCondicion',0,'p_neu_endCondicion','lexer_parser.py',999),
  ('neu_vaciarPilas -> <empty>','neu_vaciarPilas',0,'p_neu_vaciarPilas','lexer_parser.py',1019),
  ('notifError -> <empty>','notifError',0,'p_notifError','lexer_parser.py',1028),
]
