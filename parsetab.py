
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARCO CARACTER CARACTERVAL CIRCULO COLOR COMA DESDE DIFQUE DIV DOSPUNTOS ENTERO ENTEROVAL ENTONCES ESCRIBIR FLOTANTE FLOTANTEVAL FUNCION GROSOR HACER HASTA ID IGUAL IGUALQUE LEER LETRERO LINEA L_CORCHETE L_LLAVE L_PAR MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS MIENTRAS MULT OR PENDOWN PENUP PRINCIPAL PROGRAMA PUNTO PUNTOXY PUNTOYCOMA REGRESA R_CORCHETE R_LLAVE R_PAR SI SINO VARIABLES VOID\n    program : PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty\n    \n    variables : VARIABLES variablesU\n              | empty\n\n    variablesU : variablesD\n               | empty\n\n    variablesD : ID neu_addVariableAStack COMA variablesD\n               | ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU\n    \n    funciones : funcionesU\n              | empty\n    \n    funcionesU : tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD\n    \n    funcionesD : funciones\n               | empty\n    \n    tipo_funcion : ENTERO empty\n                 | FLOTANTE empty\n                 | CARACTER empty\n                 | VOID empty\n    \n    tipo_var : ENTERO empty\n             | FLOTANTE empty\n             | CARACTER empty\n    \n    recibir_parametros : ID DOSPUNTOS tipo_var recibir_parametrosD empty\n                       | empty\n\n    recibir_parametrosD : COMA recibir_parametros empty\n                       | empty\n    \n    mandar_parametros : ID mandar_parametrosD empty\n                      | empty\n\n    mandar_parametrosD : COMA mandar_parametros empty\n                       | empty\n    \n    bloque : L_LLAVE bloqueU R_LLAVE empty\n\n    bloqueU : estatuto bloqueD neu_vaciarPilas empty\n            | empty\n\n    bloqueD : bloqueU empty\n            | empty\n    \n    estatuto : asignacion PUNTOYCOMA empty\n             | llamada PUNTOYCOMA empty\n             | retorno PUNTOYCOMA empty\n             | lectura PUNTOYCOMA empty\n             | escritura PUNTOYCOMA empty\n             | decision empty\n             | condicional empty\n             | no_condicional empty\n             | funciones_especiales PUNTOYCOMA empty\n             | empty\n    \n    asignacion : ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty\n    \n    llamada : ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty\n    \n    retorno : REGRESA L_PAR ID R_PAR empty\n    \n    lectura : LEER L_PAR ID neu_lectura R_PAR empty\n    \n    escritura : ESCRIBIR L_PAR escrituraD R_PAR empty\n\n    escrituraD : hiper_exp neu_escritura empty\n               | LETRERO empty\n    \n    decision : SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty\n\n    decisionU : SINO neu_iniciarDecisionElse bloque empty\n              | empty\n    \n    condicional : MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty\n    \n    no_condicional : DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty\n    \n    asignacionFor : ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty\n    \n    funciones_especiales : circulo empty\n                         | color empty\n                         | grosor empty\n                         | linea empty\n                         | puntoxy empty\n                         | arco empty\n                         | penup empty\n                         | pendown empty\n                         | empty\n    \n    circulo : CIRCULO L_PAR hiper_exp R_PAR empty\n    \n    color : COLOR L_PAR hiper_exp R_PAR empty\n    \n    grosor : GROSOR L_PAR hiper_exp R_PAR empty\n    \n    linea : LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty\n    \n    puntoxy : PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty\n    \n    arco : ARCO L_PAR hiper_exp R_PAR empty\n    \n    penup : PENUP L_PAR hiper_exp R_PAR empty\n    \n    pendown : PENDOWN L_PAR hiper_exp R_PAR empty\n    \n    operadorA : MAS neu_addOperador empty\n              | MENOS neu_addOperador empty\n    \n    operadorT : MULT neu_addOperador empty\n              | DIV neu_addOperador empty\n    \n    operadorL : OR neu_addOperador empty\n              | AND neu_addOperador empty\n    \n    operadorR : MENORQUE neu_addOperador empty\n              | MAYORQUE neu_addOperador empty\n              | MENORIGUALQUE neu_addOperador empty\n              | MAYORIGUALQUE neu_addOperador empty\n              | IGUALQUE neu_addOperador empty\n              | DIFQUE neu_addOperador empty\n    \n    hiper_exp : super_exp neu_hacerHiperExp hiper_expU\n\n    hiper_expU : operadorL hiper_exp empty \n               | empty\n    \n    super_exp : exp neu_hacerSuperExp super_expU\n\n    super_expU : operadorR super_exp empty \n               | empty\n    \n    exp : termino neu_hacerExp expU\n\n    expU : operadorA exp\n         | empty\n    \n    termino : factor neu_hacerTermino terminoU\n\n    terminoU : operadorT termino \n             | empty\n    \n    factor : varcte empty\n           | llamada empty\n           | L_PAR hiper_exp R_PAR empty\n    \n    varcte  : ID neu_addID empty\n            | ENTEROVAL neu_addConstanteEntero empty\n            | FLOTANTEVAL neu_addConstanteFlotante empty\n            | CARACTERVAL neu_addConstanteCaracter empty\n    \n    empty : \n    neu_programa : neu_addFuncion : neu_endFuncion : neu_principal : neu_addVariable : neu_addVariableAStack : neu_addID : neu_addConstanteEntero : neu_addConstanteFlotante : neu_addConstanteCaracter : neu_addTermino : neu_llamada_era : neu_llamada_gosub : neu_addOperador : getGMemoria : getLMemoria : getCMemoria : neu_hacerTermino : neu_hacerExp : neu_hacerSuperExp : neu_hacerHiperExp : neu_asignacion : neu_lectura : neu_escritura : neu_iniciarDecision : neu_iniciarDecisionElse : neu_endDecision : neu_condicionalAntes : neu_condicionalDurante : neu_condicionalDespues : neu_addIDFor : neu_asignacionFor : neu_boolFor : neu_endCondicion  : neu_vaciarPilas : '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,46,52,90,129,],[0,-104,-1,-104,-28,]),'ID':([2,8,22,31,44,45,47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,105,106,107,108,109,110,119,120,121,122,123,124,125,126,129,132,133,134,135,136,137,138,139,142,157,170,173,200,201,211,219,221,222,224,226,227,228,229,230,231,233,235,236,238,240,241,248,249,269,270,272,273,274,275,276,277,279,280,282,283,287,288,294,295,297,298,299,300,301,302,303,304,305,306,307,313,314,316,319,320,322,323,326,327,328,329,331,332,],[3,20,30,20,48,20,65,-42,65,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,140,141,152,152,-132,159,152,152,152,152,152,152,152,152,-28,-33,-34,-35,-36,-37,-41,-118,174,152,152,48,152,152,152,174,152,-118,-118,152,-118,-118,-118,-118,-118,-118,152,-118,-118,152,-118,-118,152,-118,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,152,152,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,-104,-131,-52,-134,152,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'PUNTOYCOMA':([3,4,32,33,34,35,39,40,41,42,47,54,55,56,57,58,59,60,61,62,63,64,72,73,74,75,76,77,78,79,90,92,94,95,96,97,98,99,100,101,102,111,112,113,114,115,116,117,118,129,132,133,134,135,136,137,146,147,148,149,150,151,152,153,154,155,177,180,183,184,185,186,187,188,189,190,191,192,197,198,199,202,203,204,208,212,213,214,215,216,218,220,223,225,232,234,237,239,242,243,244,245,250,251,252,255,256,257,262,265,266,267,268,271,278,281,289,290,292,293,296,307,312,313,314,316,320,322,323,326,327,328,329,330,331,332,333,],[-105,5,-109,-104,-104,-104,45,-17,-18,-19,-104,-42,-104,94,95,96,97,98,-104,-104,-104,102,-104,-104,-104,-104,-104,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-56,-57,-58,-59,-60,-61,-62,-63,-28,-33,-34,-35,-36,-37,-41,-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,-104,-104,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-126,-117,-45,-104,-104,-47,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-65,-66,-67,-70,-71,-72,-104,-104,-46,-99,-104,-104,-92,-95,-104,-43,-44,-86,-89,-104,-69,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-104,-51,-54,-68,]),'VARIABLES':([5,89,],[8,8,]),'ENTERO':([5,6,7,8,17,18,19,28,38,45,51,88,90,129,171,207,],[-104,13,-3,-104,-2,-4,-5,33,-6,-104,-7,33,-104,-28,-107,13,]),'FLOTANTE':([5,6,7,8,17,18,19,28,38,45,51,88,90,129,171,207,],[-104,14,-3,-104,-2,-4,-5,34,-6,-104,-7,34,-104,-28,-107,14,]),'CARACTER':([5,6,7,8,17,18,19,28,38,45,51,88,90,129,171,207,],[-104,15,-3,-104,-2,-4,-5,35,-6,-104,-7,35,-104,-28,-107,15,]),'VOID':([5,6,7,8,17,18,19,38,45,51,90,129,171,207,],[-104,16,-3,-104,-2,-4,-5,-6,-104,-7,-104,-28,-107,16,]),'PRINCIPAL':([5,6,7,8,9,10,11,17,18,19,38,45,51,90,129,171,207,259,260,261,],[-104,-104,-3,-104,21,-9,-8,-2,-4,-5,-6,-104,-7,-104,-28,-107,-104,-10,-11,-9,]),'L_LLAVE':([7,8,17,18,19,38,43,45,51,89,128,284,308,315,317,321,],[-3,-104,-2,-4,-5,-6,47,-104,-7,-104,47,47,47,-130,47,47,]),'FUNCION':([12,13,14,15,16,23,24,25,26,],[22,-104,-104,-104,-104,-13,-14,-15,-16,]),'DOSPUNTOS':([20,48,],[28,88,]),'COMA':([20,27,33,34,35,40,41,42,127,146,147,148,149,150,151,152,153,154,155,163,164,174,183,184,185,186,187,188,189,190,191,192,212,215,218,220,223,225,232,234,237,239,242,243,244,245,253,265,267,268,271,278,281,292,293,296,311,],[-110,31,-104,-104,-104,-17,-18,-19,170,-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,200,201,211,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,288,-104,-99,-104,-104,-92,-95,-44,-86,-89,319,]),'L_PAR':([21,29,30,37,65,66,67,68,69,70,71,80,81,82,83,84,85,86,87,104,107,108,109,119,120,121,122,123,124,125,126,138,142,152,157,173,200,201,219,221,222,224,226,227,228,229,230,231,233,235,236,238,240,241,248,249,269,270,272,273,274,275,276,277,279,280,282,283,287,288,294,295,297,298,299,300,301,302,303,304,305,306,319,],[-108,36,-106,44,-116,105,106,107,108,109,110,119,120,121,122,123,124,125,126,139,142,142,-132,142,142,142,142,142,142,142,142,-118,142,-116,142,142,142,142,142,-118,-118,142,-118,-118,-118,-118,-118,-118,142,-118,-118,142,-118,-118,142,-118,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,142,142,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,142,]),'R_PAR':([33,34,35,36,40,41,42,44,49,50,127,139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,160,161,162,165,166,167,168,169,170,174,175,176,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,205,206,209,210,211,212,215,217,218,220,223,225,232,234,237,239,242,243,244,245,247,254,258,263,264,265,267,268,271,278,281,291,292,293,296,310,318,324,325,],[-104,-104,-104,43,-17,-18,-19,-104,89,-21,-104,-104,177,-127,180,-128,-104,-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,193,195,197,198,199,202,203,204,-104,-23,-104,-104,212,-25,214,215,-104,-49,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-133,-20,-104,-104,-27,-104,-117,-104,-48,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,285,289,-22,-24,-104,-104,-99,-104,-104,-92,-95,-26,-44,-86,-89,-136,-104,-55,330,]),'R_LLAVE':([47,53,54,55,61,62,63,90,91,92,93,94,95,96,97,98,99,100,101,102,129,130,131,132,133,134,135,136,137,172,307,313,314,316,320,322,323,326,327,328,329,331,332,],[-104,90,-30,-104,-104,-104,-104,-104,-139,-30,-104,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-104,-31,-33,-34,-35,-36,-37,-41,-29,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'REGRESA':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[66,-42,66,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'LEER':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[67,-42,67,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'ESCRIBIR':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[68,-42,68,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'SI':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[69,-42,69,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'MIENTRAS':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[70,-42,70,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'DESDE':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[71,-42,71,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'CIRCULO':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[80,-42,80,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'COLOR':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[81,-42,81,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'GROSOR':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[82,-42,82,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'LINEA':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[83,-42,83,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'PUNTOXY':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[84,-42,84,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'ARCO':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[85,-42,85,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'PENUP':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[86,-42,86,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'PENDOWN':([47,54,55,61,62,63,90,92,94,95,96,97,98,99,100,101,102,129,132,133,134,135,136,137,307,313,314,316,320,322,323,326,327,328,329,331,332,],[87,-42,87,-104,-104,-104,-104,-42,-104,-104,-104,-104,-104,-38,-39,-40,-104,-28,-33,-34,-35,-36,-37,-41,-104,-131,-52,-134,-104,-104,-138,-50,-104,-53,-104,-51,-54,]),'IGUAL':([65,103,159,196,],[-111,138,-135,249,]),'SINO':([90,129,307,],[-104,-28,315,]),'LETRERO':([107,],[145,]),'ENTEROVAL':([107,108,109,119,120,121,122,123,124,125,126,138,142,157,173,200,201,219,221,222,224,226,227,228,229,230,231,233,235,236,238,240,241,248,249,269,270,272,273,274,275,276,277,279,280,282,283,287,288,294,295,297,298,299,300,301,302,303,304,305,306,319,],[153,153,-132,153,153,153,153,153,153,153,153,-118,153,153,153,153,153,153,-118,-118,153,-118,-118,-118,-118,-118,-118,153,-118,-118,153,-118,-118,153,-118,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,153,153,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,153,]),'FLOTANTEVAL':([107,108,109,119,120,121,122,123,124,125,126,138,142,157,173,200,201,219,221,222,224,226,227,228,229,230,231,233,235,236,238,240,241,248,249,269,270,272,273,274,275,276,277,279,280,282,283,287,288,294,295,297,298,299,300,301,302,303,304,305,306,319,],[154,154,-132,154,154,154,154,154,154,154,154,-118,154,154,154,154,154,154,-118,-118,154,-118,-118,-118,-118,-118,-118,154,-118,-118,154,-118,-118,154,-118,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,154,154,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,154,]),'CARACTERVAL':([107,108,109,119,120,121,122,123,124,125,126,138,142,157,173,200,201,219,221,222,224,226,227,228,229,230,231,233,235,236,238,240,241,248,249,269,270,272,273,274,275,276,277,279,280,282,283,287,288,294,295,297,298,299,300,301,302,303,304,305,306,319,],[155,155,-132,155,155,155,155,155,155,155,155,-118,155,155,155,155,155,155,-118,-118,155,-118,-118,-118,-118,-118,-118,155,-118,-118,155,-118,-118,155,-118,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,-104,155,155,-77,-78,-79,-80,-81,-82,-83,-84,-73,-74,-75,-76,155,]),'OR':([146,147,148,149,150,151,152,153,154,155,183,184,185,186,187,188,189,190,191,192,212,215,223,225,232,234,237,239,242,243,244,245,265,267,271,278,281,292,296,],[-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,221,-104,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-92,-95,-44,-89,]),'AND':([146,147,148,149,150,151,152,153,154,155,183,184,185,186,187,188,189,190,191,192,212,215,223,225,232,234,237,239,242,243,244,245,265,267,271,278,281,292,296,],[-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,222,-104,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-92,-95,-44,-89,]),'HACER':([146,147,148,149,150,151,152,153,154,155,183,184,185,186,187,188,189,190,191,192,212,215,218,220,223,225,232,234,237,239,242,243,244,245,265,267,268,271,278,281,285,286,292,293,296,309,],[-125,-124,-123,-122,-104,-104,-111,-112,-113,-114,-104,-104,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-85,-87,-88,-90,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-104,-104,-92,-95,308,-137,-44,-86,-89,317,]),'MENORQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,226,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAYORQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,227,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MENORIGUALQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,228,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAYORIGUALQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,229,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'IGUALQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,230,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'DIFQUE':([147,148,149,150,151,152,153,154,155,184,185,186,187,188,189,190,191,192,212,215,232,234,237,239,242,243,244,245,265,267,278,281,292,],[-124,-123,-122,-104,-104,-111,-112,-113,-114,231,-104,-104,-97,-98,-104,-104,-104,-104,-117,-104,-91,-93,-94,-96,-100,-101,-102,-103,-104,-99,-92,-95,-44,]),'MAS':([148,149,150,151,152,153,154,155,185,186,187,188,189,190,191,192,212,215,237,239,242,243,244,245,265,267,281,292,],[-123,-122,-104,-104,-111,-112,-113,-114,235,-104,-97,-98,-104,-104,-104,-104,-117,-104,-94,-96,-100,-101,-102,-103,-104,-99,-95,-44,]),'MENOS':([148,149,150,151,152,153,154,155,185,186,187,188,189,190,191,192,212,215,237,239,242,243,244,245,265,267,281,292,],[-123,-122,-104,-104,-111,-112,-113,-114,236,-104,-97,-98,-104,-104,-104,-104,-117,-104,-94,-96,-100,-101,-102,-103,-104,-99,-95,-44,]),'MULT':([149,150,151,152,153,154,155,186,187,188,189,190,191,192,212,215,242,243,244,245,265,267,292,],[-122,-104,-104,-111,-112,-113,-114,240,-97,-98,-104,-104,-104,-104,-117,-104,-100,-101,-102,-103,-104,-99,-44,]),'DIV':([149,150,151,152,153,154,155,186,187,188,189,190,191,192,212,215,242,243,244,245,265,267,292,],[-122,-104,-104,-111,-112,-113,-114,241,-97,-98,-104,-104,-104,-104,-117,-104,-100,-101,-102,-103,-104,-99,-44,]),'ENTONCES':([193,246,],[-129,284,]),'HASTA':([195,],[248,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neu_programa':([3,],[4,]),'variables':([5,89,],[6,128,]),'empty':([5,6,8,13,14,15,16,33,34,35,44,45,46,47,55,61,62,63,72,73,74,75,76,77,78,79,89,90,93,94,95,96,97,98,102,127,130,139,145,150,151,168,170,174,177,180,181,183,184,185,186,189,190,191,192,197,198,199,202,203,204,206,207,209,211,214,215,262,264,265,268,269,270,271,272,273,274,275,276,277,279,280,282,283,289,307,318,320,322,327,329,330,],[7,10,19,23,24,25,26,40,41,42,50,19,52,54,92,99,100,101,111,112,113,114,115,116,117,118,7,129,131,132,133,134,135,136,137,169,172,176,182,187,188,205,50,210,213,216,217,220,225,234,239,242,243,244,245,250,251,252,255,256,257,258,261,263,176,266,267,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,312,314,324,326,328,331,332,333,]),'funciones':([6,207,],[9,260,]),'funcionesU':([6,207,],[11,11,]),'tipo_funcion':([6,207,],[12,12,]),'variablesU':([8,45,],[17,51,]),'variablesD':([8,31,45,],[18,38,18,]),'neu_addVariableAStack':([20,],[27,]),'neu_principal':([21,],[29,]),'tipo_var':([28,88,],[32,127,]),'neu_addFuncion':([30,],[37,]),'neu_addVariable':([32,],[39,]),'bloque':([43,128,284,308,317,321,],[46,171,307,316,323,327,]),'recibir_parametros':([44,170,],[49,206,]),'bloqueU':([47,55,],[53,93,]),'estatuto':([47,55,],[55,55,]),'asignacion':([47,55,],[56,56,]),'llamada':([47,55,107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,233,238,248,287,288,319,],[57,57,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'retorno':([47,55,],[58,58,]),'lectura':([47,55,],[59,59,]),'escritura':([47,55,],[60,60,]),'decision':([47,55,],[61,61,]),'condicional':([47,55,],[62,62,]),'no_condicional':([47,55,],[63,63,]),'funciones_especiales':([47,55,],[64,64,]),'circulo':([47,55,],[72,72,]),'color':([47,55,],[73,73,]),'grosor':([47,55,],[74,74,]),'linea':([47,55,],[75,75,]),'puntoxy':([47,55,],[76,76,]),'arco':([47,55,],[77,77,]),'penup':([47,55,],[78,78,]),'pendown':([47,55,],[79,79,]),'bloqueD':([55,],[91,]),'neu_addID':([65,152,],[103,189,]),'neu_llamada_era':([65,152,],[104,104,]),'neu_vaciarPilas':([91,],[130,]),'escrituraD':([107,],[143,]),'hiper_exp':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,248,287,288,319,],[144,156,160,161,162,163,164,165,166,167,179,194,208,253,254,268,286,310,311,325,]),'super_exp':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,248,287,288,319,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,271,146,146,146,146,]),'exp':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,233,248,287,288,319,],[147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,278,147,147,147,147,]),'termino':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,233,238,248,287,288,319,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,281,148,148,148,148,]),'factor':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,233,238,248,287,288,319,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'varcte':([107,108,119,120,121,122,123,124,125,126,142,157,173,200,201,219,224,233,238,248,287,288,319,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'neu_condicionalAntes':([109,],[157,]),'asignacionFor':([110,],[158,]),'recibir_parametrosD':([127,],[168,]),'neu_addOperador':([138,221,222,226,227,228,229,230,231,235,236,240,241,249,],[173,269,270,272,273,274,275,276,277,279,280,282,283,287,]),'mandar_parametros':([139,211,],[175,264,]),'neu_lectura':([141,],[178,]),'neu_escritura':([144,],[181,]),'neu_hacerHiperExp':([146,],[183,]),'neu_hacerSuperExp':([147,],[184,]),'neu_hacerExp':([148,],[185,]),'neu_hacerTermino':([149,],[186,]),'neu_addConstanteEntero':([153,],[190,]),'neu_addConstanteFlotante':([154,],[191,]),'neu_addConstanteCaracter':([155,],[192,]),'neu_addIDFor':([159,],[196,]),'neu_endFuncion':([171,],[207,]),'mandar_parametrosD':([174,],[209,]),'hiper_expU':([183,],[218,]),'operadorL':([183,],[219,]),'super_expU':([184,],[223,]),'operadorR':([184,],[224,]),'expU':([185,],[232,]),'operadorA':([185,],[233,]),'terminoU':([186,],[237,]),'operadorT':([186,],[238,]),'neu_iniciarDecision':([193,],[246,]),'neu_condicionalDurante':([194,],[247,]),'funcionesD':([207,],[259,]),'neu_asignacion':([208,],[262,]),'neu_llamada_gosub':([212,],[265,]),'neu_boolFor':([286,],[309,]),'decisionU':([307,],[313,]),'neu_asignacionFor':([310,],[318,]),'neu_endDecision':([313,],[320,]),'neu_iniciarDecisionElse':([315,],[321,]),'neu_condicionalDespues':([316,],[322,]),'neu_endCondicion':([323,],[329,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty','program',12,'p_programa','lexer_parser.py',261),
  ('variables -> VARIABLES variablesU','variables',2,'p_variales','lexer_parser.py',267),
  ('variables -> empty','variables',1,'p_variales','lexer_parser.py',268),
  ('variablesU -> variablesD','variablesU',1,'p_variales','lexer_parser.py',270),
  ('variablesU -> empty','variablesU',1,'p_variales','lexer_parser.py',271),
  ('variablesD -> ID neu_addVariableAStack COMA variablesD','variablesD',4,'p_variales','lexer_parser.py',273),
  ('variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU','variablesD',6,'p_variales','lexer_parser.py',274),
  ('funciones -> funcionesU','funciones',1,'p_funciones','lexer_parser.py',280),
  ('funciones -> empty','funciones',1,'p_funciones','lexer_parser.py',281),
  ('funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD','funcionesU',11,'p_funciones','lexer_parser.py',283),
  ('funcionesD -> funciones','funcionesD',1,'p_funciones','lexer_parser.py',285),
  ('funcionesD -> empty','funcionesD',1,'p_funciones','lexer_parser.py',286),
  ('tipo_funcion -> ENTERO empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',292),
  ('tipo_funcion -> FLOTANTE empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',293),
  ('tipo_funcion -> CARACTER empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',294),
  ('tipo_funcion -> VOID empty','tipo_funcion',2,'p_tipo_funcion','lexer_parser.py',295),
  ('tipo_var -> ENTERO empty','tipo_var',2,'p_tipo_var','lexer_parser.py',301),
  ('tipo_var -> FLOTANTE empty','tipo_var',2,'p_tipo_var','lexer_parser.py',302),
  ('tipo_var -> CARACTER empty','tipo_var',2,'p_tipo_var','lexer_parser.py',303),
  ('recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty','recibir_parametros',5,'p_recibir_parametros','lexer_parser.py',309),
  ('recibir_parametros -> empty','recibir_parametros',1,'p_recibir_parametros','lexer_parser.py',310),
  ('recibir_parametrosD -> COMA recibir_parametros empty','recibir_parametrosD',3,'p_recibir_parametros','lexer_parser.py',312),
  ('recibir_parametrosD -> empty','recibir_parametrosD',1,'p_recibir_parametros','lexer_parser.py',313),
  ('mandar_parametros -> ID mandar_parametrosD empty','mandar_parametros',3,'p_mandar_parametros','lexer_parser.py',318),
  ('mandar_parametros -> empty','mandar_parametros',1,'p_mandar_parametros','lexer_parser.py',319),
  ('mandar_parametrosD -> COMA mandar_parametros empty','mandar_parametrosD',3,'p_mandar_parametros','lexer_parser.py',321),
  ('mandar_parametrosD -> empty','mandar_parametrosD',1,'p_mandar_parametros','lexer_parser.py',322),
  ('bloque -> L_LLAVE bloqueU R_LLAVE empty','bloque',4,'p_bloque','lexer_parser.py',329),
  ('bloqueU -> estatuto bloqueD neu_vaciarPilas empty','bloqueU',4,'p_bloque','lexer_parser.py',331),
  ('bloqueU -> empty','bloqueU',1,'p_bloque','lexer_parser.py',332),
  ('bloqueD -> bloqueU empty','bloqueD',2,'p_bloque','lexer_parser.py',334),
  ('bloqueD -> empty','bloqueD',1,'p_bloque','lexer_parser.py',335),
  ('estatuto -> asignacion PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',341),
  ('estatuto -> llamada PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',342),
  ('estatuto -> retorno PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',343),
  ('estatuto -> lectura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',344),
  ('estatuto -> escritura PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',345),
  ('estatuto -> decision empty','estatuto',2,'p_estatuto','lexer_parser.py',346),
  ('estatuto -> condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',347),
  ('estatuto -> no_condicional empty','estatuto',2,'p_estatuto','lexer_parser.py',348),
  ('estatuto -> funciones_especiales PUNTOYCOMA empty','estatuto',3,'p_estatuto','lexer_parser.py',349),
  ('estatuto -> empty','estatuto',1,'p_estatuto','lexer_parser.py',350),
  ('asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty','asignacion',7,'p_asignacion','lexer_parser.py',355),
  ('llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty','llamada',7,'p_llamada','lexer_parser.py',361),
  ('retorno -> REGRESA L_PAR ID R_PAR empty','retorno',5,'p_retorno','lexer_parser.py',367),
  ('lectura -> LEER L_PAR ID neu_lectura R_PAR empty','lectura',6,'p_lectura','lexer_parser.py',372),
  ('escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty','escritura',5,'p_escritura','lexer_parser.py',378),
  ('escrituraD -> hiper_exp neu_escritura empty','escrituraD',3,'p_escritura','lexer_parser.py',380),
  ('escrituraD -> LETRERO empty','escrituraD',2,'p_escritura','lexer_parser.py',381),
  ('decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty','decision',10,'p_decision','lexer_parser.py',387),
  ('decisionU -> SINO neu_iniciarDecisionElse bloque empty','decisionU',4,'p_decision','lexer_parser.py',389),
  ('decisionU -> empty','decisionU',1,'p_decision','lexer_parser.py',390),
  ('condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty','condicional',10,'p_condicional','lexer_parser.py',396),
  ('no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty','no_condicional',11,'p_no_condicional','lexer_parser.py',402),
  ('asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty','asignacionFor',7,'p_asignacionFor','lexer_parser.py',407),
  ('funciones_especiales -> circulo empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',415),
  ('funciones_especiales -> color empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',416),
  ('funciones_especiales -> grosor empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',417),
  ('funciones_especiales -> linea empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',418),
  ('funciones_especiales -> puntoxy empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',419),
  ('funciones_especiales -> arco empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',420),
  ('funciones_especiales -> penup empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',421),
  ('funciones_especiales -> pendown empty','funciones_especiales',2,'p_funciones_especiales','lexer_parser.py',422),
  ('funciones_especiales -> empty','funciones_especiales',1,'p_funciones_especiales','lexer_parser.py',423),
  ('circulo -> CIRCULO L_PAR hiper_exp R_PAR empty','circulo',5,'p_circulo','lexer_parser.py',428),
  ('color -> COLOR L_PAR hiper_exp R_PAR empty','color',5,'p_color','lexer_parser.py',433),
  ('grosor -> GROSOR L_PAR hiper_exp R_PAR empty','grosor',5,'p_grosor','lexer_parser.py',438),
  ('linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty','linea',11,'p_linea','lexer_parser.py',443),
  ('puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty','puntoxy',7,'p_puntoxy','lexer_parser.py',448),
  ('arco -> ARCO L_PAR hiper_exp R_PAR empty','arco',5,'p_arco','lexer_parser.py',453),
  ('penup -> PENUP L_PAR hiper_exp R_PAR empty','penup',5,'p_penup','lexer_parser.py',458),
  ('pendown -> PENDOWN L_PAR hiper_exp R_PAR empty','pendown',5,'p_pendown','lexer_parser.py',463),
  ('operadorA -> MAS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',470),
  ('operadorA -> MENOS neu_addOperador empty','operadorA',3,'p_operadorA','lexer_parser.py',471),
  ('operadorT -> MULT neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',477),
  ('operadorT -> DIV neu_addOperador empty','operadorT',3,'p_operadorT','lexer_parser.py',478),
  ('operadorL -> OR neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',484),
  ('operadorL -> AND neu_addOperador empty','operadorL',3,'p_operadorL','lexer_parser.py',485),
  ('operadorR -> MENORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',491),
  ('operadorR -> MAYORQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',492),
  ('operadorR -> MENORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',493),
  ('operadorR -> MAYORIGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',494),
  ('operadorR -> IGUALQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',495),
  ('operadorR -> DIFQUE neu_addOperador empty','operadorR',3,'p_operadorR','lexer_parser.py',496),
  ('hiper_exp -> super_exp neu_hacerHiperExp hiper_expU','hiper_exp',3,'p_hiper_exp','lexer_parser.py',504),
  ('hiper_expU -> operadorL hiper_exp empty','hiper_expU',3,'p_hiper_exp','lexer_parser.py',506),
  ('hiper_expU -> empty','hiper_expU',1,'p_hiper_exp','lexer_parser.py',507),
  ('super_exp -> exp neu_hacerSuperExp super_expU','super_exp',3,'p_super_exp','lexer_parser.py',512),
  ('super_expU -> operadorR super_exp empty','super_expU',3,'p_super_exp','lexer_parser.py',514),
  ('super_expU -> empty','super_expU',1,'p_super_exp','lexer_parser.py',515),
  ('exp -> termino neu_hacerExp expU','exp',3,'p_exp','lexer_parser.py',520),
  ('expU -> operadorA exp','expU',2,'p_exp','lexer_parser.py',522),
  ('expU -> empty','expU',1,'p_exp','lexer_parser.py',523),
  ('termino -> factor neu_hacerTermino terminoU','termino',3,'p_termino','lexer_parser.py',528),
  ('terminoU -> operadorT termino','terminoU',2,'p_termino','lexer_parser.py',530),
  ('terminoU -> empty','terminoU',1,'p_termino','lexer_parser.py',531),
  ('factor -> varcte empty','factor',2,'p_factor','lexer_parser.py',536),
  ('factor -> llamada empty','factor',2,'p_factor','lexer_parser.py',537),
  ('factor -> L_PAR hiper_exp R_PAR empty','factor',4,'p_factor','lexer_parser.py',538),
  ('varcte -> ID neu_addID empty','varcte',3,'p_varcte','lexer_parser.py',543),
  ('varcte -> ENTEROVAL neu_addConstanteEntero empty','varcte',3,'p_varcte','lexer_parser.py',544),
  ('varcte -> FLOTANTEVAL neu_addConstanteFlotante empty','varcte',3,'p_varcte','lexer_parser.py',545),
  ('varcte -> CARACTERVAL neu_addConstanteCaracter empty','varcte',3,'p_varcte','lexer_parser.py',546),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',557),
  ('neu_programa -> <empty>','neu_programa',0,'p_neu_programa','lexer_parser.py',566),
  ('neu_addFuncion -> <empty>','neu_addFuncion',0,'p_neu_addFuncion','lexer_parser.py',576),
  ('neu_endFuncion -> <empty>','neu_endFuncion',0,'p_neu_endFuncion','lexer_parser.py',596),
  ('neu_principal -> <empty>','neu_principal',0,'p_neu_principal','lexer_parser.py',601),
  ('neu_addVariable -> <empty>','neu_addVariable',0,'p_neu_addVariable','lexer_parser.py',610),
  ('neu_addVariableAStack -> <empty>','neu_addVariableAStack',0,'p_neu_addVariableAStack','lexer_parser.py',632),
  ('neu_addID -> <empty>','neu_addID',0,'p_neu_addID','lexer_parser.py',639),
  ('neu_addConstanteEntero -> <empty>','neu_addConstanteEntero',0,'p_neu_addConstanteEntero','lexer_parser.py',652),
  ('neu_addConstanteFlotante -> <empty>','neu_addConstanteFlotante',0,'p_neu_addConstanteFlotante','lexer_parser.py',661),
  ('neu_addConstanteCaracter -> <empty>','neu_addConstanteCaracter',0,'p_neu_addConstanteCaracter','lexer_parser.py',670),
  ('neu_addTermino -> <empty>','neu_addTermino',0,'p_neu_addTermino','lexer_parser.py',678),
  ('neu_llamada_era -> <empty>','neu_llamada_era',0,'p_neu_llamada_era','lexer_parser.py',685),
  ('neu_llamada_gosub -> <empty>','neu_llamada_gosub',0,'p_neu_llamada_gosub','lexer_parser.py',693),
  ('neu_addOperador -> <empty>','neu_addOperador',0,'p_neu_addOperador','lexer_parser.py',698),
  ('getGMemoria -> <empty>','getGMemoria',0,'p_getGMemoria','lexer_parser.py',711),
  ('getLMemoria -> <empty>','getLMemoria',0,'p_getLMemoria','lexer_parser.py',734),
  ('getCMemoria -> <empty>','getCMemoria',0,'p_getCMemoria','lexer_parser.py',757),
  ('neu_hacerTermino -> <empty>','neu_hacerTermino',0,'p_neu_hacerTermino','lexer_parser.py',782),
  ('neu_hacerExp -> <empty>','neu_hacerExp',0,'p_neu_hacerExp','lexer_parser.py',807),
  ('neu_hacerSuperExp -> <empty>','neu_hacerSuperExp',0,'p_neu_hacerSuperExp','lexer_parser.py',832),
  ('neu_hacerHiperExp -> <empty>','neu_hacerHiperExp',0,'p_neu_hacerHiperExp','lexer_parser.py',857),
  ('neu_asignacion -> <empty>','neu_asignacion',0,'p_neu_asignacion','lexer_parser.py',881),
  ('neu_lectura -> <empty>','neu_lectura',0,'p_neu_lectura','lexer_parser.py',888),
  ('neu_escritura -> <empty>','neu_escritura',0,'p_neu_escritura','lexer_parser.py',896),
  ('neu_iniciarDecision -> <empty>','neu_iniciarDecision',0,'p_neu_iniciarDecision','lexer_parser.py',902),
  ('neu_iniciarDecisionElse -> <empty>','neu_iniciarDecisionElse',0,'p_neu_iniciarDecisionElse','lexer_parser.py',910),
  ('neu_endDecision -> <empty>','neu_endDecision',0,'p_neu_endDecision','lexer_parser.py',916),
  ('neu_condicionalAntes -> <empty>','neu_condicionalAntes',0,'p_neu_condicionalAntes','lexer_parser.py',921),
  ('neu_condicionalDurante -> <empty>','neu_condicionalDurante',0,'p_neu_condicionalDurante','lexer_parser.py',925),
  ('neu_condicionalDespues -> <empty>','neu_condicionalDespues',0,'p_neu_condicionalDespues','lexer_parser.py',929),
  ('neu_addIDFor -> <empty>','neu_addIDFor',0,'p_neu_addIDFor','lexer_parser.py',935),
  ('neu_asignacionFor -> <empty>','neu_asignacionFor',0,'p_neu_asignacionFor','lexer_parser.py',949),
  ('neu_boolFor -> <empty>','neu_boolFor',0,'p_neu_boolFor','lexer_parser.py',958),
  ('neu_endCondicion -> <empty>','neu_endCondicion',0,'p_neu_endCondicion','lexer_parser.py',981),
  ('neu_vaciarPilas -> <empty>','neu_vaciarPilas',0,'p_neu_vaciarPilas','lexer_parser.py',1001),
]
