Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
Rule 2     variables -> VARIABLES variablesU
Rule 3     variables -> empty
Rule 4     variablesU -> variablesD
Rule 5     variablesU -> empty
Rule 6     variablesD -> ID neu_addVariableAStack COMA variablesD
Rule 7     variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
Rule 8     variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
Rule 9     variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
Rule 10    funciones -> funcionesU
Rule 11    funciones -> empty
Rule 12    funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
Rule 13    funcionesD -> funciones
Rule 14    funcionesD -> empty
Rule 15    tipo_funcion -> ENTERO empty
Rule 16    tipo_funcion -> FLOTANTE empty
Rule 17    tipo_funcion -> CARACTER empty
Rule 18    tipo_funcion -> VOID empty
Rule 19    tipo_var -> ENTERO empty
Rule 20    tipo_var -> FLOTANTE empty
Rule 21    tipo_var -> CARACTER empty
Rule 22    recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
Rule 23    recibir_parametros -> empty
Rule 24    recibir_parametrosD -> COMA recibir_parametros empty
Rule 25    recibir_parametrosD -> empty
Rule 26    mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty
Rule 27    mandar_parametros -> empty
Rule 28    mandar_parametrosD -> COMA mandar_parametros empty
Rule 29    mandar_parametrosD -> empty
Rule 30    bloque -> L_LLAVE bloqueU R_LLAVE empty
Rule 31    bloqueU -> estatuto bloqueD neu_vaciarPilas empty
Rule 32    bloqueU -> empty
Rule 33    bloqueD -> bloqueU empty
Rule 34    bloqueD -> empty
Rule 35    estatuto -> asignacion PUNTOYCOMA empty
Rule 36    estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty
Rule 37    estatuto -> retorno PUNTOYCOMA empty
Rule 38    estatuto -> lectura PUNTOYCOMA empty
Rule 39    estatuto -> escritura PUNTOYCOMA empty
Rule 40    estatuto -> decision empty
Rule 41    estatuto -> condicional empty
Rule 42    estatuto -> no_condicional empty
Rule 43    estatuto -> empty
Rule 44    asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 45    asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 46    asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 47    llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
Rule 48    retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
Rule 49    lectura -> LEER L_PAR ID neu_lectura R_PAR empty
Rule 50    escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty
Rule 51    escrituraD -> hiper_exp neu_escritura empty
Rule 52    escrituraD -> LETRERO neu_letrero empty
Rule 53    decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
Rule 54    decisionU -> SINO neu_iniciarDecisionElse bloque empty
Rule 55    decisionU -> empty
Rule 56    condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
Rule 57    no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
Rule 58    asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
Rule 59    operadorA -> MAS neu_addOperador empty
Rule 60    operadorA -> MENOS neu_addOperador empty
Rule 61    operadorT -> MULT neu_addOperador empty
Rule 62    operadorT -> DIV neu_addOperador empty
Rule 63    operadorL -> OR neu_addOperador empty
Rule 64    operadorL -> AND neu_addOperador empty
Rule 65    operadorR -> MENORQUE neu_addOperador empty
Rule 66    operadorR -> MAYORQUE neu_addOperador empty
Rule 67    operadorR -> MENORIGUALQUE neu_addOperador empty
Rule 68    operadorR -> MAYORIGUALQUE neu_addOperador empty
Rule 69    operadorR -> IGUALQUE neu_addOperador empty
Rule 70    operadorR -> DIFQUE neu_addOperador empty
Rule 71    hiper_exp -> super_exp neu_hacerHiperExp hiper_expU
Rule 72    hiper_expU -> operadorL hiper_exp empty
Rule 73    hiper_expU -> empty
Rule 74    super_exp -> exp neu_hacerSuperExp super_expU
Rule 75    super_expU -> operadorR super_exp empty
Rule 76    super_expU -> empty
Rule 77    exp -> termino neu_hacerExp expU
Rule 78    expU -> operadorA exp
Rule 79    expU -> empty
Rule 80    termino -> factor neu_hacerTermino terminoU
Rule 81    terminoU -> operadorT termino
Rule 82    terminoU -> empty
Rule 83    factor -> varcte empty
Rule 84    factor -> llamada neu_esExpresion empty
Rule 85    factor -> L_PAR hiper_exp R_PAR empty
Rule 86    varcte -> ID neu_addID empty
Rule 87    varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
Rule 88    varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
Rule 89    varcte -> ENTEROVAL neu_addConstanteEntero empty
Rule 90    varcte -> FLOTANTEVAL neu_addConstanteFlotante empty
Rule 91    varcte -> CARACTERVAL neu_addConstanteCaracter empty
Rule 92    empty -> <empty>
Rule 93    neu_programa -> <empty>
Rule 94    neu_endPrograma -> <empty>
Rule 95    neu_addFuncion -> <empty>
Rule 96    neu_endFuncion -> <empty>
Rule 97    neu_principal -> <empty>
Rule 98    neu_addVariable -> <empty>
Rule 99    neu_addVariableAStack -> <empty>
Rule 100   neu_addArreglo -> <empty>
Rule 101   neu_addMatriz -> <empty>
Rule 102   neu_addID -> <empty>
Rule 103   neu_fondoFalso -> <empty>
Rule 104   neu_addIDArreglo -> <empty>
Rule 105   neu_addIDMatriz -> <empty>
Rule 106   neu_addConstanteEntero -> <empty>
Rule 107   neu_addConstanteFlotante -> <empty>
Rule 108   neu_addConstanteCaracter -> <empty>
Rule 109   neu_addTermino -> <empty>
Rule 110   neu_llamada_era -> <empty>
Rule 111   neu_llamada_gosub -> <empty>
Rule 112   neu_esEstatuto -> <empty>
Rule 113   neu_esExpresion -> <empty>
Rule 114   neu_addOperador -> <empty>
Rule 115   getGMemoria -> <empty>
Rule 116   getLMemoria -> <empty>
Rule 117   getCMemoria -> <empty>
Rule 118   neu_hacerTermino -> <empty>
Rule 119   neu_hacerExp -> <empty>
Rule 120   neu_hacerSuperExp -> <empty>
Rule 121   neu_hacerHiperExp -> <empty>
Rule 122   neu_asignacion -> <empty>
Rule 123   neu_lectura -> <empty>
Rule 124   neu_escritura -> <empty>
Rule 125   neu_letrero -> <empty>
Rule 126   neu_retorno -> <empty>
Rule 127   neu_iniciarDecision -> <empty>
Rule 128   neu_iniciarDecisionElse -> <empty>
Rule 129   neu_endDecision -> <empty>
Rule 130   neu_condicionalAntes -> <empty>
Rule 131   neu_condicionalDurante -> <empty>
Rule 132   neu_condicionalDespues -> <empty>
Rule 133   neu_addIDFor -> <empty>
Rule 134   neu_asignacionFor -> <empty>
Rule 135   neu_boolFor -> <empty>
Rule 136   neu_endCondicion -> <empty>
Rule 137   neu_parametroEnviado -> <empty>
Rule 138   neu_recibirParametros -> <empty>
Rule 139   neu_paramValidacion -> <empty>
Rule 140   neu_vaciarPilas -> <empty>
Rule 141   notifError -> <empty>

Terminals, with rules where they appear

AND                  : 64
CARACTER             : 17 21
CARACTERVAL          : 91
COMA                 : 6 24 28
DESDE                : 57
DIFQUE               : 70
DIV                  : 62
DOSPUNTOS            : 7 8 9 22
ENTERO               : 15 19
ENTEROVAL            : 8 9 9 89
ENTONCES             : 53
ESCRIBIR             : 50
FLOTANTE             : 16 20
FLOTANTEVAL          : 90
FUNCION              : 12
HACER                : 56 57
HASTA                : 57
ID                   : 1 6 7 8 9 12 22 44 45 46 47 49 58 86 87 88
IGUAL                : 44 45 46 58
IGUALQUE             : 69
LEER                 : 49
LETRERO              : 52
L_CORCHETE           : 8 9 9 45 46 46 87 88 88
L_LLAVE              : 30
L_PAR                : 1 12 47 48 49 50 53 56 57 85
MAS                  : 59
MAYORIGUALQUE        : 68
MAYORQUE             : 66
MENORIGUALQUE        : 67
MENORQUE             : 65
MENOS                : 60
MIENTRAS             : 56
MULT                 : 61
OR                   : 63
PRINCIPAL            : 1
PROGRAMA             : 1
PUNTOYCOMA           : 1 7 8 9 35 36 37 38 39
REGRESA              : 48
R_CORCHETE           : 8 9 9 45 46 46 87 88 88
R_LLAVE              : 30
R_PAR                : 1 12 47 48 49 50 53 56 57 85
SI                   : 53
SINO                 : 54
VARIABLES            : 2
VOID                 : 18
error                : 

Nonterminals, with rules where they appear

asignacion           : 35
asignacionFor        : 57
bloque               : 1 12 53 54 56 57
bloqueD              : 31
bloqueU              : 30 33
condicional          : 41
decision             : 40
decisionU            : 53
empty                : 1 3 5 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 75 76 79 82 83 84 85 86 87 88 89 90 91
escritura            : 39
escrituraD           : 50
estatuto             : 31
exp                  : 74 78
expU                 : 77
factor               : 80
funciones            : 1 13
funcionesD           : 12
funcionesU           : 10
getCMemoria          : 
getGMemoria          : 
getLMemoria          : 
hiper_exp            : 26 44 45 45 46 46 46 48 51 53 56 57 58 72 85 87 88 88
hiper_expU           : 71
lectura              : 38
llamada              : 36 84
mandar_parametros    : 28 47
mandar_parametrosD   : 26
neu_addArreglo       : 8
neu_addConstanteCaracter : 91
neu_addConstanteEntero : 89
neu_addConstanteFlotante : 90
neu_addFuncion       : 12
neu_addID            : 44 86
neu_addIDArreglo     : 45 87
neu_addIDFor         : 58
neu_addIDMatriz      : 46 88
neu_addMatriz        : 9
neu_addOperador      : 44 45 46 58 59 60 61 62 63 64 65 66 67 68 69 70
neu_addTermino       : 
neu_addVariable      : 7
neu_addVariableAStack : 6
neu_asignacion       : 44 45 46
neu_asignacionFor    : 58
neu_boolFor          : 57
neu_condicionalAntes : 56
neu_condicionalDespues : 56
neu_condicionalDurante : 56
neu_endCondicion     : 57
neu_endDecision      : 53
neu_endFuncion       : 12
neu_endPrograma      : 1
neu_esEstatuto       : 36
neu_esExpresion      : 84
neu_escritura        : 51
neu_fondoFalso       : 45 46 46 87 88 88
neu_hacerExp         : 77
neu_hacerHiperExp    : 71
neu_hacerSuperExp    : 74
neu_hacerTermino     : 80
neu_iniciarDecision  : 53
neu_iniciarDecisionElse : 54
neu_lectura          : 49
neu_letrero          : 52
neu_llamada_era      : 47
neu_llamada_gosub    : 47
neu_paramValidacion  : 47
neu_parametroEnviado : 26
neu_principal        : 1
neu_programa         : 1
neu_recibirParametros : 22
neu_retorno          : 48
neu_vaciarPilas      : 31
no_condicional       : 42
notifError           : 
operadorA            : 78
operadorL            : 72
operadorR            : 75
operadorT            : 81
program              : 0
recibir_parametros   : 12 24
recibir_parametrosD  : 22
retorno              : 37
super_exp            : 71 75
super_expU           : 74
termino              : 77 81
terminoU             : 80
tipo_funcion         : 12
tipo_var             : 7 8 9 22
varcte               : 83
variables            : 1 12
variablesD           : 4 6
variablesU           : 2 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PROGRAMA        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAMA . ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAMA ID . neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (93) neu_programa -> .

    PUNTOYCOMA      reduce using rule 93 (neu_programa -> .)

    neu_programa                   shift and go to state 4

state 4

    (1) program -> PROGRAMA ID neu_programa . PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PUNTOYCOMA      shift and go to state 5


state 5

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA . variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (92) empty -> .

    VARIABLES       shift and go to state 8
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)

    variables                      shift and go to state 6
    empty                          shift and go to state 7

state 6

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables . funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (10) funciones -> . funcionesU
    (11) funciones -> . empty
    (12) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (92) empty -> .
    (15) tipo_funcion -> . ENTERO empty
    (16) tipo_funcion -> . FLOTANTE empty
    (17) tipo_funcion -> . CARACTER empty
    (18) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 92 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    funciones                      shift and go to state 9
    empty                          shift and go to state 10
    funcionesU                     shift and go to state 11
    tipo_funcion                   shift and go to state 12

state 7

    (3) variables -> empty .

    ENTERO          reduce using rule 3 (variables -> empty .)
    FLOTANTE        reduce using rule 3 (variables -> empty .)
    CARACTER        reduce using rule 3 (variables -> empty .)
    VOID            reduce using rule 3 (variables -> empty .)
    PRINCIPAL       reduce using rule 3 (variables -> empty .)
    L_LLAVE         reduce using rule 3 (variables -> empty .)


state 8

    (2) variables -> VARIABLES . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (92) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)
    L_LLAVE         reduce using rule 92 (empty -> .)

    variablesU                     shift and go to state 17
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 9

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones . PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PRINCIPAL       shift and go to state 21


state 10

    (11) funciones -> empty .

    PRINCIPAL       reduce using rule 11 (funciones -> empty .)


state 11

    (10) funciones -> funcionesU .

    PRINCIPAL       reduce using rule 10 (funciones -> funcionesU .)


state 12

    (12) funcionesU -> tipo_funcion . FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    FUNCION         shift and go to state 22


state 13

    (15) tipo_funcion -> ENTERO . empty
    (92) empty -> .

    FUNCION         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 23

state 14

    (16) tipo_funcion -> FLOTANTE . empty
    (92) empty -> .

    FUNCION         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 24

state 15

    (17) tipo_funcion -> CARACTER . empty
    (92) empty -> .

    FUNCION         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 25

state 16

    (18) tipo_funcion -> VOID . empty
    (92) empty -> .

    FUNCION         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 26

state 17

    (2) variables -> VARIABLES variablesU .

    ENTERO          reduce using rule 2 (variables -> VARIABLES variablesU .)
    FLOTANTE        reduce using rule 2 (variables -> VARIABLES variablesU .)
    CARACTER        reduce using rule 2 (variables -> VARIABLES variablesU .)
    VOID            reduce using rule 2 (variables -> VARIABLES variablesU .)
    PRINCIPAL       reduce using rule 2 (variables -> VARIABLES variablesU .)
    L_LLAVE         reduce using rule 2 (variables -> VARIABLES variablesU .)


state 18

    (4) variablesU -> variablesD .

    ENTERO          reduce using rule 4 (variablesU -> variablesD .)
    FLOTANTE        reduce using rule 4 (variablesU -> variablesD .)
    CARACTER        reduce using rule 4 (variablesU -> variablesD .)
    VOID            reduce using rule 4 (variablesU -> variablesD .)
    PRINCIPAL       reduce using rule 4 (variablesU -> variablesD .)
    L_LLAVE         reduce using rule 4 (variablesU -> variablesD .)


state 19

    (5) variablesU -> empty .

    ENTERO          reduce using rule 5 (variablesU -> empty .)
    FLOTANTE        reduce using rule 5 (variablesU -> empty .)
    CARACTER        reduce using rule 5 (variablesU -> empty .)
    VOID            reduce using rule 5 (variablesU -> empty .)
    PRINCIPAL       reduce using rule 5 (variablesU -> empty .)
    L_LLAVE         reduce using rule 5 (variablesU -> empty .)


state 20

    (6) variablesD -> ID . neu_addVariableAStack COMA variablesD
    (7) variablesD -> ID . DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> ID . L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> ID . L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (99) neu_addVariableAStack -> .

    DOSPUNTOS       shift and go to state 28
    L_CORCHETE      shift and go to state 29
    COMA            reduce using rule 99 (neu_addVariableAStack -> .)

    neu_addVariableAStack          shift and go to state 27

state 21

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL . neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (97) neu_principal -> .

    L_PAR           reduce using rule 97 (neu_principal -> .)

    neu_principal                  shift and go to state 30

state 22

    (12) funcionesU -> tipo_funcion FUNCION . ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    ID              shift and go to state 31


state 23

    (15) tipo_funcion -> ENTERO empty .

    FUNCION         reduce using rule 15 (tipo_funcion -> ENTERO empty .)


state 24

    (16) tipo_funcion -> FLOTANTE empty .

    FUNCION         reduce using rule 16 (tipo_funcion -> FLOTANTE empty .)


state 25

    (17) tipo_funcion -> CARACTER empty .

    FUNCION         reduce using rule 17 (tipo_funcion -> CARACTER empty .)


state 26

    (18) tipo_funcion -> VOID empty .

    FUNCION         reduce using rule 18 (tipo_funcion -> VOID empty .)


state 27

    (6) variablesD -> ID neu_addVariableAStack . COMA variablesD

    COMA            shift and go to state 32


state 28

    (7) variablesD -> ID DOSPUNTOS . tipo_var neu_addVariable PUNTOYCOMA variablesU
    (19) tipo_var -> . ENTERO empty
    (20) tipo_var -> . FLOTANTE empty
    (21) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 33

state 29

    (8) variablesD -> ID L_CORCHETE . ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> ID L_CORCHETE . ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    ENTEROVAL       shift and go to state 37


state 30

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal . L_PAR R_PAR bloque neu_endPrograma empty

    L_PAR           shift and go to state 38


state 31

    (12) funcionesU -> tipo_funcion FUNCION ID . neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (95) neu_addFuncion -> .

    L_PAR           reduce using rule 95 (neu_addFuncion -> .)

    neu_addFuncion                 shift and go to state 39

state 32

    (6) variablesD -> ID neu_addVariableAStack COMA . variablesD
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    ID              shift and go to state 20

    variablesD                     shift and go to state 40

state 33

    (7) variablesD -> ID DOSPUNTOS tipo_var . neu_addVariable PUNTOYCOMA variablesU
    (98) neu_addVariable -> .

    PUNTOYCOMA      reduce using rule 98 (neu_addVariable -> .)

    neu_addVariable                shift and go to state 41

state 34

    (19) tipo_var -> ENTERO . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 42

state 35

    (20) tipo_var -> FLOTANTE . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 43

state 36

    (21) tipo_var -> CARACTER . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 44

state 37

    (8) variablesD -> ID L_CORCHETE ENTEROVAL . R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> ID L_CORCHETE ENTEROVAL . R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    R_CORCHETE      shift and go to state 45


state 38

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR . R_PAR bloque neu_endPrograma empty

    R_PAR           shift and go to state 46


state 39

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion . L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    L_PAR           shift and go to state 47


state 40

    (6) variablesD -> ID neu_addVariableAStack COMA variablesD .

    ENTERO          reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    FLOTANTE        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    CARACTER        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    VOID            reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    PRINCIPAL       reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    L_LLAVE         reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)


state 41

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 48


state 42

    (19) tipo_var -> ENTERO empty .

    PUNTOYCOMA      reduce using rule 19 (tipo_var -> ENTERO empty .)
    COMA            reduce using rule 19 (tipo_var -> ENTERO empty .)
    R_PAR           reduce using rule 19 (tipo_var -> ENTERO empty .)


state 43

    (20) tipo_var -> FLOTANTE empty .

    PUNTOYCOMA      reduce using rule 20 (tipo_var -> FLOTANTE empty .)
    COMA            reduce using rule 20 (tipo_var -> FLOTANTE empty .)
    R_PAR           reduce using rule 20 (tipo_var -> FLOTANTE empty .)


state 44

    (21) tipo_var -> CARACTER empty .

    PUNTOYCOMA      reduce using rule 21 (tipo_var -> CARACTER empty .)
    COMA            reduce using rule 21 (tipo_var -> CARACTER empty .)
    R_PAR           reduce using rule 21 (tipo_var -> CARACTER empty .)


state 45

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE . DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE . L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    DOSPUNTOS       shift and go to state 50
    L_CORCHETE      shift and go to state 49


state 46

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR . bloque neu_endPrograma empty
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 51

state 47

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR . recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (22) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (23) recibir_parametros -> . empty
    (92) empty -> .

    ID              shift and go to state 53
    R_PAR           reduce using rule 92 (empty -> .)

    recibir_parametros             shift and go to state 54
    empty                          shift and go to state 55

state 48

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (92) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)
    L_LLAVE         reduce using rule 92 (empty -> .)

    variablesU                     shift and go to state 56
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 49

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE . ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    ENTEROVAL       shift and go to state 57


state 50

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS . tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (19) tipo_var -> . ENTERO empty
    (20) tipo_var -> . FLOTANTE empty
    (21) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 58

state 51

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque . neu_endPrograma empty
    (94) neu_endPrograma -> .

    $end            reduce using rule 94 (neu_endPrograma -> .)

    neu_endPrograma                shift and go to state 59

state 52

    (30) bloque -> L_LLAVE . bloqueU R_LLAVE empty
    (31) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (32) bloqueU -> . empty
    (35) estatuto -> . asignacion PUNTOYCOMA empty
    (36) estatuto -> . llamada neu_esEstatuto PUNTOYCOMA empty
    (37) estatuto -> . retorno PUNTOYCOMA empty
    (38) estatuto -> . lectura PUNTOYCOMA empty
    (39) estatuto -> . escritura PUNTOYCOMA empty
    (40) estatuto -> . decision empty
    (41) estatuto -> . condicional empty
    (42) estatuto -> . no_condicional empty
    (43) estatuto -> . empty
    (92) empty -> .
    (44) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (48) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (49) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (50) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (53) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (56) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (57) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 92 (empty -> .)
    ID              shift and go to state 71
    REGRESA         shift and go to state 72
    LEER            shift and go to state 73
    ESCRIBIR        shift and go to state 74
    SI              shift and go to state 75
    MIENTRAS        shift and go to state 76
    DESDE           shift and go to state 77

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! REGRESA         [ reduce using rule 92 (empty -> .) ]
  ! LEER            [ reduce using rule 92 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 92 (empty -> .) ]
  ! SI              [ reduce using rule 92 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 92 (empty -> .) ]
  ! DESDE           [ reduce using rule 92 (empty -> .) ]

    bloqueU                        shift and go to state 60
    empty                          shift and go to state 61
    estatuto                       shift and go to state 62
    asignacion                     shift and go to state 63
    llamada                        shift and go to state 64
    retorno                        shift and go to state 65
    lectura                        shift and go to state 66
    escritura                      shift and go to state 67
    decision                       shift and go to state 68
    condicional                    shift and go to state 69
    no_condicional                 shift and go to state 70

state 53

    (22) recibir_parametros -> ID . DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty

    DOSPUNTOS       shift and go to state 78


state 54

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros . R_PAR variables bloque neu_endFuncion funcionesD

    R_PAR           shift and go to state 79


state 55

    (23) recibir_parametros -> empty .

    R_PAR           reduce using rule 23 (recibir_parametros -> empty .)


state 56

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    VOID            reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)


state 57

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL . R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    R_CORCHETE      shift and go to state 80


state 58

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var . neu_addArreglo PUNTOYCOMA variablesU
    (100) neu_addArreglo -> .

    PUNTOYCOMA      reduce using rule 100 (neu_addArreglo -> .)

    neu_addArreglo                 shift and go to state 81

state 59

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma . empty
    (92) empty -> .

    $end            reduce using rule 92 (empty -> .)

    empty                          shift and go to state 82

state 60

    (30) bloque -> L_LLAVE bloqueU . R_LLAVE empty

    R_LLAVE         shift and go to state 83


state 61

    (32) bloqueU -> empty .
    (43) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 32 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 32 (bloqueU -> empty .)
    ID              reduce using rule 43 (estatuto -> empty .)
    REGRESA         reduce using rule 43 (estatuto -> empty .)
    LEER            reduce using rule 43 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 43 (estatuto -> empty .)
    SI              reduce using rule 43 (estatuto -> empty .)
    MIENTRAS        reduce using rule 43 (estatuto -> empty .)
    DESDE           reduce using rule 43 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 43 (estatuto -> empty .) ]


state 62

    (31) bloqueU -> estatuto . bloqueD neu_vaciarPilas empty
    (33) bloqueD -> . bloqueU empty
    (34) bloqueD -> . empty
    (31) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (32) bloqueU -> . empty
    (92) empty -> .
    (35) estatuto -> . asignacion PUNTOYCOMA empty
    (36) estatuto -> . llamada neu_esEstatuto PUNTOYCOMA empty
    (37) estatuto -> . retorno PUNTOYCOMA empty
    (38) estatuto -> . lectura PUNTOYCOMA empty
    (39) estatuto -> . escritura PUNTOYCOMA empty
    (40) estatuto -> . decision empty
    (41) estatuto -> . condicional empty
    (42) estatuto -> . no_condicional empty
    (43) estatuto -> . empty
    (44) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (48) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (49) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (50) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (53) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (56) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (57) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 92 (empty -> .)
    ID              shift and go to state 71
    REGRESA         shift and go to state 72
    LEER            shift and go to state 73
    ESCRIBIR        shift and go to state 74
    SI              shift and go to state 75
    MIENTRAS        shift and go to state 76
    DESDE           shift and go to state 77

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! REGRESA         [ reduce using rule 92 (empty -> .) ]
  ! LEER            [ reduce using rule 92 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 92 (empty -> .) ]
  ! SI              [ reduce using rule 92 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 92 (empty -> .) ]
  ! DESDE           [ reduce using rule 92 (empty -> .) ]

    estatuto                       shift and go to state 62
    bloqueD                        shift and go to state 84
    empty                          shift and go to state 85
    bloqueU                        shift and go to state 86
    asignacion                     shift and go to state 63
    llamada                        shift and go to state 64
    retorno                        shift and go to state 65
    lectura                        shift and go to state 66
    escritura                      shift and go to state 67
    decision                       shift and go to state 68
    condicional                    shift and go to state 69
    no_condicional                 shift and go to state 70

state 63

    (35) estatuto -> asignacion . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 87


state 64

    (36) estatuto -> llamada . neu_esEstatuto PUNTOYCOMA empty
    (112) neu_esEstatuto -> .

    PUNTOYCOMA      reduce using rule 112 (neu_esEstatuto -> .)

    neu_esEstatuto                 shift and go to state 88

state 65

    (37) estatuto -> retorno . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 89


state 66

    (38) estatuto -> lectura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 90


state 67

    (39) estatuto -> escritura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 91


state 68

    (40) estatuto -> decision . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 92

state 69

    (41) estatuto -> condicional . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 93

state 70

    (42) estatuto -> no_condicional . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 94

state 71

    (44) asignacion -> ID . neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) asignacion -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (47) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (102) neu_addID -> .
    (110) neu_llamada_era -> .

    L_CORCHETE      shift and go to state 96
    IGUAL           reduce using rule 102 (neu_addID -> .)
    L_PAR           reduce using rule 110 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 95
    neu_llamada_era                shift and go to state 97

state 72

    (48) retorno -> REGRESA . L_PAR hiper_exp neu_retorno R_PAR empty

    L_PAR           shift and go to state 98


state 73

    (49) lectura -> LEER . L_PAR ID neu_lectura R_PAR empty

    L_PAR           shift and go to state 99


state 74

    (50) escritura -> ESCRIBIR . L_PAR escrituraD R_PAR empty

    L_PAR           shift and go to state 100


state 75

    (53) decision -> SI . L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    L_PAR           shift and go to state 101


state 76

    (56) condicional -> MIENTRAS . L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty

    L_PAR           shift and go to state 102


state 77

    (57) no_condicional -> DESDE . L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    L_PAR           shift and go to state 103


state 78

    (22) recibir_parametros -> ID DOSPUNTOS . tipo_var neu_recibirParametros recibir_parametrosD empty
    (19) tipo_var -> . ENTERO empty
    (20) tipo_var -> . FLOTANTE empty
    (21) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 104

state 79

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR . variables bloque neu_endFuncion funcionesD
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (92) empty -> .

    VARIABLES       shift and go to state 8
    L_LLAVE         reduce using rule 92 (empty -> .)

    variables                      shift and go to state 105
    empty                          shift and go to state 7

state 80

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE . DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU

    DOSPUNTOS       shift and go to state 106


state 81

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 107


state 82

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .

    $end            reduce using rule 1 (program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .)


state 83

    (30) bloque -> L_LLAVE bloqueU R_LLAVE . empty
    (92) empty -> .

    $end            reduce using rule 92 (empty -> .)
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)
    SINO            reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 108

state 84

    (31) bloqueU -> estatuto bloqueD . neu_vaciarPilas empty
    (140) neu_vaciarPilas -> .

    R_LLAVE         reduce using rule 140 (neu_vaciarPilas -> .)

    neu_vaciarPilas                shift and go to state 109

state 85

    (34) bloqueD -> empty .
    (32) bloqueU -> empty .
    (43) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 32 (bloqueU -> empty .)
  ! reduce/reduce conflict for R_LLAVE resolved using rule 32 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 32 (bloqueU -> empty .)
    ID              reduce using rule 43 (estatuto -> empty .)
    REGRESA         reduce using rule 43 (estatuto -> empty .)
    LEER            reduce using rule 43 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 43 (estatuto -> empty .)
    SI              reduce using rule 43 (estatuto -> empty .)
    MIENTRAS        reduce using rule 43 (estatuto -> empty .)
    DESDE           reduce using rule 43 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 34 (bloqueD -> empty .) ]
  ! R_LLAVE         [ reduce using rule 43 (estatuto -> empty .) ]


state 86

    (33) bloqueD -> bloqueU . empty
    (92) empty -> .

    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 110

state 87

    (35) estatuto -> asignacion PUNTOYCOMA . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 111

state 88

    (36) estatuto -> llamada neu_esEstatuto . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 112


state 89

    (37) estatuto -> retorno PUNTOYCOMA . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 113

state 90

    (38) estatuto -> lectura PUNTOYCOMA . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 114

state 91

    (39) estatuto -> escritura PUNTOYCOMA . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 115

state 92

    (40) estatuto -> decision empty .

    ID              reduce using rule 40 (estatuto -> decision empty .)
    REGRESA         reduce using rule 40 (estatuto -> decision empty .)
    LEER            reduce using rule 40 (estatuto -> decision empty .)
    ESCRIBIR        reduce using rule 40 (estatuto -> decision empty .)
    SI              reduce using rule 40 (estatuto -> decision empty .)
    MIENTRAS        reduce using rule 40 (estatuto -> decision empty .)
    DESDE           reduce using rule 40 (estatuto -> decision empty .)
    R_LLAVE         reduce using rule 40 (estatuto -> decision empty .)


state 93

    (41) estatuto -> condicional empty .

    ID              reduce using rule 41 (estatuto -> condicional empty .)
    REGRESA         reduce using rule 41 (estatuto -> condicional empty .)
    LEER            reduce using rule 41 (estatuto -> condicional empty .)
    ESCRIBIR        reduce using rule 41 (estatuto -> condicional empty .)
    SI              reduce using rule 41 (estatuto -> condicional empty .)
    MIENTRAS        reduce using rule 41 (estatuto -> condicional empty .)
    DESDE           reduce using rule 41 (estatuto -> condicional empty .)
    R_LLAVE         reduce using rule 41 (estatuto -> condicional empty .)


state 94

    (42) estatuto -> no_condicional empty .

    ID              reduce using rule 42 (estatuto -> no_condicional empty .)
    REGRESA         reduce using rule 42 (estatuto -> no_condicional empty .)
    LEER            reduce using rule 42 (estatuto -> no_condicional empty .)
    ESCRIBIR        reduce using rule 42 (estatuto -> no_condicional empty .)
    SI              reduce using rule 42 (estatuto -> no_condicional empty .)
    MIENTRAS        reduce using rule 42 (estatuto -> no_condicional empty .)
    DESDE           reduce using rule 42 (estatuto -> no_condicional empty .)
    R_LLAVE         reduce using rule 42 (estatuto -> no_condicional empty .)


state 95

    (44) asignacion -> ID neu_addID . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 116


state 96

    (45) asignacion -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (103) neu_fondoFalso -> .

    L_PAR           reduce using rule 103 (neu_fondoFalso -> .)
    ID              reduce using rule 103 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 103 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 103 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 103 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 117

state 97

    (47) llamada -> ID neu_llamada_era . L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 118


state 98

    (48) retorno -> REGRESA L_PAR . hiper_exp neu_retorno R_PAR empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 120
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 99

    (49) lectura -> LEER L_PAR . ID neu_lectura R_PAR empty

    ID              shift and go to state 131


state 100

    (50) escritura -> ESCRIBIR L_PAR . escrituraD R_PAR empty
    (51) escrituraD -> . hiper_exp neu_escritura empty
    (52) escrituraD -> . LETRERO neu_letrero empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    LETRERO         shift and go to state 134
    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    escrituraD                     shift and go to state 132
    hiper_exp                      shift and go to state 133
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 101

    (53) decision -> SI L_PAR . hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 135
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 102

    (56) condicional -> MIENTRAS L_PAR . neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (130) neu_condicionalAntes -> .

    L_PAR           reduce using rule 130 (neu_condicionalAntes -> .)
    ID              reduce using rule 130 (neu_condicionalAntes -> .)
    ENTEROVAL       reduce using rule 130 (neu_condicionalAntes -> .)
    FLOTANTEVAL     reduce using rule 130 (neu_condicionalAntes -> .)
    CARACTERVAL     reduce using rule 130 (neu_condicionalAntes -> .)

    neu_condicionalAntes           shift and go to state 136

state 103

    (57) no_condicional -> DESDE L_PAR . asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (58) asignacionFor -> . ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    ID              shift and go to state 138

    asignacionFor                  shift and go to state 137

state 104

    (22) recibir_parametros -> ID DOSPUNTOS tipo_var . neu_recibirParametros recibir_parametrosD empty
    (138) neu_recibirParametros -> .

    COMA            reduce using rule 138 (neu_recibirParametros -> .)
    R_PAR           reduce using rule 138 (neu_recibirParametros -> .)

    neu_recibirParametros          shift and go to state 139

state 105

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables . bloque neu_endFuncion funcionesD
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 140

state 106

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS . tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (19) tipo_var -> . ENTERO empty
    (20) tipo_var -> . FLOTANTE empty
    (21) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 141

state 107

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (92) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)
    L_LLAVE         reduce using rule 92 (empty -> .)

    variablesU                     shift and go to state 142
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 108

    (30) bloque -> L_LLAVE bloqueU R_LLAVE empty .

    $end            reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ENTERO          reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    FLOTANTE        reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    CARACTER        reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    VOID            reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PRINCIPAL       reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SINO            reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ID              reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    REGRESA         reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    LEER            reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ESCRIBIR        reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SI              reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    MIENTRAS        reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    DESDE           reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    R_LLAVE         reduce using rule 30 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)


state 109

    (31) bloqueU -> estatuto bloqueD neu_vaciarPilas . empty
    (92) empty -> .

    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 143

state 110

    (33) bloqueD -> bloqueU empty .

    R_LLAVE         reduce using rule 33 (bloqueD -> bloqueU empty .)


state 111

    (35) estatuto -> asignacion PUNTOYCOMA empty .

    ID              reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    REGRESA         reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    LEER            reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    SI              reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    DESDE           reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 35 (estatuto -> asignacion PUNTOYCOMA empty .)


state 112

    (36) estatuto -> llamada neu_esEstatuto PUNTOYCOMA . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 144

state 113

    (37) estatuto -> retorno PUNTOYCOMA empty .

    ID              reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    REGRESA         reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    LEER            reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    SI              reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    DESDE           reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 37 (estatuto -> retorno PUNTOYCOMA empty .)


state 114

    (38) estatuto -> lectura PUNTOYCOMA empty .

    ID              reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    LEER            reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    SI              reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    DESDE           reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 38 (estatuto -> lectura PUNTOYCOMA empty .)


state 115

    (39) estatuto -> escritura PUNTOYCOMA empty .

    ID              reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    LEER            reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    SI              reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    DESDE           reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 39 (estatuto -> escritura PUNTOYCOMA empty .)


state 116

    (44) asignacion -> ID neu_addID IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 145

state 117

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 146
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 118

    (47) llamada -> ID neu_llamada_era L_PAR . mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (26) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (27) mandar_parametros -> . empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (92) empty -> .
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 92 (empty -> .)
    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    mandar_parametros              shift and go to state 147
    empty                          shift and go to state 148
    hiper_exp                      shift and go to state 149
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 119

    (85) factor -> L_PAR . hiper_exp R_PAR empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 150
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 120

    (48) retorno -> REGRESA L_PAR hiper_exp . neu_retorno R_PAR empty
    (126) neu_retorno -> .

    R_PAR           reduce using rule 126 (neu_retorno -> .)

    neu_retorno                    shift and go to state 151

state 121

    (71) hiper_exp -> super_exp . neu_hacerHiperExp hiper_expU
    (121) neu_hacerHiperExp -> .

    OR              reduce using rule 121 (neu_hacerHiperExp -> .)
    AND             reduce using rule 121 (neu_hacerHiperExp -> .)
    R_PAR           reduce using rule 121 (neu_hacerHiperExp -> .)
    R_CORCHETE      reduce using rule 121 (neu_hacerHiperExp -> .)
    COMA            reduce using rule 121 (neu_hacerHiperExp -> .)
    PUNTOYCOMA      reduce using rule 121 (neu_hacerHiperExp -> .)
    HACER           reduce using rule 121 (neu_hacerHiperExp -> .)

    neu_hacerHiperExp              shift and go to state 152

state 122

    (74) super_exp -> exp . neu_hacerSuperExp super_expU
    (120) neu_hacerSuperExp -> .

    MENORQUE        reduce using rule 120 (neu_hacerSuperExp -> .)
    MAYORQUE        reduce using rule 120 (neu_hacerSuperExp -> .)
    MENORIGUALQUE   reduce using rule 120 (neu_hacerSuperExp -> .)
    MAYORIGUALQUE   reduce using rule 120 (neu_hacerSuperExp -> .)
    IGUALQUE        reduce using rule 120 (neu_hacerSuperExp -> .)
    DIFQUE          reduce using rule 120 (neu_hacerSuperExp -> .)
    OR              reduce using rule 120 (neu_hacerSuperExp -> .)
    AND             reduce using rule 120 (neu_hacerSuperExp -> .)
    R_PAR           reduce using rule 120 (neu_hacerSuperExp -> .)
    R_CORCHETE      reduce using rule 120 (neu_hacerSuperExp -> .)
    COMA            reduce using rule 120 (neu_hacerSuperExp -> .)
    PUNTOYCOMA      reduce using rule 120 (neu_hacerSuperExp -> .)
    HACER           reduce using rule 120 (neu_hacerSuperExp -> .)

    neu_hacerSuperExp              shift and go to state 153

state 123

    (77) exp -> termino . neu_hacerExp expU
    (119) neu_hacerExp -> .

    MAS             reduce using rule 119 (neu_hacerExp -> .)
    MENOS           reduce using rule 119 (neu_hacerExp -> .)
    MENORQUE        reduce using rule 119 (neu_hacerExp -> .)
    MAYORQUE        reduce using rule 119 (neu_hacerExp -> .)
    MENORIGUALQUE   reduce using rule 119 (neu_hacerExp -> .)
    MAYORIGUALQUE   reduce using rule 119 (neu_hacerExp -> .)
    IGUALQUE        reduce using rule 119 (neu_hacerExp -> .)
    DIFQUE          reduce using rule 119 (neu_hacerExp -> .)
    OR              reduce using rule 119 (neu_hacerExp -> .)
    AND             reduce using rule 119 (neu_hacerExp -> .)
    R_PAR           reduce using rule 119 (neu_hacerExp -> .)
    R_CORCHETE      reduce using rule 119 (neu_hacerExp -> .)
    COMA            reduce using rule 119 (neu_hacerExp -> .)
    PUNTOYCOMA      reduce using rule 119 (neu_hacerExp -> .)
    HACER           reduce using rule 119 (neu_hacerExp -> .)

    neu_hacerExp                   shift and go to state 154

state 124

    (80) termino -> factor . neu_hacerTermino terminoU
    (118) neu_hacerTermino -> .

    MULT            reduce using rule 118 (neu_hacerTermino -> .)
    DIV             reduce using rule 118 (neu_hacerTermino -> .)
    MAS             reduce using rule 118 (neu_hacerTermino -> .)
    MENOS           reduce using rule 118 (neu_hacerTermino -> .)
    MENORQUE        reduce using rule 118 (neu_hacerTermino -> .)
    MAYORQUE        reduce using rule 118 (neu_hacerTermino -> .)
    MENORIGUALQUE   reduce using rule 118 (neu_hacerTermino -> .)
    MAYORIGUALQUE   reduce using rule 118 (neu_hacerTermino -> .)
    IGUALQUE        reduce using rule 118 (neu_hacerTermino -> .)
    DIFQUE          reduce using rule 118 (neu_hacerTermino -> .)
    OR              reduce using rule 118 (neu_hacerTermino -> .)
    AND             reduce using rule 118 (neu_hacerTermino -> .)
    R_PAR           reduce using rule 118 (neu_hacerTermino -> .)
    R_CORCHETE      reduce using rule 118 (neu_hacerTermino -> .)
    COMA            reduce using rule 118 (neu_hacerTermino -> .)
    PUNTOYCOMA      reduce using rule 118 (neu_hacerTermino -> .)
    HACER           reduce using rule 118 (neu_hacerTermino -> .)

    neu_hacerTermino               shift and go to state 155

state 125

    (83) factor -> varcte . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 156

state 126

    (84) factor -> llamada . neu_esExpresion empty
    (113) neu_esExpresion -> .

    MULT            reduce using rule 113 (neu_esExpresion -> .)
    DIV             reduce using rule 113 (neu_esExpresion -> .)
    MAS             reduce using rule 113 (neu_esExpresion -> .)
    MENOS           reduce using rule 113 (neu_esExpresion -> .)
    MENORQUE        reduce using rule 113 (neu_esExpresion -> .)
    MAYORQUE        reduce using rule 113 (neu_esExpresion -> .)
    MENORIGUALQUE   reduce using rule 113 (neu_esExpresion -> .)
    MAYORIGUALQUE   reduce using rule 113 (neu_esExpresion -> .)
    IGUALQUE        reduce using rule 113 (neu_esExpresion -> .)
    DIFQUE          reduce using rule 113 (neu_esExpresion -> .)
    OR              reduce using rule 113 (neu_esExpresion -> .)
    AND             reduce using rule 113 (neu_esExpresion -> .)
    R_PAR           reduce using rule 113 (neu_esExpresion -> .)
    R_CORCHETE      reduce using rule 113 (neu_esExpresion -> .)
    COMA            reduce using rule 113 (neu_esExpresion -> .)
    PUNTOYCOMA      reduce using rule 113 (neu_esExpresion -> .)
    HACER           reduce using rule 113 (neu_esExpresion -> .)

    neu_esExpresion                shift and go to state 157

state 127

    (86) varcte -> ID . neu_addID empty
    (87) varcte -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (47) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (102) neu_addID -> .
    (110) neu_llamada_era -> .

    L_CORCHETE      shift and go to state 159
    MULT            reduce using rule 102 (neu_addID -> .)
    DIV             reduce using rule 102 (neu_addID -> .)
    MAS             reduce using rule 102 (neu_addID -> .)
    MENOS           reduce using rule 102 (neu_addID -> .)
    MENORQUE        reduce using rule 102 (neu_addID -> .)
    MAYORQUE        reduce using rule 102 (neu_addID -> .)
    MENORIGUALQUE   reduce using rule 102 (neu_addID -> .)
    MAYORIGUALQUE   reduce using rule 102 (neu_addID -> .)
    IGUALQUE        reduce using rule 102 (neu_addID -> .)
    DIFQUE          reduce using rule 102 (neu_addID -> .)
    OR              reduce using rule 102 (neu_addID -> .)
    AND             reduce using rule 102 (neu_addID -> .)
    R_PAR           reduce using rule 102 (neu_addID -> .)
    R_CORCHETE      reduce using rule 102 (neu_addID -> .)
    COMA            reduce using rule 102 (neu_addID -> .)
    PUNTOYCOMA      reduce using rule 102 (neu_addID -> .)
    HACER           reduce using rule 102 (neu_addID -> .)
    L_PAR           reduce using rule 110 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 158
    neu_llamada_era                shift and go to state 97

state 128

    (89) varcte -> ENTEROVAL . neu_addConstanteEntero empty
    (106) neu_addConstanteEntero -> .

    MULT            reduce using rule 106 (neu_addConstanteEntero -> .)
    DIV             reduce using rule 106 (neu_addConstanteEntero -> .)
    MAS             reduce using rule 106 (neu_addConstanteEntero -> .)
    MENOS           reduce using rule 106 (neu_addConstanteEntero -> .)
    MENORQUE        reduce using rule 106 (neu_addConstanteEntero -> .)
    MAYORQUE        reduce using rule 106 (neu_addConstanteEntero -> .)
    MENORIGUALQUE   reduce using rule 106 (neu_addConstanteEntero -> .)
    MAYORIGUALQUE   reduce using rule 106 (neu_addConstanteEntero -> .)
    IGUALQUE        reduce using rule 106 (neu_addConstanteEntero -> .)
    DIFQUE          reduce using rule 106 (neu_addConstanteEntero -> .)
    OR              reduce using rule 106 (neu_addConstanteEntero -> .)
    AND             reduce using rule 106 (neu_addConstanteEntero -> .)
    R_PAR           reduce using rule 106 (neu_addConstanteEntero -> .)
    R_CORCHETE      reduce using rule 106 (neu_addConstanteEntero -> .)
    COMA            reduce using rule 106 (neu_addConstanteEntero -> .)
    PUNTOYCOMA      reduce using rule 106 (neu_addConstanteEntero -> .)
    HACER           reduce using rule 106 (neu_addConstanteEntero -> .)

    neu_addConstanteEntero         shift and go to state 160

state 129

    (90) varcte -> FLOTANTEVAL . neu_addConstanteFlotante empty
    (107) neu_addConstanteFlotante -> .

    MULT            reduce using rule 107 (neu_addConstanteFlotante -> .)
    DIV             reduce using rule 107 (neu_addConstanteFlotante -> .)
    MAS             reduce using rule 107 (neu_addConstanteFlotante -> .)
    MENOS           reduce using rule 107 (neu_addConstanteFlotante -> .)
    MENORQUE        reduce using rule 107 (neu_addConstanteFlotante -> .)
    MAYORQUE        reduce using rule 107 (neu_addConstanteFlotante -> .)
    MENORIGUALQUE   reduce using rule 107 (neu_addConstanteFlotante -> .)
    MAYORIGUALQUE   reduce using rule 107 (neu_addConstanteFlotante -> .)
    IGUALQUE        reduce using rule 107 (neu_addConstanteFlotante -> .)
    DIFQUE          reduce using rule 107 (neu_addConstanteFlotante -> .)
    OR              reduce using rule 107 (neu_addConstanteFlotante -> .)
    AND             reduce using rule 107 (neu_addConstanteFlotante -> .)
    R_PAR           reduce using rule 107 (neu_addConstanteFlotante -> .)
    R_CORCHETE      reduce using rule 107 (neu_addConstanteFlotante -> .)
    COMA            reduce using rule 107 (neu_addConstanteFlotante -> .)
    PUNTOYCOMA      reduce using rule 107 (neu_addConstanteFlotante -> .)
    HACER           reduce using rule 107 (neu_addConstanteFlotante -> .)

    neu_addConstanteFlotante       shift and go to state 161

state 130

    (91) varcte -> CARACTERVAL . neu_addConstanteCaracter empty
    (108) neu_addConstanteCaracter -> .

    MULT            reduce using rule 108 (neu_addConstanteCaracter -> .)
    DIV             reduce using rule 108 (neu_addConstanteCaracter -> .)
    MAS             reduce using rule 108 (neu_addConstanteCaracter -> .)
    MENOS           reduce using rule 108 (neu_addConstanteCaracter -> .)
    MENORQUE        reduce using rule 108 (neu_addConstanteCaracter -> .)
    MAYORQUE        reduce using rule 108 (neu_addConstanteCaracter -> .)
    MENORIGUALQUE   reduce using rule 108 (neu_addConstanteCaracter -> .)
    MAYORIGUALQUE   reduce using rule 108 (neu_addConstanteCaracter -> .)
    IGUALQUE        reduce using rule 108 (neu_addConstanteCaracter -> .)
    DIFQUE          reduce using rule 108 (neu_addConstanteCaracter -> .)
    OR              reduce using rule 108 (neu_addConstanteCaracter -> .)
    AND             reduce using rule 108 (neu_addConstanteCaracter -> .)
    R_PAR           reduce using rule 108 (neu_addConstanteCaracter -> .)
    R_CORCHETE      reduce using rule 108 (neu_addConstanteCaracter -> .)
    COMA            reduce using rule 108 (neu_addConstanteCaracter -> .)
    PUNTOYCOMA      reduce using rule 108 (neu_addConstanteCaracter -> .)
    HACER           reduce using rule 108 (neu_addConstanteCaracter -> .)

    neu_addConstanteCaracter       shift and go to state 162

state 131

    (49) lectura -> LEER L_PAR ID . neu_lectura R_PAR empty
    (123) neu_lectura -> .

    R_PAR           reduce using rule 123 (neu_lectura -> .)

    neu_lectura                    shift and go to state 163

state 132

    (50) escritura -> ESCRIBIR L_PAR escrituraD . R_PAR empty

    R_PAR           shift and go to state 164


state 133

    (51) escrituraD -> hiper_exp . neu_escritura empty
    (124) neu_escritura -> .

    R_PAR           reduce using rule 124 (neu_escritura -> .)

    neu_escritura                  shift and go to state 165

state 134

    (52) escrituraD -> LETRERO . neu_letrero empty
    (125) neu_letrero -> .

    R_PAR           reduce using rule 125 (neu_letrero -> .)

    neu_letrero                    shift and go to state 166

state 135

    (53) decision -> SI L_PAR hiper_exp . R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    R_PAR           shift and go to state 167


state 136

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes . hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 168
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 137

    (57) no_condicional -> DESDE L_PAR asignacionFor . R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    R_PAR           shift and go to state 169


state 138

    (58) asignacionFor -> ID . neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
    (133) neu_addIDFor -> .

    IGUAL           reduce using rule 133 (neu_addIDFor -> .)

    neu_addIDFor                   shift and go to state 170

state 139

    (22) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros . recibir_parametrosD empty
    (24) recibir_parametrosD -> . COMA recibir_parametros empty
    (25) recibir_parametrosD -> . empty
    (92) empty -> .

    COMA            shift and go to state 173
    R_PAR           reduce using rule 92 (empty -> .)

    recibir_parametrosD            shift and go to state 171
    empty                          shift and go to state 172

state 140

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque . neu_endFuncion funcionesD
    (96) neu_endFuncion -> .

    ENTERO          reduce using rule 96 (neu_endFuncion -> .)
    FLOTANTE        reduce using rule 96 (neu_endFuncion -> .)
    CARACTER        reduce using rule 96 (neu_endFuncion -> .)
    VOID            reduce using rule 96 (neu_endFuncion -> .)
    PRINCIPAL       reduce using rule 96 (neu_endFuncion -> .)

    neu_endFuncion                 shift and go to state 174

state 141

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var . neu_addMatriz PUNTOYCOMA variablesU
    (101) neu_addMatriz -> .

    PUNTOYCOMA      reduce using rule 101 (neu_addMatriz -> .)

    neu_addMatriz                  shift and go to state 175

state 142

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    VOID            reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)


state 143

    (31) bloqueU -> estatuto bloqueD neu_vaciarPilas empty .

    R_LLAVE         reduce using rule 31 (bloqueU -> estatuto bloqueD neu_vaciarPilas empty .)


state 144

    (36) estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .

    ID              reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    REGRESA         reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    LEER            reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    SI              reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    DESDE           reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 36 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)


state 145

    (44) asignacion -> ID neu_addID IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 176
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 146

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty

    R_CORCHETE      shift and go to state 177


state 147

    (47) llamada -> ID neu_llamada_era L_PAR mandar_parametros . neu_paramValidacion R_PAR neu_llamada_gosub empty
    (139) neu_paramValidacion -> .

    R_PAR           reduce using rule 139 (neu_paramValidacion -> .)

    neu_paramValidacion            shift and go to state 178

state 148

    (27) mandar_parametros -> empty .

    R_PAR           reduce using rule 27 (mandar_parametros -> empty .)


state 149

    (26) mandar_parametros -> hiper_exp . neu_parametroEnviado mandar_parametrosD empty
    (137) neu_parametroEnviado -> .

    COMA            reduce using rule 137 (neu_parametroEnviado -> .)
    R_PAR           reduce using rule 137 (neu_parametroEnviado -> .)

    neu_parametroEnviado           shift and go to state 179

state 150

    (85) factor -> L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 180


state 151

    (48) retorno -> REGRESA L_PAR hiper_exp neu_retorno . R_PAR empty

    R_PAR           shift and go to state 181


state 152

    (71) hiper_exp -> super_exp neu_hacerHiperExp . hiper_expU
    (72) hiper_expU -> . operadorL hiper_exp empty
    (73) hiper_expU -> . empty
    (63) operadorL -> . OR neu_addOperador empty
    (64) operadorL -> . AND neu_addOperador empty
    (92) empty -> .

    OR              shift and go to state 185
    AND             shift and go to state 186
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    hiper_expU                     shift and go to state 182
    operadorL                      shift and go to state 183
    empty                          shift and go to state 184

state 153

    (74) super_exp -> exp neu_hacerSuperExp . super_expU
    (75) super_expU -> . operadorR super_exp empty
    (76) super_expU -> . empty
    (65) operadorR -> . MENORQUE neu_addOperador empty
    (66) operadorR -> . MAYORQUE neu_addOperador empty
    (67) operadorR -> . MENORIGUALQUE neu_addOperador empty
    (68) operadorR -> . MAYORIGUALQUE neu_addOperador empty
    (69) operadorR -> . IGUALQUE neu_addOperador empty
    (70) operadorR -> . DIFQUE neu_addOperador empty
    (92) empty -> .

    MENORQUE        shift and go to state 190
    MAYORQUE        shift and go to state 191
    MENORIGUALQUE   shift and go to state 192
    MAYORIGUALQUE   shift and go to state 193
    IGUALQUE        shift and go to state 194
    DIFQUE          shift and go to state 195
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    super_expU                     shift and go to state 187
    operadorR                      shift and go to state 188
    empty                          shift and go to state 189

state 154

    (77) exp -> termino neu_hacerExp . expU
    (78) expU -> . operadorA exp
    (79) expU -> . empty
    (59) operadorA -> . MAS neu_addOperador empty
    (60) operadorA -> . MENOS neu_addOperador empty
    (92) empty -> .

    MAS             shift and go to state 199
    MENOS           shift and go to state 200
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    expU                           shift and go to state 196
    operadorA                      shift and go to state 197
    empty                          shift and go to state 198

state 155

    (80) termino -> factor neu_hacerTermino . terminoU
    (81) terminoU -> . operadorT termino
    (82) terminoU -> . empty
    (61) operadorT -> . MULT neu_addOperador empty
    (62) operadorT -> . DIV neu_addOperador empty
    (92) empty -> .

    MULT            shift and go to state 204
    DIV             shift and go to state 205
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    terminoU                       shift and go to state 201
    operadorT                      shift and go to state 202
    empty                          shift and go to state 203

state 156

    (83) factor -> varcte empty .

    MULT            reduce using rule 83 (factor -> varcte empty .)
    DIV             reduce using rule 83 (factor -> varcte empty .)
    MAS             reduce using rule 83 (factor -> varcte empty .)
    MENOS           reduce using rule 83 (factor -> varcte empty .)
    MENORQUE        reduce using rule 83 (factor -> varcte empty .)
    MAYORQUE        reduce using rule 83 (factor -> varcte empty .)
    MENORIGUALQUE   reduce using rule 83 (factor -> varcte empty .)
    MAYORIGUALQUE   reduce using rule 83 (factor -> varcte empty .)
    IGUALQUE        reduce using rule 83 (factor -> varcte empty .)
    DIFQUE          reduce using rule 83 (factor -> varcte empty .)
    OR              reduce using rule 83 (factor -> varcte empty .)
    AND             reduce using rule 83 (factor -> varcte empty .)
    R_PAR           reduce using rule 83 (factor -> varcte empty .)
    R_CORCHETE      reduce using rule 83 (factor -> varcte empty .)
    COMA            reduce using rule 83 (factor -> varcte empty .)
    PUNTOYCOMA      reduce using rule 83 (factor -> varcte empty .)
    HACER           reduce using rule 83 (factor -> varcte empty .)


state 157

    (84) factor -> llamada neu_esExpresion . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 206

state 158

    (86) varcte -> ID neu_addID . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 207

state 159

    (87) varcte -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (103) neu_fondoFalso -> .

    L_PAR           reduce using rule 103 (neu_fondoFalso -> .)
    ID              reduce using rule 103 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 103 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 103 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 103 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 208

state 160

    (89) varcte -> ENTEROVAL neu_addConstanteEntero . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 209

state 161

    (90) varcte -> FLOTANTEVAL neu_addConstanteFlotante . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 210

state 162

    (91) varcte -> CARACTERVAL neu_addConstanteCaracter . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 211

state 163

    (49) lectura -> LEER L_PAR ID neu_lectura . R_PAR empty

    R_PAR           shift and go to state 212


state 164

    (50) escritura -> ESCRIBIR L_PAR escrituraD R_PAR . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 213

state 165

    (51) escrituraD -> hiper_exp neu_escritura . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 214

state 166

    (52) escrituraD -> LETRERO neu_letrero . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 215

state 167

    (53) decision -> SI L_PAR hiper_exp R_PAR . neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (127) neu_iniciarDecision -> .

    ENTONCES        reduce using rule 127 (neu_iniciarDecision -> .)

    neu_iniciarDecision            shift and go to state 216

state 168

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp . neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (131) neu_condicionalDurante -> .

    R_PAR           reduce using rule 131 (neu_condicionalDurante -> .)

    neu_condicionalDurante         shift and go to state 217

state 169

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR . HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    HASTA           shift and go to state 218


state 170

    (58) asignacionFor -> ID neu_addIDFor . IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    IGUAL           shift and go to state 219


state 171

    (22) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 220

state 172

    (25) recibir_parametrosD -> empty .

    R_PAR           reduce using rule 25 (recibir_parametrosD -> empty .)


state 173

    (24) recibir_parametrosD -> COMA . recibir_parametros empty
    (22) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (23) recibir_parametros -> . empty
    (92) empty -> .

    ID              shift and go to state 53
    R_PAR           reduce using rule 92 (empty -> .)

    recibir_parametros             shift and go to state 221
    empty                          shift and go to state 55

state 174

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion . funcionesD
    (13) funcionesD -> . funciones
    (14) funcionesD -> . empty
    (10) funciones -> . funcionesU
    (11) funciones -> . empty
    (92) empty -> .
    (12) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (15) tipo_funcion -> . ENTERO empty
    (16) tipo_funcion -> . FLOTANTE empty
    (17) tipo_funcion -> . CARACTER empty
    (18) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 92 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    tipo_funcion                   shift and go to state 12
    funcionesD                     shift and go to state 222
    funciones                      shift and go to state 223
    empty                          shift and go to state 224
    funcionesU                     shift and go to state 11

state 175

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 225


state 176

    (44) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (122) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 122 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 226

state 177

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (104) neu_addIDArreglo -> .

    L_CORCHETE      shift and go to state 227
    IGUAL           reduce using rule 104 (neu_addIDArreglo -> .)

    neu_addIDArreglo               shift and go to state 228

state 178

    (47) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion . R_PAR neu_llamada_gosub empty

    R_PAR           shift and go to state 229


state 179

    (26) mandar_parametros -> hiper_exp neu_parametroEnviado . mandar_parametrosD empty
    (28) mandar_parametrosD -> . COMA mandar_parametros empty
    (29) mandar_parametrosD -> . empty
    (92) empty -> .

    COMA            shift and go to state 232
    R_PAR           reduce using rule 92 (empty -> .)

    mandar_parametrosD             shift and go to state 230
    empty                          shift and go to state 231

state 180

    (85) factor -> L_PAR hiper_exp R_PAR . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 233

state 181

    (48) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 234

state 182

    (71) hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .

    R_PAR           reduce using rule 71 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    R_CORCHETE      reduce using rule 71 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    COMA            reduce using rule 71 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    PUNTOYCOMA      reduce using rule 71 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    HACER           reduce using rule 71 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)


state 183

    (72) hiper_expU -> operadorL . hiper_exp empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 235
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 184

    (73) hiper_expU -> empty .

    R_PAR           reduce using rule 73 (hiper_expU -> empty .)
    R_CORCHETE      reduce using rule 73 (hiper_expU -> empty .)
    COMA            reduce using rule 73 (hiper_expU -> empty .)
    PUNTOYCOMA      reduce using rule 73 (hiper_expU -> empty .)
    HACER           reduce using rule 73 (hiper_expU -> empty .)


state 185

    (63) operadorL -> OR . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 236

state 186

    (64) operadorL -> AND . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 237

state 187

    (74) super_exp -> exp neu_hacerSuperExp super_expU .

    OR              reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    AND             reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_PAR           reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_CORCHETE      reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    COMA            reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    PUNTOYCOMA      reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)
    HACER           reduce using rule 74 (super_exp -> exp neu_hacerSuperExp super_expU .)


state 188

    (75) super_expU -> operadorR . super_exp empty
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    super_exp                      shift and go to state 238
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 189

    (76) super_expU -> empty .

    OR              reduce using rule 76 (super_expU -> empty .)
    AND             reduce using rule 76 (super_expU -> empty .)
    R_PAR           reduce using rule 76 (super_expU -> empty .)
    R_CORCHETE      reduce using rule 76 (super_expU -> empty .)
    COMA            reduce using rule 76 (super_expU -> empty .)
    PUNTOYCOMA      reduce using rule 76 (super_expU -> empty .)
    HACER           reduce using rule 76 (super_expU -> empty .)


state 190

    (65) operadorR -> MENORQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 239

state 191

    (66) operadorR -> MAYORQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 240

state 192

    (67) operadorR -> MENORIGUALQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 241

state 193

    (68) operadorR -> MAYORIGUALQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 242

state 194

    (69) operadorR -> IGUALQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 243

state 195

    (70) operadorR -> DIFQUE . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 244

state 196

    (77) exp -> termino neu_hacerExp expU .

    MENORQUE        reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    MAYORQUE        reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    MENORIGUALQUE   reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    MAYORIGUALQUE   reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    IGUALQUE        reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    DIFQUE          reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    OR              reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    AND             reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    R_PAR           reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    R_CORCHETE      reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    COMA            reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    PUNTOYCOMA      reduce using rule 77 (exp -> termino neu_hacerExp expU .)
    HACER           reduce using rule 77 (exp -> termino neu_hacerExp expU .)


state 197

    (78) expU -> operadorA . exp
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    exp                            shift and go to state 245
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 198

    (79) expU -> empty .

    MENORQUE        reduce using rule 79 (expU -> empty .)
    MAYORQUE        reduce using rule 79 (expU -> empty .)
    MENORIGUALQUE   reduce using rule 79 (expU -> empty .)
    MAYORIGUALQUE   reduce using rule 79 (expU -> empty .)
    IGUALQUE        reduce using rule 79 (expU -> empty .)
    DIFQUE          reduce using rule 79 (expU -> empty .)
    OR              reduce using rule 79 (expU -> empty .)
    AND             reduce using rule 79 (expU -> empty .)
    R_PAR           reduce using rule 79 (expU -> empty .)
    R_CORCHETE      reduce using rule 79 (expU -> empty .)
    COMA            reduce using rule 79 (expU -> empty .)
    PUNTOYCOMA      reduce using rule 79 (expU -> empty .)
    HACER           reduce using rule 79 (expU -> empty .)


state 199

    (59) operadorA -> MAS . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 246

state 200

    (60) operadorA -> MENOS . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 247

state 201

    (80) termino -> factor neu_hacerTermino terminoU .

    MAS             reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    MENOS           reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    MENORQUE        reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    MAYORQUE        reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    MENORIGUALQUE   reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    MAYORIGUALQUE   reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    IGUALQUE        reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    DIFQUE          reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    OR              reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    AND             reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    R_PAR           reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    R_CORCHETE      reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    COMA            reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    PUNTOYCOMA      reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)
    HACER           reduce using rule 80 (termino -> factor neu_hacerTermino terminoU .)


state 202

    (81) terminoU -> operadorT . termino
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    termino                        shift and go to state 248
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 203

    (82) terminoU -> empty .

    MAS             reduce using rule 82 (terminoU -> empty .)
    MENOS           reduce using rule 82 (terminoU -> empty .)
    MENORQUE        reduce using rule 82 (terminoU -> empty .)
    MAYORQUE        reduce using rule 82 (terminoU -> empty .)
    MENORIGUALQUE   reduce using rule 82 (terminoU -> empty .)
    MAYORIGUALQUE   reduce using rule 82 (terminoU -> empty .)
    IGUALQUE        reduce using rule 82 (terminoU -> empty .)
    DIFQUE          reduce using rule 82 (terminoU -> empty .)
    OR              reduce using rule 82 (terminoU -> empty .)
    AND             reduce using rule 82 (terminoU -> empty .)
    R_PAR           reduce using rule 82 (terminoU -> empty .)
    R_CORCHETE      reduce using rule 82 (terminoU -> empty .)
    COMA            reduce using rule 82 (terminoU -> empty .)
    PUNTOYCOMA      reduce using rule 82 (terminoU -> empty .)
    HACER           reduce using rule 82 (terminoU -> empty .)


state 204

    (61) operadorT -> MULT . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 249

state 205

    (62) operadorT -> DIV . neu_addOperador empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 250

state 206

    (84) factor -> llamada neu_esExpresion empty .

    MULT            reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    DIV             reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MAS             reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MENOS           reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MENORQUE        reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MAYORQUE        reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MENORIGUALQUE   reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    MAYORIGUALQUE   reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    IGUALQUE        reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    DIFQUE          reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    OR              reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    AND             reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    R_PAR           reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    R_CORCHETE      reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    COMA            reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    PUNTOYCOMA      reduce using rule 84 (factor -> llamada neu_esExpresion empty .)
    HACER           reduce using rule 84 (factor -> llamada neu_esExpresion empty .)


state 207

    (86) varcte -> ID neu_addID empty .

    MULT            reduce using rule 86 (varcte -> ID neu_addID empty .)
    DIV             reduce using rule 86 (varcte -> ID neu_addID empty .)
    MAS             reduce using rule 86 (varcte -> ID neu_addID empty .)
    MENOS           reduce using rule 86 (varcte -> ID neu_addID empty .)
    MENORQUE        reduce using rule 86 (varcte -> ID neu_addID empty .)
    MAYORQUE        reduce using rule 86 (varcte -> ID neu_addID empty .)
    MENORIGUALQUE   reduce using rule 86 (varcte -> ID neu_addID empty .)
    MAYORIGUALQUE   reduce using rule 86 (varcte -> ID neu_addID empty .)
    IGUALQUE        reduce using rule 86 (varcte -> ID neu_addID empty .)
    DIFQUE          reduce using rule 86 (varcte -> ID neu_addID empty .)
    OR              reduce using rule 86 (varcte -> ID neu_addID empty .)
    AND             reduce using rule 86 (varcte -> ID neu_addID empty .)
    R_PAR           reduce using rule 86 (varcte -> ID neu_addID empty .)
    R_CORCHETE      reduce using rule 86 (varcte -> ID neu_addID empty .)
    COMA            reduce using rule 86 (varcte -> ID neu_addID empty .)
    PUNTOYCOMA      reduce using rule 86 (varcte -> ID neu_addID empty .)
    HACER           reduce using rule 86 (varcte -> ID neu_addID empty .)


state 208

    (87) varcte -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 251
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 209

    (89) varcte -> ENTEROVAL neu_addConstanteEntero empty .

    MULT            reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIV             reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAS             reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENOS           reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORQUE        reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORQUE        reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORIGUALQUE   reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORIGUALQUE   reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    IGUALQUE        reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIFQUE          reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    OR              reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    AND             reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_PAR           reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_CORCHETE      reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    COMA            reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    PUNTOYCOMA      reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    HACER           reduce using rule 89 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)


state 210

    (90) varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .

    MULT            reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIV             reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAS             reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENOS           reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORQUE        reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORQUE        reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORIGUALQUE   reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORIGUALQUE   reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    IGUALQUE        reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIFQUE          reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    OR              reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    AND             reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_PAR           reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_CORCHETE      reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    COMA            reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    PUNTOYCOMA      reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    HACER           reduce using rule 90 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)


state 211

    (91) varcte -> CARACTERVAL neu_addConstanteCaracter empty .

    MULT            reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIV             reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAS             reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENOS           reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORQUE        reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORQUE        reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORIGUALQUE   reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORIGUALQUE   reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    IGUALQUE        reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIFQUE          reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    OR              reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    AND             reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_PAR           reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_CORCHETE      reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    COMA            reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    PUNTOYCOMA      reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    HACER           reduce using rule 91 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)


state 212

    (49) lectura -> LEER L_PAR ID neu_lectura R_PAR . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 252

state 213

    (50) escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .

    PUNTOYCOMA      reduce using rule 50 (escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .)


state 214

    (51) escrituraD -> hiper_exp neu_escritura empty .

    R_PAR           reduce using rule 51 (escrituraD -> hiper_exp neu_escritura empty .)


state 215

    (52) escrituraD -> LETRERO neu_letrero empty .

    R_PAR           reduce using rule 52 (escrituraD -> LETRERO neu_letrero empty .)


state 216

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision . ENTONCES bloque decisionU neu_endDecision empty

    ENTONCES        shift and go to state 253


state 217

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante . R_PAR HACER bloque neu_condicionalDespues empty

    R_PAR           shift and go to state 254


state 218

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA . hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 255
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 219

    (58) asignacionFor -> ID neu_addIDFor IGUAL . neu_addOperador hiper_exp neu_asignacionFor empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 256

state 220

    (22) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .

    R_PAR           reduce using rule 22 (recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .)


state 221

    (24) recibir_parametrosD -> COMA recibir_parametros . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 257

state 222

    (12) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .

    PRINCIPAL       reduce using rule 12 (funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .)


state 223

    (13) funcionesD -> funciones .

    PRINCIPAL       reduce using rule 13 (funcionesD -> funciones .)


state 224

    (14) funcionesD -> empty .
    (11) funciones -> empty .

  ! reduce/reduce conflict for PRINCIPAL resolved using rule 11 (funciones -> empty .)
    PRINCIPAL       reduce using rule 11 (funciones -> empty .)

  ! PRINCIPAL       [ reduce using rule 14 (funcionesD -> empty .) ]


state 225

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (9) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU
    (92) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 92 (empty -> .)
    FLOTANTE        reduce using rule 92 (empty -> .)
    CARACTER        reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    PRINCIPAL       reduce using rule 92 (empty -> .)
    L_LLAVE         reduce using rule 92 (empty -> .)

    variablesU                     shift and go to state 258
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 226

    (44) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 259

state 227

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (103) neu_fondoFalso -> .

    L_PAR           reduce using rule 103 (neu_fondoFalso -> .)
    ID              reduce using rule 103 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 103 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 103 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 103 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 260

state 228

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 261


state 229

    (47) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR . neu_llamada_gosub empty
    (111) neu_llamada_gosub -> .

    PUNTOYCOMA      reduce using rule 111 (neu_llamada_gosub -> .)
    MULT            reduce using rule 111 (neu_llamada_gosub -> .)
    DIV             reduce using rule 111 (neu_llamada_gosub -> .)
    MAS             reduce using rule 111 (neu_llamada_gosub -> .)
    MENOS           reduce using rule 111 (neu_llamada_gosub -> .)
    MENORQUE        reduce using rule 111 (neu_llamada_gosub -> .)
    MAYORQUE        reduce using rule 111 (neu_llamada_gosub -> .)
    MENORIGUALQUE   reduce using rule 111 (neu_llamada_gosub -> .)
    MAYORIGUALQUE   reduce using rule 111 (neu_llamada_gosub -> .)
    IGUALQUE        reduce using rule 111 (neu_llamada_gosub -> .)
    DIFQUE          reduce using rule 111 (neu_llamada_gosub -> .)
    OR              reduce using rule 111 (neu_llamada_gosub -> .)
    AND             reduce using rule 111 (neu_llamada_gosub -> .)
    R_PAR           reduce using rule 111 (neu_llamada_gosub -> .)
    R_CORCHETE      reduce using rule 111 (neu_llamada_gosub -> .)
    COMA            reduce using rule 111 (neu_llamada_gosub -> .)
    HACER           reduce using rule 111 (neu_llamada_gosub -> .)

    neu_llamada_gosub              shift and go to state 262

state 230

    (26) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 263

state 231

    (29) mandar_parametrosD -> empty .

    R_PAR           reduce using rule 29 (mandar_parametrosD -> empty .)


state 232

    (28) mandar_parametrosD -> COMA . mandar_parametros empty
    (26) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (27) mandar_parametros -> . empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (92) empty -> .
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 92 (empty -> .)
    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    mandar_parametros              shift and go to state 264
    empty                          shift and go to state 148
    hiper_exp                      shift and go to state 149
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 233

    (85) factor -> L_PAR hiper_exp R_PAR empty .

    MULT            reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIV             reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAS             reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENOS           reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORQUE        reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORQUE        reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORIGUALQUE   reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORIGUALQUE   reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    IGUALQUE        reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIFQUE          reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    OR              reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    AND             reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_PAR           reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_CORCHETE      reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    COMA            reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    PUNTOYCOMA      reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)
    HACER           reduce using rule 85 (factor -> L_PAR hiper_exp R_PAR empty .)


state 234

    (48) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .

    PUNTOYCOMA      reduce using rule 48 (retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .)


state 235

    (72) hiper_expU -> operadorL hiper_exp . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 265

state 236

    (63) operadorL -> OR neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 266

state 237

    (64) operadorL -> AND neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 267

state 238

    (75) super_expU -> operadorR super_exp . empty
    (92) empty -> .

    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 268

state 239

    (65) operadorR -> MENORQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 269

state 240

    (66) operadorR -> MAYORQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 270

state 241

    (67) operadorR -> MENORIGUALQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 271

state 242

    (68) operadorR -> MAYORIGUALQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 272

state 243

    (69) operadorR -> IGUALQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 273

state 244

    (70) operadorR -> DIFQUE neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 274

state 245

    (78) expU -> operadorA exp .

    MENORQUE        reduce using rule 78 (expU -> operadorA exp .)
    MAYORQUE        reduce using rule 78 (expU -> operadorA exp .)
    MENORIGUALQUE   reduce using rule 78 (expU -> operadorA exp .)
    MAYORIGUALQUE   reduce using rule 78 (expU -> operadorA exp .)
    IGUALQUE        reduce using rule 78 (expU -> operadorA exp .)
    DIFQUE          reduce using rule 78 (expU -> operadorA exp .)
    OR              reduce using rule 78 (expU -> operadorA exp .)
    AND             reduce using rule 78 (expU -> operadorA exp .)
    R_PAR           reduce using rule 78 (expU -> operadorA exp .)
    R_CORCHETE      reduce using rule 78 (expU -> operadorA exp .)
    COMA            reduce using rule 78 (expU -> operadorA exp .)
    PUNTOYCOMA      reduce using rule 78 (expU -> operadorA exp .)
    HACER           reduce using rule 78 (expU -> operadorA exp .)


state 246

    (59) operadorA -> MAS neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 275

state 247

    (60) operadorA -> MENOS neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 276

state 248

    (81) terminoU -> operadorT termino .

    MAS             reduce using rule 81 (terminoU -> operadorT termino .)
    MENOS           reduce using rule 81 (terminoU -> operadorT termino .)
    MENORQUE        reduce using rule 81 (terminoU -> operadorT termino .)
    MAYORQUE        reduce using rule 81 (terminoU -> operadorT termino .)
    MENORIGUALQUE   reduce using rule 81 (terminoU -> operadorT termino .)
    MAYORIGUALQUE   reduce using rule 81 (terminoU -> operadorT termino .)
    IGUALQUE        reduce using rule 81 (terminoU -> operadorT termino .)
    DIFQUE          reduce using rule 81 (terminoU -> operadorT termino .)
    OR              reduce using rule 81 (terminoU -> operadorT termino .)
    AND             reduce using rule 81 (terminoU -> operadorT termino .)
    R_PAR           reduce using rule 81 (terminoU -> operadorT termino .)
    R_CORCHETE      reduce using rule 81 (terminoU -> operadorT termino .)
    COMA            reduce using rule 81 (terminoU -> operadorT termino .)
    PUNTOYCOMA      reduce using rule 81 (terminoU -> operadorT termino .)
    HACER           reduce using rule 81 (terminoU -> operadorT termino .)


state 249

    (61) operadorT -> MULT neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 277

state 250

    (62) operadorT -> DIV neu_addOperador . empty
    (92) empty -> .

    L_PAR           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    ENTEROVAL       reduce using rule 92 (empty -> .)
    FLOTANTEVAL     reduce using rule 92 (empty -> .)
    CARACTERVAL     reduce using rule 92 (empty -> .)

    empty                          shift and go to state 278

state 251

    (87) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty

    R_CORCHETE      shift and go to state 279


state 252

    (49) lectura -> LEER L_PAR ID neu_lectura R_PAR empty .

    PUNTOYCOMA      reduce using rule 49 (lectura -> LEER L_PAR ID neu_lectura R_PAR empty .)


state 253

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES . bloque decisionU neu_endDecision empty
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 280

state 254

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR . HACER bloque neu_condicionalDespues empty

    HACER           shift and go to state 281


state 255

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp . neu_boolFor HACER bloque neu_endCondicion empty
    (135) neu_boolFor -> .

    HACER           reduce using rule 135 (neu_boolFor -> .)

    neu_boolFor                    shift and go to state 282

state 256

    (58) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador . hiper_exp neu_asignacionFor empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 283
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 257

    (24) recibir_parametrosD -> COMA recibir_parametros empty .

    R_PAR           reduce using rule 24 (recibir_parametrosD -> COMA recibir_parametros empty .)


state 258

    (9) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)
    VOID            reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 9 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addMatriz PUNTOYCOMA variablesU .)


state 259

    (44) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 44 (asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 260

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 284
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 261

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 285

state 262

    (47) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 286

state 263

    (26) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .

    R_PAR           reduce using rule 26 (mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .)


state 264

    (28) mandar_parametrosD -> COMA mandar_parametros . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 287

state 265

    (72) hiper_expU -> operadorL hiper_exp empty .

    R_PAR           reduce using rule 72 (hiper_expU -> operadorL hiper_exp empty .)
    R_CORCHETE      reduce using rule 72 (hiper_expU -> operadorL hiper_exp empty .)
    COMA            reduce using rule 72 (hiper_expU -> operadorL hiper_exp empty .)
    PUNTOYCOMA      reduce using rule 72 (hiper_expU -> operadorL hiper_exp empty .)
    HACER           reduce using rule 72 (hiper_expU -> operadorL hiper_exp empty .)


state 266

    (63) operadorL -> OR neu_addOperador empty .

    L_PAR           reduce using rule 63 (operadorL -> OR neu_addOperador empty .)
    ID              reduce using rule 63 (operadorL -> OR neu_addOperador empty .)
    ENTEROVAL       reduce using rule 63 (operadorL -> OR neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 63 (operadorL -> OR neu_addOperador empty .)
    CARACTERVAL     reduce using rule 63 (operadorL -> OR neu_addOperador empty .)


state 267

    (64) operadorL -> AND neu_addOperador empty .

    L_PAR           reduce using rule 64 (operadorL -> AND neu_addOperador empty .)
    ID              reduce using rule 64 (operadorL -> AND neu_addOperador empty .)
    ENTEROVAL       reduce using rule 64 (operadorL -> AND neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 64 (operadorL -> AND neu_addOperador empty .)
    CARACTERVAL     reduce using rule 64 (operadorL -> AND neu_addOperador empty .)


state 268

    (75) super_expU -> operadorR super_exp empty .

    OR              reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    AND             reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    R_PAR           reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    R_CORCHETE      reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    COMA            reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    PUNTOYCOMA      reduce using rule 75 (super_expU -> operadorR super_exp empty .)
    HACER           reduce using rule 75 (super_expU -> operadorR super_exp empty .)


state 269

    (65) operadorR -> MENORQUE neu_addOperador empty .

    L_PAR           reduce using rule 65 (operadorR -> MENORQUE neu_addOperador empty .)
    ID              reduce using rule 65 (operadorR -> MENORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 65 (operadorR -> MENORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 65 (operadorR -> MENORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 65 (operadorR -> MENORQUE neu_addOperador empty .)


state 270

    (66) operadorR -> MAYORQUE neu_addOperador empty .

    L_PAR           reduce using rule 66 (operadorR -> MAYORQUE neu_addOperador empty .)
    ID              reduce using rule 66 (operadorR -> MAYORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 66 (operadorR -> MAYORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 66 (operadorR -> MAYORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 66 (operadorR -> MAYORQUE neu_addOperador empty .)


state 271

    (67) operadorR -> MENORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 67 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 67 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 67 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 67 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 67 (operadorR -> MENORIGUALQUE neu_addOperador empty .)


state 272

    (68) operadorR -> MAYORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 68 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 68 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 68 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 68 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 68 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)


state 273

    (69) operadorR -> IGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 69 (operadorR -> IGUALQUE neu_addOperador empty .)
    ID              reduce using rule 69 (operadorR -> IGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 69 (operadorR -> IGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 69 (operadorR -> IGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 69 (operadorR -> IGUALQUE neu_addOperador empty .)


state 274

    (70) operadorR -> DIFQUE neu_addOperador empty .

    L_PAR           reduce using rule 70 (operadorR -> DIFQUE neu_addOperador empty .)
    ID              reduce using rule 70 (operadorR -> DIFQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 70 (operadorR -> DIFQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 70 (operadorR -> DIFQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 70 (operadorR -> DIFQUE neu_addOperador empty .)


state 275

    (59) operadorA -> MAS neu_addOperador empty .

    L_PAR           reduce using rule 59 (operadorA -> MAS neu_addOperador empty .)
    ID              reduce using rule 59 (operadorA -> MAS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 59 (operadorA -> MAS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 59 (operadorA -> MAS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 59 (operadorA -> MAS neu_addOperador empty .)


state 276

    (60) operadorA -> MENOS neu_addOperador empty .

    L_PAR           reduce using rule 60 (operadorA -> MENOS neu_addOperador empty .)
    ID              reduce using rule 60 (operadorA -> MENOS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 60 (operadorA -> MENOS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 60 (operadorA -> MENOS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 60 (operadorA -> MENOS neu_addOperador empty .)


state 277

    (61) operadorT -> MULT neu_addOperador empty .

    L_PAR           reduce using rule 61 (operadorT -> MULT neu_addOperador empty .)
    ID              reduce using rule 61 (operadorT -> MULT neu_addOperador empty .)
    ENTEROVAL       reduce using rule 61 (operadorT -> MULT neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 61 (operadorT -> MULT neu_addOperador empty .)
    CARACTERVAL     reduce using rule 61 (operadorT -> MULT neu_addOperador empty .)


state 278

    (62) operadorT -> DIV neu_addOperador empty .

    L_PAR           reduce using rule 62 (operadorT -> DIV neu_addOperador empty .)
    ID              reduce using rule 62 (operadorT -> DIV neu_addOperador empty .)
    ENTEROVAL       reduce using rule 62 (operadorT -> DIV neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 62 (operadorT -> DIV neu_addOperador empty .)
    CARACTERVAL     reduce using rule 62 (operadorT -> DIV neu_addOperador empty .)


state 279

    (87) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDArreglo empty
    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (104) neu_addIDArreglo -> .

    L_CORCHETE      shift and go to state 288
    MULT            reduce using rule 104 (neu_addIDArreglo -> .)
    DIV             reduce using rule 104 (neu_addIDArreglo -> .)
    MAS             reduce using rule 104 (neu_addIDArreglo -> .)
    MENOS           reduce using rule 104 (neu_addIDArreglo -> .)
    MENORQUE        reduce using rule 104 (neu_addIDArreglo -> .)
    MAYORQUE        reduce using rule 104 (neu_addIDArreglo -> .)
    MENORIGUALQUE   reduce using rule 104 (neu_addIDArreglo -> .)
    MAYORIGUALQUE   reduce using rule 104 (neu_addIDArreglo -> .)
    IGUALQUE        reduce using rule 104 (neu_addIDArreglo -> .)
    DIFQUE          reduce using rule 104 (neu_addIDArreglo -> .)
    OR              reduce using rule 104 (neu_addIDArreglo -> .)
    AND             reduce using rule 104 (neu_addIDArreglo -> .)
    R_PAR           reduce using rule 104 (neu_addIDArreglo -> .)
    R_CORCHETE      reduce using rule 104 (neu_addIDArreglo -> .)
    COMA            reduce using rule 104 (neu_addIDArreglo -> .)
    PUNTOYCOMA      reduce using rule 104 (neu_addIDArreglo -> .)
    HACER           reduce using rule 104 (neu_addIDArreglo -> .)

    neu_addIDArreglo               shift and go to state 289

state 280

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque . decisionU neu_endDecision empty
    (54) decisionU -> . SINO neu_iniciarDecisionElse bloque empty
    (55) decisionU -> . empty
    (92) empty -> .

    SINO            shift and go to state 292
    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    decisionU                      shift and go to state 290
    empty                          shift and go to state 291

state 281

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER . bloque neu_condicionalDespues empty
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 293

state 282

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor . HACER bloque neu_endCondicion empty

    HACER           shift and go to state 294


state 283

    (58) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp . neu_asignacionFor empty
    (134) neu_asignacionFor -> .

    R_PAR           reduce using rule 134 (neu_asignacionFor -> .)

    neu_asignacionFor              shift and go to state 295

state 284

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty

    R_CORCHETE      shift and go to state 296


state 285

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 297
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 286

    (47) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .

    PUNTOYCOMA      reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MULT            reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIV             reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAS             reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENOS           reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORQUE        reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORQUE        reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORIGUALQUE   reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORIGUALQUE   reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    IGUALQUE        reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIFQUE          reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    OR              reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    AND             reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    R_PAR           reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    R_CORCHETE      reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    COMA            reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    HACER           reduce using rule 47 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)


state 287

    (28) mandar_parametrosD -> COMA mandar_parametros empty .

    R_PAR           reduce using rule 28 (mandar_parametrosD -> COMA mandar_parametros empty .)


state 288

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (103) neu_fondoFalso -> .

    L_PAR           reduce using rule 103 (neu_fondoFalso -> .)
    ID              reduce using rule 103 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 103 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 103 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 103 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 298

state 289

    (87) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 299

state 290

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU . neu_endDecision empty
    (129) neu_endDecision -> .

    ID              reduce using rule 129 (neu_endDecision -> .)
    REGRESA         reduce using rule 129 (neu_endDecision -> .)
    LEER            reduce using rule 129 (neu_endDecision -> .)
    ESCRIBIR        reduce using rule 129 (neu_endDecision -> .)
    SI              reduce using rule 129 (neu_endDecision -> .)
    MIENTRAS        reduce using rule 129 (neu_endDecision -> .)
    DESDE           reduce using rule 129 (neu_endDecision -> .)
    R_LLAVE         reduce using rule 129 (neu_endDecision -> .)

    neu_endDecision                shift and go to state 300

state 291

    (55) decisionU -> empty .

    ID              reduce using rule 55 (decisionU -> empty .)
    REGRESA         reduce using rule 55 (decisionU -> empty .)
    LEER            reduce using rule 55 (decisionU -> empty .)
    ESCRIBIR        reduce using rule 55 (decisionU -> empty .)
    SI              reduce using rule 55 (decisionU -> empty .)
    MIENTRAS        reduce using rule 55 (decisionU -> empty .)
    DESDE           reduce using rule 55 (decisionU -> empty .)
    R_LLAVE         reduce using rule 55 (decisionU -> empty .)


state 292

    (54) decisionU -> SINO . neu_iniciarDecisionElse bloque empty
    (128) neu_iniciarDecisionElse -> .

    L_LLAVE         reduce using rule 128 (neu_iniciarDecisionElse -> .)

    neu_iniciarDecisionElse        shift and go to state 301

state 293

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque . neu_condicionalDespues empty
    (132) neu_condicionalDespues -> .

    ID              reduce using rule 132 (neu_condicionalDespues -> .)
    REGRESA         reduce using rule 132 (neu_condicionalDespues -> .)
    LEER            reduce using rule 132 (neu_condicionalDespues -> .)
    ESCRIBIR        reduce using rule 132 (neu_condicionalDespues -> .)
    SI              reduce using rule 132 (neu_condicionalDespues -> .)
    MIENTRAS        reduce using rule 132 (neu_condicionalDespues -> .)
    DESDE           reduce using rule 132 (neu_condicionalDespues -> .)
    R_LLAVE         reduce using rule 132 (neu_condicionalDespues -> .)

    neu_condicionalDespues         shift and go to state 302

state 294

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER . bloque neu_endCondicion empty
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 303

state 295

    (58) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor . empty
    (92) empty -> .

    R_PAR           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 304

state 296

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (105) neu_addIDMatriz -> .

    IGUAL           reduce using rule 105 (neu_addIDMatriz -> .)

    neu_addIDMatriz                shift and go to state 305

state 297

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (122) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 122 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 306

state 298

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDMatriz empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 307
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 299

    (87) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .

    MULT            reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    DIV             reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAS             reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENOS           reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENORQUE        reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAYORQUE        reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENORIGUALQUE   reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAYORIGUALQUE   reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    IGUALQUE        reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    DIFQUE          reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    OR              reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    AND             reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    R_PAR           reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    R_CORCHETE      reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    COMA            reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    PUNTOYCOMA      reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    HACER           reduce using rule 87 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)


state 300

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 308

state 301

    (54) decisionU -> SINO neu_iniciarDecisionElse . bloque empty
    (30) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 52

    bloque                         shift and go to state 309

state 302

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 310

state 303

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque . neu_endCondicion empty
    (136) neu_endCondicion -> .

    ID              reduce using rule 136 (neu_endCondicion -> .)
    REGRESA         reduce using rule 136 (neu_endCondicion -> .)
    LEER            reduce using rule 136 (neu_endCondicion -> .)
    ESCRIBIR        reduce using rule 136 (neu_endCondicion -> .)
    SI              reduce using rule 136 (neu_endCondicion -> .)
    MIENTRAS        reduce using rule 136 (neu_endCondicion -> .)
    DESDE           reduce using rule 136 (neu_endCondicion -> .)
    R_LLAVE         reduce using rule 136 (neu_endCondicion -> .)

    neu_endCondicion               shift and go to state 311

state 304

    (58) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .

    R_PAR           reduce using rule 58 (asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .)


state 305

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 312


state 306

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 313

state 307

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDMatriz empty

    R_CORCHETE      shift and go to state 314


state 308

    (53) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .

    ID              reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    REGRESA         reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    LEER            reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    ESCRIBIR        reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    SI              reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    MIENTRAS        reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    DESDE           reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    R_LLAVE         reduce using rule 53 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)


state 309

    (54) decisionU -> SINO neu_iniciarDecisionElse bloque . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 315

state 310

    (56) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .

    ID              reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    REGRESA         reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    LEER            reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    ESCRIBIR        reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    SI              reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    MIENTRAS        reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    DESDE           reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    R_LLAVE         reduce using rule 56 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)


state 311

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion . empty
    (92) empty -> .

    ID              reduce using rule 92 (empty -> .)
    REGRESA         reduce using rule 92 (empty -> .)
    LEER            reduce using rule 92 (empty -> .)
    ESCRIBIR        reduce using rule 92 (empty -> .)
    SI              reduce using rule 92 (empty -> .)
    MIENTRAS        reduce using rule 92 (empty -> .)
    DESDE           reduce using rule 92 (empty -> .)
    R_LLAVE         reduce using rule 92 (empty -> .)

    empty                          shift and go to state 316

state 312

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (114) neu_addOperador -> .

    L_PAR           reduce using rule 114 (neu_addOperador -> .)
    ID              reduce using rule 114 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 114 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 114 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 114 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 317

state 313

    (45) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 45 (asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 314

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDMatriz empty
    (105) neu_addIDMatriz -> .

    MULT            reduce using rule 105 (neu_addIDMatriz -> .)
    DIV             reduce using rule 105 (neu_addIDMatriz -> .)
    MAS             reduce using rule 105 (neu_addIDMatriz -> .)
    MENOS           reduce using rule 105 (neu_addIDMatriz -> .)
    MENORQUE        reduce using rule 105 (neu_addIDMatriz -> .)
    MAYORQUE        reduce using rule 105 (neu_addIDMatriz -> .)
    MENORIGUALQUE   reduce using rule 105 (neu_addIDMatriz -> .)
    MAYORIGUALQUE   reduce using rule 105 (neu_addIDMatriz -> .)
    IGUALQUE        reduce using rule 105 (neu_addIDMatriz -> .)
    DIFQUE          reduce using rule 105 (neu_addIDMatriz -> .)
    OR              reduce using rule 105 (neu_addIDMatriz -> .)
    AND             reduce using rule 105 (neu_addIDMatriz -> .)
    R_PAR           reduce using rule 105 (neu_addIDMatriz -> .)
    R_CORCHETE      reduce using rule 105 (neu_addIDMatriz -> .)
    COMA            reduce using rule 105 (neu_addIDMatriz -> .)
    PUNTOYCOMA      reduce using rule 105 (neu_addIDMatriz -> .)
    HACER           reduce using rule 105 (neu_addIDMatriz -> .)

    neu_addIDMatriz                shift and go to state 318

state 315

    (54) decisionU -> SINO neu_iniciarDecisionElse bloque empty .

    ID              reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    REGRESA         reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    LEER            reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    ESCRIBIR        reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    SI              reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    MIENTRAS        reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    DESDE           reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    R_LLAVE         reduce using rule 54 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)


state 316

    (57) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .

    ID              reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    REGRESA         reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    LEER            reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    ESCRIBIR        reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    SI              reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    MIENTRAS        reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    DESDE           reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    R_LLAVE         reduce using rule 57 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)


state 317

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (71) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (74) super_exp -> . exp neu_hacerSuperExp super_expU
    (77) exp -> . termino neu_hacerExp expU
    (80) termino -> . factor neu_hacerTermino terminoU
    (83) factor -> . varcte empty
    (84) factor -> . llamada neu_esExpresion empty
    (85) factor -> . L_PAR hiper_exp R_PAR empty
    (86) varcte -> . ID neu_addID empty
    (87) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (88) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty
    (89) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (90) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (91) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (47) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 119
    ID              shift and go to state 127
    ENTEROVAL       shift and go to state 128
    FLOTANTEVAL     shift and go to state 129
    CARACTERVAL     shift and go to state 130

    hiper_exp                      shift and go to state 319
    super_exp                      shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 123
    factor                         shift and go to state 124
    varcte                         shift and go to state 125
    llamada                        shift and go to state 126

state 318

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz . empty
    (92) empty -> .

    MULT            reduce using rule 92 (empty -> .)
    DIV             reduce using rule 92 (empty -> .)
    MAS             reduce using rule 92 (empty -> .)
    MENOS           reduce using rule 92 (empty -> .)
    MENORQUE        reduce using rule 92 (empty -> .)
    MAYORQUE        reduce using rule 92 (empty -> .)
    MENORIGUALQUE   reduce using rule 92 (empty -> .)
    MAYORIGUALQUE   reduce using rule 92 (empty -> .)
    IGUALQUE        reduce using rule 92 (empty -> .)
    DIFQUE          reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    R_PAR           reduce using rule 92 (empty -> .)
    R_CORCHETE      reduce using rule 92 (empty -> .)
    COMA            reduce using rule 92 (empty -> .)
    PUNTOYCOMA      reduce using rule 92 (empty -> .)
    HACER           reduce using rule 92 (empty -> .)

    empty                          shift and go to state 320

state 319

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (122) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 122 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 321

state 320

    (88) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .

    MULT            reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    DIV             reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MAS             reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MENOS           reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MENORQUE        reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MAYORQUE        reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MENORIGUALQUE   reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    MAYORIGUALQUE   reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    IGUALQUE        reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    DIFQUE          reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    OR              reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    AND             reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    R_PAR           reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    R_CORCHETE      reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    COMA            reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    PUNTOYCOMA      reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)
    HACER           reduce using rule 88 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz empty .)


state 321

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (92) empty -> .

    PUNTOYCOMA      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 322

state 322

    (46) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 46 (asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDMatriz IGUAL neu_addOperador hiper_exp neu_asignacion empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 52 resolved as shift
WARNING: shift/reduce conflict for LEER in state 52 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 52 resolved as shift
WARNING: shift/reduce conflict for SI in state 52 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 52 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 62 resolved as shift
WARNING: shift/reduce conflict for LEER in state 62 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 62 resolved as shift
WARNING: shift/reduce conflict for SI in state 62 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 62 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 62 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 61
WARNING: reduce/reduce conflict in state 85 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (bloqueD -> empty) in state 85
WARNING: reduce/reduce conflict in state 85 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 85
WARNING: reduce/reduce conflict in state 224 resolved using rule (funciones -> empty)
WARNING: rejected rule (funcionesD -> empty) in state 224
WARNING: Rule (bloqueD -> empty) is never reduced
WARNING: Rule (funcionesD -> empty) is never reduced
