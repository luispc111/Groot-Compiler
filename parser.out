Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    L_CORCHETE
    PUNTO
    R_CORCHETE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
Rule 2     variables -> VARIABLES variablesU
Rule 3     variables -> empty
Rule 4     variablesU -> variablesD
Rule 5     variablesU -> empty
Rule 6     variablesD -> ID neu_addVariableAStack COMA variablesD
Rule 7     variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
Rule 8     funciones -> funcionesU
Rule 9     funciones -> empty
Rule 10    funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
Rule 11    funcionesD -> funciones
Rule 12    funcionesD -> empty
Rule 13    tipo_funcion -> ENTERO empty
Rule 14    tipo_funcion -> FLOTANTE empty
Rule 15    tipo_funcion -> CARACTER empty
Rule 16    tipo_funcion -> VOID empty
Rule 17    tipo_var -> ENTERO empty
Rule 18    tipo_var -> FLOTANTE empty
Rule 19    tipo_var -> CARACTER empty
Rule 20    recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
Rule 21    recibir_parametros -> empty
Rule 22    recibir_parametrosD -> COMA recibir_parametros empty
Rule 23    recibir_parametrosD -> empty
Rule 24    mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty
Rule 25    mandar_parametros -> empty
Rule 26    mandar_parametrosD -> COMA mandar_parametros empty
Rule 27    mandar_parametrosD -> empty
Rule 28    bloque -> L_LLAVE bloqueU R_LLAVE empty
Rule 29    bloqueU -> estatuto bloqueD neu_vaciarPilas empty
Rule 30    bloqueU -> empty
Rule 31    bloqueD -> bloqueU empty
Rule 32    bloqueD -> empty
Rule 33    estatuto -> asignacion PUNTOYCOMA empty
Rule 34    estatuto -> llamada PUNTOYCOMA empty
Rule 35    estatuto -> retorno PUNTOYCOMA empty
Rule 36    estatuto -> lectura PUNTOYCOMA empty
Rule 37    estatuto -> escritura PUNTOYCOMA empty
Rule 38    estatuto -> decision empty
Rule 39    estatuto -> condicional empty
Rule 40    estatuto -> no_condicional empty
Rule 41    estatuto -> empty
Rule 42    asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 43    llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
Rule 44    retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
Rule 45    lectura -> LEER L_PAR ID neu_lectura R_PAR empty
Rule 46    escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty
Rule 47    escrituraD -> hiper_exp neu_escritura empty
Rule 48    escrituraD -> LETRERO empty
Rule 49    decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
Rule 50    decisionU -> SINO neu_iniciarDecisionElse bloque empty
Rule 51    decisionU -> empty
Rule 52    condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
Rule 53    no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
Rule 54    asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
Rule 55    operadorA -> MAS neu_addOperador empty
Rule 56    operadorA -> MENOS neu_addOperador empty
Rule 57    operadorT -> MULT neu_addOperador empty
Rule 58    operadorT -> DIV neu_addOperador empty
Rule 59    operadorL -> OR neu_addOperador empty
Rule 60    operadorL -> AND neu_addOperador empty
Rule 61    operadorR -> MENORQUE neu_addOperador empty
Rule 62    operadorR -> MAYORQUE neu_addOperador empty
Rule 63    operadorR -> MENORIGUALQUE neu_addOperador empty
Rule 64    operadorR -> MAYORIGUALQUE neu_addOperador empty
Rule 65    operadorR -> IGUALQUE neu_addOperador empty
Rule 66    operadorR -> DIFQUE neu_addOperador empty
Rule 67    hiper_exp -> super_exp neu_hacerHiperExp hiper_expU
Rule 68    hiper_expU -> operadorL hiper_exp empty
Rule 69    hiper_expU -> empty
Rule 70    super_exp -> exp neu_hacerSuperExp super_expU
Rule 71    super_expU -> operadorR super_exp empty
Rule 72    super_expU -> empty
Rule 73    exp -> termino neu_hacerExp expU
Rule 74    expU -> operadorA exp
Rule 75    expU -> empty
Rule 76    termino -> factor neu_hacerTermino terminoU
Rule 77    terminoU -> operadorT termino
Rule 78    terminoU -> empty
Rule 79    factor -> varcte empty
Rule 80    factor -> llamada empty
Rule 81    factor -> L_PAR hiper_exp R_PAR empty
Rule 82    varcte -> ID neu_addID empty
Rule 83    varcte -> ENTEROVAL neu_addConstanteEntero empty
Rule 84    varcte -> FLOTANTEVAL neu_addConstanteFlotante empty
Rule 85    varcte -> CARACTERVAL neu_addConstanteCaracter empty
Rule 86    empty -> <empty>
Rule 87    neu_programa -> <empty>
Rule 88    neu_endPrograma -> <empty>
Rule 89    neu_addFuncion -> <empty>
Rule 90    neu_endFuncion -> <empty>
Rule 91    neu_principal -> <empty>
Rule 92    neu_addVariable -> <empty>
Rule 93    neu_addVariableAStack -> <empty>
Rule 94    neu_addID -> <empty>
Rule 95    neu_addConstanteEntero -> <empty>
Rule 96    neu_addConstanteFlotante -> <empty>
Rule 97    neu_addConstanteCaracter -> <empty>
Rule 98    neu_addTermino -> <empty>
Rule 99    neu_llamada_era -> <empty>
Rule 100   neu_llamada_gosub -> <empty>
Rule 101   neu_addOperador -> <empty>
Rule 102   getGMemoria -> <empty>
Rule 103   getLMemoria -> <empty>
Rule 104   getCMemoria -> <empty>
Rule 105   neu_hacerTermino -> <empty>
Rule 106   neu_hacerExp -> <empty>
Rule 107   neu_hacerSuperExp -> <empty>
Rule 108   neu_hacerHiperExp -> <empty>
Rule 109   neu_asignacion -> <empty>
Rule 110   neu_lectura -> <empty>
Rule 111   neu_escritura -> <empty>
Rule 112   neu_retorno -> <empty>
Rule 113   neu_iniciarDecision -> <empty>
Rule 114   neu_iniciarDecisionElse -> <empty>
Rule 115   neu_endDecision -> <empty>
Rule 116   neu_condicionalAntes -> <empty>
Rule 117   neu_condicionalDurante -> <empty>
Rule 118   neu_condicionalDespues -> <empty>
Rule 119   neu_addIDFor -> <empty>
Rule 120   neu_asignacionFor -> <empty>
Rule 121   neu_boolFor -> <empty>
Rule 122   neu_endCondicion -> <empty>
Rule 123   neu_parametroEnviado -> <empty>
Rule 124   neu_recibirParametros -> <empty>
Rule 125   neu_paramValidacion -> <empty>
Rule 126   neu_vaciarPilas -> <empty>
Rule 127   notifError -> <empty>

Terminals, with rules where they appear

AND                  : 60
CARACTER             : 15 19
CARACTERVAL          : 85
COMA                 : 6 22 26
DESDE                : 53
DIFQUE               : 66
DIV                  : 58
DOSPUNTOS            : 7 20
ENTERO               : 13 17
ENTEROVAL            : 83
ENTONCES             : 49
ESCRIBIR             : 46
FLOTANTE             : 14 18
FLOTANTEVAL          : 84
FUNCION              : 10
HACER                : 52 53
HASTA                : 53
ID                   : 1 6 7 10 20 42 43 45 54 82
IGUAL                : 42 54
IGUALQUE             : 65
LEER                 : 45
LETRERO              : 48
L_CORCHETE           : 
L_LLAVE              : 28
L_PAR                : 1 10 43 44 45 46 49 52 53 81
MAS                  : 55
MAYORIGUALQUE        : 64
MAYORQUE             : 62
MENORIGUALQUE        : 63
MENORQUE             : 61
MENOS                : 56
MIENTRAS             : 52
MULT                 : 57
OR                   : 59
PRINCIPAL            : 1
PROGRAMA             : 1
PUNTO                : 
PUNTOYCOMA           : 1 7 33 34 35 36 37
REGRESA              : 44
R_CORCHETE           : 
R_LLAVE              : 28
R_PAR                : 1 10 43 44 45 46 49 52 53 81
SI                   : 49
SINO                 : 50
VARIABLES            : 2
VOID                 : 16
error                : 

Nonterminals, with rules where they appear

asignacion           : 33
asignacionFor        : 53
bloque               : 1 10 49 50 52 53
bloqueD              : 29
bloqueU              : 28 31
condicional          : 39
decision             : 38
decisionU            : 49
empty                : 1 3 5 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69 71 72 75 78 79 80 81 82 83 84 85
escritura            : 37
escrituraD           : 46
estatuto             : 29
exp                  : 70 74
expU                 : 73
factor               : 76
funciones            : 1 11
funcionesD           : 10
funcionesU           : 8
getCMemoria          : 
getGMemoria          : 
getLMemoria          : 
hiper_exp            : 24 42 44 47 49 52 53 54 68 81
hiper_expU           : 67
lectura              : 36
llamada              : 34 80
mandar_parametros    : 26 43
mandar_parametrosD   : 24
neu_addConstanteCaracter : 85
neu_addConstanteEntero : 83
neu_addConstanteFlotante : 84
neu_addFuncion       : 10
neu_addID            : 42 82
neu_addIDFor         : 54
neu_addOperador      : 42 54 55 56 57 58 59 60 61 62 63 64 65 66
neu_addTermino       : 
neu_addVariable      : 7
neu_addVariableAStack : 6
neu_asignacion       : 42
neu_asignacionFor    : 54
neu_boolFor          : 53
neu_condicionalAntes : 52
neu_condicionalDespues : 52
neu_condicionalDurante : 52
neu_endCondicion     : 53
neu_endDecision      : 49
neu_endFuncion       : 10
neu_endPrograma      : 1
neu_escritura        : 47
neu_hacerExp         : 73
neu_hacerHiperExp    : 67
neu_hacerSuperExp    : 70
neu_hacerTermino     : 76
neu_iniciarDecision  : 49
neu_iniciarDecisionElse : 50
neu_lectura          : 45
neu_llamada_era      : 43
neu_llamada_gosub    : 43
neu_paramValidacion  : 43
neu_parametroEnviado : 24
neu_principal        : 1
neu_programa         : 1
neu_recibirParametros : 20
neu_retorno          : 44
neu_vaciarPilas      : 29
no_condicional       : 40
notifError           : 
operadorA            : 74
operadorL            : 68
operadorR            : 71
operadorT            : 77
program              : 0
recibir_parametros   : 10 22
recibir_parametrosD  : 20
retorno              : 35
super_exp            : 67 71
super_expU           : 70
termino              : 73 77
terminoU             : 76
tipo_funcion         : 10
tipo_var             : 7 20
varcte               : 79
variables            : 1 10
variablesD           : 4 6
variablesU           : 2 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PROGRAMA        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAMA . ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAMA ID . neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (87) neu_programa -> .

    PUNTOYCOMA      reduce using rule 87 (neu_programa -> .)

    neu_programa                   shift and go to state 4

state 4

    (1) program -> PROGRAMA ID neu_programa . PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PUNTOYCOMA      shift and go to state 5


state 5

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA . variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (86) empty -> .

    VARIABLES       shift and go to state 8
    ENTERO          reduce using rule 86 (empty -> .)
    FLOTANTE        reduce using rule 86 (empty -> .)
    CARACTER        reduce using rule 86 (empty -> .)
    VOID            reduce using rule 86 (empty -> .)
    PRINCIPAL       reduce using rule 86 (empty -> .)

    variables                      shift and go to state 6
    empty                          shift and go to state 7

state 6

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables . funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (8) funciones -> . funcionesU
    (9) funciones -> . empty
    (10) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (86) empty -> .
    (13) tipo_funcion -> . ENTERO empty
    (14) tipo_funcion -> . FLOTANTE empty
    (15) tipo_funcion -> . CARACTER empty
    (16) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 86 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    funciones                      shift and go to state 9
    empty                          shift and go to state 10
    funcionesU                     shift and go to state 11
    tipo_funcion                   shift and go to state 12

state 7

    (3) variables -> empty .

    ENTERO          reduce using rule 3 (variables -> empty .)
    FLOTANTE        reduce using rule 3 (variables -> empty .)
    CARACTER        reduce using rule 3 (variables -> empty .)
    VOID            reduce using rule 3 (variables -> empty .)
    PRINCIPAL       reduce using rule 3 (variables -> empty .)
    L_LLAVE         reduce using rule 3 (variables -> empty .)


state 8

    (2) variables -> VARIABLES . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (86) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 86 (empty -> .)
    FLOTANTE        reduce using rule 86 (empty -> .)
    CARACTER        reduce using rule 86 (empty -> .)
    VOID            reduce using rule 86 (empty -> .)
    PRINCIPAL       reduce using rule 86 (empty -> .)
    L_LLAVE         reduce using rule 86 (empty -> .)

    variablesU                     shift and go to state 17
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 9

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones . PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PRINCIPAL       shift and go to state 21


state 10

    (9) funciones -> empty .

    PRINCIPAL       reduce using rule 9 (funciones -> empty .)


state 11

    (8) funciones -> funcionesU .

    PRINCIPAL       reduce using rule 8 (funciones -> funcionesU .)


state 12

    (10) funcionesU -> tipo_funcion . FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    FUNCION         shift and go to state 22


state 13

    (13) tipo_funcion -> ENTERO . empty
    (86) empty -> .

    FUNCION         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 23

state 14

    (14) tipo_funcion -> FLOTANTE . empty
    (86) empty -> .

    FUNCION         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 24

state 15

    (15) tipo_funcion -> CARACTER . empty
    (86) empty -> .

    FUNCION         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 25

state 16

    (16) tipo_funcion -> VOID . empty
    (86) empty -> .

    FUNCION         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 26

state 17

    (2) variables -> VARIABLES variablesU .

    ENTERO          reduce using rule 2 (variables -> VARIABLES variablesU .)
    FLOTANTE        reduce using rule 2 (variables -> VARIABLES variablesU .)
    CARACTER        reduce using rule 2 (variables -> VARIABLES variablesU .)
    VOID            reduce using rule 2 (variables -> VARIABLES variablesU .)
    PRINCIPAL       reduce using rule 2 (variables -> VARIABLES variablesU .)
    L_LLAVE         reduce using rule 2 (variables -> VARIABLES variablesU .)


state 18

    (4) variablesU -> variablesD .

    ENTERO          reduce using rule 4 (variablesU -> variablesD .)
    FLOTANTE        reduce using rule 4 (variablesU -> variablesD .)
    CARACTER        reduce using rule 4 (variablesU -> variablesD .)
    VOID            reduce using rule 4 (variablesU -> variablesD .)
    PRINCIPAL       reduce using rule 4 (variablesU -> variablesD .)
    L_LLAVE         reduce using rule 4 (variablesU -> variablesD .)


state 19

    (5) variablesU -> empty .

    ENTERO          reduce using rule 5 (variablesU -> empty .)
    FLOTANTE        reduce using rule 5 (variablesU -> empty .)
    CARACTER        reduce using rule 5 (variablesU -> empty .)
    VOID            reduce using rule 5 (variablesU -> empty .)
    PRINCIPAL       reduce using rule 5 (variablesU -> empty .)
    L_LLAVE         reduce using rule 5 (variablesU -> empty .)


state 20

    (6) variablesD -> ID . neu_addVariableAStack COMA variablesD
    (7) variablesD -> ID . DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (93) neu_addVariableAStack -> .

    DOSPUNTOS       shift and go to state 28
    COMA            reduce using rule 93 (neu_addVariableAStack -> .)

    neu_addVariableAStack          shift and go to state 27

state 21

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL . neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (91) neu_principal -> .

    L_PAR           reduce using rule 91 (neu_principal -> .)

    neu_principal                  shift and go to state 29

state 22

    (10) funcionesU -> tipo_funcion FUNCION . ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    ID              shift and go to state 30


state 23

    (13) tipo_funcion -> ENTERO empty .

    FUNCION         reduce using rule 13 (tipo_funcion -> ENTERO empty .)


state 24

    (14) tipo_funcion -> FLOTANTE empty .

    FUNCION         reduce using rule 14 (tipo_funcion -> FLOTANTE empty .)


state 25

    (15) tipo_funcion -> CARACTER empty .

    FUNCION         reduce using rule 15 (tipo_funcion -> CARACTER empty .)


state 26

    (16) tipo_funcion -> VOID empty .

    FUNCION         reduce using rule 16 (tipo_funcion -> VOID empty .)


state 27

    (6) variablesD -> ID neu_addVariableAStack . COMA variablesD

    COMA            shift and go to state 31


state 28

    (7) variablesD -> ID DOSPUNTOS . tipo_var neu_addVariable PUNTOYCOMA variablesU
    (17) tipo_var -> . ENTERO empty
    (18) tipo_var -> . FLOTANTE empty
    (19) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    CARACTER        shift and go to state 35

    tipo_var                       shift and go to state 32

state 29

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal . L_PAR R_PAR bloque neu_endPrograma empty

    L_PAR           shift and go to state 36


state 30

    (10) funcionesU -> tipo_funcion FUNCION ID . neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (89) neu_addFuncion -> .

    L_PAR           reduce using rule 89 (neu_addFuncion -> .)

    neu_addFuncion                 shift and go to state 37

state 31

    (6) variablesD -> ID neu_addVariableAStack COMA . variablesD
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU

    ID              shift and go to state 20

    variablesD                     shift and go to state 38

state 32

    (7) variablesD -> ID DOSPUNTOS tipo_var . neu_addVariable PUNTOYCOMA variablesU
    (92) neu_addVariable -> .

    PUNTOYCOMA      reduce using rule 92 (neu_addVariable -> .)

    neu_addVariable                shift and go to state 39

state 33

    (17) tipo_var -> ENTERO . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 40

state 34

    (18) tipo_var -> FLOTANTE . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 41

state 35

    (19) tipo_var -> CARACTER . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 42

state 36

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR . R_PAR bloque neu_endPrograma empty

    R_PAR           shift and go to state 43


state 37

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion . L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    L_PAR           shift and go to state 44


state 38

    (6) variablesD -> ID neu_addVariableAStack COMA variablesD .

    ENTERO          reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    FLOTANTE        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    CARACTER        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    VOID            reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    PRINCIPAL       reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    L_LLAVE         reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)


state 39

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 45


state 40

    (17) tipo_var -> ENTERO empty .

    PUNTOYCOMA      reduce using rule 17 (tipo_var -> ENTERO empty .)
    COMA            reduce using rule 17 (tipo_var -> ENTERO empty .)
    R_PAR           reduce using rule 17 (tipo_var -> ENTERO empty .)


state 41

    (18) tipo_var -> FLOTANTE empty .

    PUNTOYCOMA      reduce using rule 18 (tipo_var -> FLOTANTE empty .)
    COMA            reduce using rule 18 (tipo_var -> FLOTANTE empty .)
    R_PAR           reduce using rule 18 (tipo_var -> FLOTANTE empty .)


state 42

    (19) tipo_var -> CARACTER empty .

    PUNTOYCOMA      reduce using rule 19 (tipo_var -> CARACTER empty .)
    COMA            reduce using rule 19 (tipo_var -> CARACTER empty .)
    R_PAR           reduce using rule 19 (tipo_var -> CARACTER empty .)


state 43

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR . bloque neu_endPrograma empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 46

state 44

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR . recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (20) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (21) recibir_parametros -> . empty
    (86) empty -> .

    ID              shift and go to state 48
    R_PAR           reduce using rule 86 (empty -> .)

    recibir_parametros             shift and go to state 49
    empty                          shift and go to state 50

state 45

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (86) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 86 (empty -> .)
    FLOTANTE        reduce using rule 86 (empty -> .)
    CARACTER        reduce using rule 86 (empty -> .)
    VOID            reduce using rule 86 (empty -> .)
    PRINCIPAL       reduce using rule 86 (empty -> .)
    L_LLAVE         reduce using rule 86 (empty -> .)

    variablesU                     shift and go to state 51
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 46

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque . neu_endPrograma empty
    (88) neu_endPrograma -> .

    $end            reduce using rule 88 (neu_endPrograma -> .)

    neu_endPrograma                shift and go to state 52

state 47

    (28) bloque -> L_LLAVE . bloqueU R_LLAVE empty
    (29) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (30) bloqueU -> . empty
    (33) estatuto -> . asignacion PUNTOYCOMA empty
    (34) estatuto -> . llamada PUNTOYCOMA empty
    (35) estatuto -> . retorno PUNTOYCOMA empty
    (36) estatuto -> . lectura PUNTOYCOMA empty
    (37) estatuto -> . escritura PUNTOYCOMA empty
    (38) estatuto -> . decision empty
    (39) estatuto -> . condicional empty
    (40) estatuto -> . no_condicional empty
    (41) estatuto -> . empty
    (86) empty -> .
    (42) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (44) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (45) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (46) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (49) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (52) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (53) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 86 (empty -> .)
    ID              shift and go to state 64
    REGRESA         shift and go to state 65
    LEER            shift and go to state 66
    ESCRIBIR        shift and go to state 67
    SI              shift and go to state 68
    MIENTRAS        shift and go to state 69
    DESDE           shift and go to state 70

  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! REGRESA         [ reduce using rule 86 (empty -> .) ]
  ! LEER            [ reduce using rule 86 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 86 (empty -> .) ]
  ! SI              [ reduce using rule 86 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 86 (empty -> .) ]
  ! DESDE           [ reduce using rule 86 (empty -> .) ]

    bloqueU                        shift and go to state 53
    empty                          shift and go to state 54
    estatuto                       shift and go to state 55
    asignacion                     shift and go to state 56
    llamada                        shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    condicional                    shift and go to state 62
    no_condicional                 shift and go to state 63

state 48

    (20) recibir_parametros -> ID . DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty

    DOSPUNTOS       shift and go to state 71


state 49

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros . R_PAR variables bloque neu_endFuncion funcionesD

    R_PAR           shift and go to state 72


state 50

    (21) recibir_parametros -> empty .

    R_PAR           reduce using rule 21 (recibir_parametros -> empty .)


state 51

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    VOID            reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)


state 52

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma . empty
    (86) empty -> .

    $end            reduce using rule 86 (empty -> .)

    empty                          shift and go to state 73

state 53

    (28) bloque -> L_LLAVE bloqueU . R_LLAVE empty

    R_LLAVE         shift and go to state 74


state 54

    (30) bloqueU -> empty .
    (41) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 30 (bloqueU -> empty .)
    ID              reduce using rule 41 (estatuto -> empty .)
    REGRESA         reduce using rule 41 (estatuto -> empty .)
    LEER            reduce using rule 41 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 41 (estatuto -> empty .)
    SI              reduce using rule 41 (estatuto -> empty .)
    MIENTRAS        reduce using rule 41 (estatuto -> empty .)
    DESDE           reduce using rule 41 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 41 (estatuto -> empty .) ]


state 55

    (29) bloqueU -> estatuto . bloqueD neu_vaciarPilas empty
    (31) bloqueD -> . bloqueU empty
    (32) bloqueD -> . empty
    (29) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (30) bloqueU -> . empty
    (86) empty -> .
    (33) estatuto -> . asignacion PUNTOYCOMA empty
    (34) estatuto -> . llamada PUNTOYCOMA empty
    (35) estatuto -> . retorno PUNTOYCOMA empty
    (36) estatuto -> . lectura PUNTOYCOMA empty
    (37) estatuto -> . escritura PUNTOYCOMA empty
    (38) estatuto -> . decision empty
    (39) estatuto -> . condicional empty
    (40) estatuto -> . no_condicional empty
    (41) estatuto -> . empty
    (42) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (44) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (45) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (46) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (49) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (52) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (53) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 86 (empty -> .)
    ID              shift and go to state 64
    REGRESA         shift and go to state 65
    LEER            shift and go to state 66
    ESCRIBIR        shift and go to state 67
    SI              shift and go to state 68
    MIENTRAS        shift and go to state 69
    DESDE           shift and go to state 70

  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! REGRESA         [ reduce using rule 86 (empty -> .) ]
  ! LEER            [ reduce using rule 86 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 86 (empty -> .) ]
  ! SI              [ reduce using rule 86 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 86 (empty -> .) ]
  ! DESDE           [ reduce using rule 86 (empty -> .) ]

    estatuto                       shift and go to state 55
    bloqueD                        shift and go to state 75
    empty                          shift and go to state 76
    bloqueU                        shift and go to state 77
    asignacion                     shift and go to state 56
    llamada                        shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    condicional                    shift and go to state 62
    no_condicional                 shift and go to state 63

state 56

    (33) estatuto -> asignacion . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 78


state 57

    (34) estatuto -> llamada . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 79


state 58

    (35) estatuto -> retorno . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 80


state 59

    (36) estatuto -> lectura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 81


state 60

    (37) estatuto -> escritura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 82


state 61

    (38) estatuto -> decision . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 83

state 62

    (39) estatuto -> condicional . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 84

state 63

    (40) estatuto -> no_condicional . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 85

state 64

    (42) asignacion -> ID . neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (43) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (94) neu_addID -> .
    (99) neu_llamada_era -> .

    IGUAL           reduce using rule 94 (neu_addID -> .)
    L_PAR           reduce using rule 99 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 86
    neu_llamada_era                shift and go to state 87

state 65

    (44) retorno -> REGRESA . L_PAR hiper_exp neu_retorno R_PAR empty

    L_PAR           shift and go to state 88


state 66

    (45) lectura -> LEER . L_PAR ID neu_lectura R_PAR empty

    L_PAR           shift and go to state 89


state 67

    (46) escritura -> ESCRIBIR . L_PAR escrituraD R_PAR empty

    L_PAR           shift and go to state 90


state 68

    (49) decision -> SI . L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    L_PAR           shift and go to state 91


state 69

    (52) condicional -> MIENTRAS . L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty

    L_PAR           shift and go to state 92


state 70

    (53) no_condicional -> DESDE . L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    L_PAR           shift and go to state 93


state 71

    (20) recibir_parametros -> ID DOSPUNTOS . tipo_var neu_recibirParametros recibir_parametrosD empty
    (17) tipo_var -> . ENTERO empty
    (18) tipo_var -> . FLOTANTE empty
    (19) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    CARACTER        shift and go to state 35

    tipo_var                       shift and go to state 94

state 72

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR . variables bloque neu_endFuncion funcionesD
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (86) empty -> .

    VARIABLES       shift and go to state 8
    L_LLAVE         reduce using rule 86 (empty -> .)

    variables                      shift and go to state 95
    empty                          shift and go to state 7

state 73

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .

    $end            reduce using rule 1 (program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .)


state 74

    (28) bloque -> L_LLAVE bloqueU R_LLAVE . empty
    (86) empty -> .

    $end            reduce using rule 86 (empty -> .)
    ENTERO          reduce using rule 86 (empty -> .)
    FLOTANTE        reduce using rule 86 (empty -> .)
    CARACTER        reduce using rule 86 (empty -> .)
    VOID            reduce using rule 86 (empty -> .)
    PRINCIPAL       reduce using rule 86 (empty -> .)
    SINO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 96

state 75

    (29) bloqueU -> estatuto bloqueD . neu_vaciarPilas empty
    (126) neu_vaciarPilas -> .

    R_LLAVE         reduce using rule 126 (neu_vaciarPilas -> .)

    neu_vaciarPilas                shift and go to state 97

state 76

    (32) bloqueD -> empty .
    (30) bloqueU -> empty .
    (41) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 30 (bloqueU -> empty .)
    ID              reduce using rule 41 (estatuto -> empty .)
    REGRESA         reduce using rule 41 (estatuto -> empty .)
    LEER            reduce using rule 41 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 41 (estatuto -> empty .)
    SI              reduce using rule 41 (estatuto -> empty .)
    MIENTRAS        reduce using rule 41 (estatuto -> empty .)
    DESDE           reduce using rule 41 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 32 (bloqueD -> empty .) ]
  ! R_LLAVE         [ reduce using rule 41 (estatuto -> empty .) ]


state 77

    (31) bloqueD -> bloqueU . empty
    (86) empty -> .

    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 98

state 78

    (33) estatuto -> asignacion PUNTOYCOMA . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 99

state 79

    (34) estatuto -> llamada PUNTOYCOMA . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 100

state 80

    (35) estatuto -> retorno PUNTOYCOMA . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 101

state 81

    (36) estatuto -> lectura PUNTOYCOMA . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 102

state 82

    (37) estatuto -> escritura PUNTOYCOMA . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 103

state 83

    (38) estatuto -> decision empty .

    ID              reduce using rule 38 (estatuto -> decision empty .)
    REGRESA         reduce using rule 38 (estatuto -> decision empty .)
    LEER            reduce using rule 38 (estatuto -> decision empty .)
    ESCRIBIR        reduce using rule 38 (estatuto -> decision empty .)
    SI              reduce using rule 38 (estatuto -> decision empty .)
    MIENTRAS        reduce using rule 38 (estatuto -> decision empty .)
    DESDE           reduce using rule 38 (estatuto -> decision empty .)
    R_LLAVE         reduce using rule 38 (estatuto -> decision empty .)


state 84

    (39) estatuto -> condicional empty .

    ID              reduce using rule 39 (estatuto -> condicional empty .)
    REGRESA         reduce using rule 39 (estatuto -> condicional empty .)
    LEER            reduce using rule 39 (estatuto -> condicional empty .)
    ESCRIBIR        reduce using rule 39 (estatuto -> condicional empty .)
    SI              reduce using rule 39 (estatuto -> condicional empty .)
    MIENTRAS        reduce using rule 39 (estatuto -> condicional empty .)
    DESDE           reduce using rule 39 (estatuto -> condicional empty .)
    R_LLAVE         reduce using rule 39 (estatuto -> condicional empty .)


state 85

    (40) estatuto -> no_condicional empty .

    ID              reduce using rule 40 (estatuto -> no_condicional empty .)
    REGRESA         reduce using rule 40 (estatuto -> no_condicional empty .)
    LEER            reduce using rule 40 (estatuto -> no_condicional empty .)
    ESCRIBIR        reduce using rule 40 (estatuto -> no_condicional empty .)
    SI              reduce using rule 40 (estatuto -> no_condicional empty .)
    MIENTRAS        reduce using rule 40 (estatuto -> no_condicional empty .)
    DESDE           reduce using rule 40 (estatuto -> no_condicional empty .)
    R_LLAVE         reduce using rule 40 (estatuto -> no_condicional empty .)


state 86

    (42) asignacion -> ID neu_addID . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 104


state 87

    (43) llamada -> ID neu_llamada_era . L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 105


state 88

    (44) retorno -> REGRESA L_PAR . hiper_exp neu_retorno R_PAR empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 107
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 89

    (45) lectura -> LEER L_PAR . ID neu_lectura R_PAR empty

    ID              shift and go to state 118


state 90

    (46) escritura -> ESCRIBIR L_PAR . escrituraD R_PAR empty
    (47) escrituraD -> . hiper_exp neu_escritura empty
    (48) escrituraD -> . LETRERO empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    LETRERO         shift and go to state 121
    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    escrituraD                     shift and go to state 119
    hiper_exp                      shift and go to state 120
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 91

    (49) decision -> SI L_PAR . hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 122
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 92

    (52) condicional -> MIENTRAS L_PAR . neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (116) neu_condicionalAntes -> .

    L_PAR           reduce using rule 116 (neu_condicionalAntes -> .)
    ID              reduce using rule 116 (neu_condicionalAntes -> .)
    ENTEROVAL       reduce using rule 116 (neu_condicionalAntes -> .)
    FLOTANTEVAL     reduce using rule 116 (neu_condicionalAntes -> .)
    CARACTERVAL     reduce using rule 116 (neu_condicionalAntes -> .)

    neu_condicionalAntes           shift and go to state 123

state 93

    (53) no_condicional -> DESDE L_PAR . asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (54) asignacionFor -> . ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    ID              shift and go to state 125

    asignacionFor                  shift and go to state 124

state 94

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var . neu_recibirParametros recibir_parametrosD empty
    (124) neu_recibirParametros -> .

    COMA            reduce using rule 124 (neu_recibirParametros -> .)
    R_PAR           reduce using rule 124 (neu_recibirParametros -> .)

    neu_recibirParametros          shift and go to state 126

state 95

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables . bloque neu_endFuncion funcionesD
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 127

state 96

    (28) bloque -> L_LLAVE bloqueU R_LLAVE empty .

    $end            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ENTERO          reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    FLOTANTE        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    CARACTER        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    VOID            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PRINCIPAL       reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SINO            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ID              reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    REGRESA         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    LEER            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ESCRIBIR        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SI              reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    MIENTRAS        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    DESDE           reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    R_LLAVE         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)


state 97

    (29) bloqueU -> estatuto bloqueD neu_vaciarPilas . empty
    (86) empty -> .

    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 128

state 98

    (31) bloqueD -> bloqueU empty .

    R_LLAVE         reduce using rule 31 (bloqueD -> bloqueU empty .)


state 99

    (33) estatuto -> asignacion PUNTOYCOMA empty .

    ID              reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    REGRESA         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    LEER            reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    SI              reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    DESDE           reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)


state 100

    (34) estatuto -> llamada PUNTOYCOMA empty .

    ID              reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    REGRESA         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    LEER            reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    SI              reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    DESDE           reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)


state 101

    (35) estatuto -> retorno PUNTOYCOMA empty .

    ID              reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    REGRESA         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    LEER            reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    SI              reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    DESDE           reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)


state 102

    (36) estatuto -> lectura PUNTOYCOMA empty .

    ID              reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    LEER            reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    SI              reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    DESDE           reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)


state 103

    (37) estatuto -> escritura PUNTOYCOMA empty .

    ID              reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    LEER            reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    SI              reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    DESDE           reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)


state 104

    (42) asignacion -> ID neu_addID IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 129

state 105

    (43) llamada -> ID neu_llamada_era L_PAR . mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (24) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (25) mandar_parametros -> . empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (86) empty -> .
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 86 (empty -> .)
    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    mandar_parametros              shift and go to state 130
    empty                          shift and go to state 131
    hiper_exp                      shift and go to state 132
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 106

    (81) factor -> L_PAR . hiper_exp R_PAR empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 133
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 107

    (44) retorno -> REGRESA L_PAR hiper_exp . neu_retorno R_PAR empty
    (112) neu_retorno -> .

    R_PAR           reduce using rule 112 (neu_retorno -> .)

    neu_retorno                    shift and go to state 134

state 108

    (67) hiper_exp -> super_exp . neu_hacerHiperExp hiper_expU
    (108) neu_hacerHiperExp -> .

    OR              reduce using rule 108 (neu_hacerHiperExp -> .)
    AND             reduce using rule 108 (neu_hacerHiperExp -> .)
    R_PAR           reduce using rule 108 (neu_hacerHiperExp -> .)
    COMA            reduce using rule 108 (neu_hacerHiperExp -> .)
    PUNTOYCOMA      reduce using rule 108 (neu_hacerHiperExp -> .)
    HACER           reduce using rule 108 (neu_hacerHiperExp -> .)

    neu_hacerHiperExp              shift and go to state 135

state 109

    (70) super_exp -> exp . neu_hacerSuperExp super_expU
    (107) neu_hacerSuperExp -> .

    MENORQUE        reduce using rule 107 (neu_hacerSuperExp -> .)
    MAYORQUE        reduce using rule 107 (neu_hacerSuperExp -> .)
    MENORIGUALQUE   reduce using rule 107 (neu_hacerSuperExp -> .)
    MAYORIGUALQUE   reduce using rule 107 (neu_hacerSuperExp -> .)
    IGUALQUE        reduce using rule 107 (neu_hacerSuperExp -> .)
    DIFQUE          reduce using rule 107 (neu_hacerSuperExp -> .)
    OR              reduce using rule 107 (neu_hacerSuperExp -> .)
    AND             reduce using rule 107 (neu_hacerSuperExp -> .)
    R_PAR           reduce using rule 107 (neu_hacerSuperExp -> .)
    COMA            reduce using rule 107 (neu_hacerSuperExp -> .)
    PUNTOYCOMA      reduce using rule 107 (neu_hacerSuperExp -> .)
    HACER           reduce using rule 107 (neu_hacerSuperExp -> .)

    neu_hacerSuperExp              shift and go to state 136

state 110

    (73) exp -> termino . neu_hacerExp expU
    (106) neu_hacerExp -> .

    MAS             reduce using rule 106 (neu_hacerExp -> .)
    MENOS           reduce using rule 106 (neu_hacerExp -> .)
    MENORQUE        reduce using rule 106 (neu_hacerExp -> .)
    MAYORQUE        reduce using rule 106 (neu_hacerExp -> .)
    MENORIGUALQUE   reduce using rule 106 (neu_hacerExp -> .)
    MAYORIGUALQUE   reduce using rule 106 (neu_hacerExp -> .)
    IGUALQUE        reduce using rule 106 (neu_hacerExp -> .)
    DIFQUE          reduce using rule 106 (neu_hacerExp -> .)
    OR              reduce using rule 106 (neu_hacerExp -> .)
    AND             reduce using rule 106 (neu_hacerExp -> .)
    R_PAR           reduce using rule 106 (neu_hacerExp -> .)
    COMA            reduce using rule 106 (neu_hacerExp -> .)
    PUNTOYCOMA      reduce using rule 106 (neu_hacerExp -> .)
    HACER           reduce using rule 106 (neu_hacerExp -> .)

    neu_hacerExp                   shift and go to state 137

state 111

    (76) termino -> factor . neu_hacerTermino terminoU
    (105) neu_hacerTermino -> .

    MULT            reduce using rule 105 (neu_hacerTermino -> .)
    DIV             reduce using rule 105 (neu_hacerTermino -> .)
    MAS             reduce using rule 105 (neu_hacerTermino -> .)
    MENOS           reduce using rule 105 (neu_hacerTermino -> .)
    MENORQUE        reduce using rule 105 (neu_hacerTermino -> .)
    MAYORQUE        reduce using rule 105 (neu_hacerTermino -> .)
    MENORIGUALQUE   reduce using rule 105 (neu_hacerTermino -> .)
    MAYORIGUALQUE   reduce using rule 105 (neu_hacerTermino -> .)
    IGUALQUE        reduce using rule 105 (neu_hacerTermino -> .)
    DIFQUE          reduce using rule 105 (neu_hacerTermino -> .)
    OR              reduce using rule 105 (neu_hacerTermino -> .)
    AND             reduce using rule 105 (neu_hacerTermino -> .)
    R_PAR           reduce using rule 105 (neu_hacerTermino -> .)
    COMA            reduce using rule 105 (neu_hacerTermino -> .)
    PUNTOYCOMA      reduce using rule 105 (neu_hacerTermino -> .)
    HACER           reduce using rule 105 (neu_hacerTermino -> .)

    neu_hacerTermino               shift and go to state 138

state 112

    (79) factor -> varcte . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 139

state 113

    (80) factor -> llamada . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 140

state 114

    (82) varcte -> ID . neu_addID empty
    (43) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (94) neu_addID -> .
    (99) neu_llamada_era -> .

    MULT            reduce using rule 94 (neu_addID -> .)
    DIV             reduce using rule 94 (neu_addID -> .)
    MAS             reduce using rule 94 (neu_addID -> .)
    MENOS           reduce using rule 94 (neu_addID -> .)
    MENORQUE        reduce using rule 94 (neu_addID -> .)
    MAYORQUE        reduce using rule 94 (neu_addID -> .)
    MENORIGUALQUE   reduce using rule 94 (neu_addID -> .)
    MAYORIGUALQUE   reduce using rule 94 (neu_addID -> .)
    IGUALQUE        reduce using rule 94 (neu_addID -> .)
    DIFQUE          reduce using rule 94 (neu_addID -> .)
    OR              reduce using rule 94 (neu_addID -> .)
    AND             reduce using rule 94 (neu_addID -> .)
    R_PAR           reduce using rule 94 (neu_addID -> .)
    COMA            reduce using rule 94 (neu_addID -> .)
    PUNTOYCOMA      reduce using rule 94 (neu_addID -> .)
    HACER           reduce using rule 94 (neu_addID -> .)
    L_PAR           reduce using rule 99 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 141
    neu_llamada_era                shift and go to state 87

state 115

    (83) varcte -> ENTEROVAL . neu_addConstanteEntero empty
    (95) neu_addConstanteEntero -> .

    MULT            reduce using rule 95 (neu_addConstanteEntero -> .)
    DIV             reduce using rule 95 (neu_addConstanteEntero -> .)
    MAS             reduce using rule 95 (neu_addConstanteEntero -> .)
    MENOS           reduce using rule 95 (neu_addConstanteEntero -> .)
    MENORQUE        reduce using rule 95 (neu_addConstanteEntero -> .)
    MAYORQUE        reduce using rule 95 (neu_addConstanteEntero -> .)
    MENORIGUALQUE   reduce using rule 95 (neu_addConstanteEntero -> .)
    MAYORIGUALQUE   reduce using rule 95 (neu_addConstanteEntero -> .)
    IGUALQUE        reduce using rule 95 (neu_addConstanteEntero -> .)
    DIFQUE          reduce using rule 95 (neu_addConstanteEntero -> .)
    OR              reduce using rule 95 (neu_addConstanteEntero -> .)
    AND             reduce using rule 95 (neu_addConstanteEntero -> .)
    R_PAR           reduce using rule 95 (neu_addConstanteEntero -> .)
    COMA            reduce using rule 95 (neu_addConstanteEntero -> .)
    PUNTOYCOMA      reduce using rule 95 (neu_addConstanteEntero -> .)
    HACER           reduce using rule 95 (neu_addConstanteEntero -> .)

    neu_addConstanteEntero         shift and go to state 142

state 116

    (84) varcte -> FLOTANTEVAL . neu_addConstanteFlotante empty
    (96) neu_addConstanteFlotante -> .

    MULT            reduce using rule 96 (neu_addConstanteFlotante -> .)
    DIV             reduce using rule 96 (neu_addConstanteFlotante -> .)
    MAS             reduce using rule 96 (neu_addConstanteFlotante -> .)
    MENOS           reduce using rule 96 (neu_addConstanteFlotante -> .)
    MENORQUE        reduce using rule 96 (neu_addConstanteFlotante -> .)
    MAYORQUE        reduce using rule 96 (neu_addConstanteFlotante -> .)
    MENORIGUALQUE   reduce using rule 96 (neu_addConstanteFlotante -> .)
    MAYORIGUALQUE   reduce using rule 96 (neu_addConstanteFlotante -> .)
    IGUALQUE        reduce using rule 96 (neu_addConstanteFlotante -> .)
    DIFQUE          reduce using rule 96 (neu_addConstanteFlotante -> .)
    OR              reduce using rule 96 (neu_addConstanteFlotante -> .)
    AND             reduce using rule 96 (neu_addConstanteFlotante -> .)
    R_PAR           reduce using rule 96 (neu_addConstanteFlotante -> .)
    COMA            reduce using rule 96 (neu_addConstanteFlotante -> .)
    PUNTOYCOMA      reduce using rule 96 (neu_addConstanteFlotante -> .)
    HACER           reduce using rule 96 (neu_addConstanteFlotante -> .)

    neu_addConstanteFlotante       shift and go to state 143

state 117

    (85) varcte -> CARACTERVAL . neu_addConstanteCaracter empty
    (97) neu_addConstanteCaracter -> .

    MULT            reduce using rule 97 (neu_addConstanteCaracter -> .)
    DIV             reduce using rule 97 (neu_addConstanteCaracter -> .)
    MAS             reduce using rule 97 (neu_addConstanteCaracter -> .)
    MENOS           reduce using rule 97 (neu_addConstanteCaracter -> .)
    MENORQUE        reduce using rule 97 (neu_addConstanteCaracter -> .)
    MAYORQUE        reduce using rule 97 (neu_addConstanteCaracter -> .)
    MENORIGUALQUE   reduce using rule 97 (neu_addConstanteCaracter -> .)
    MAYORIGUALQUE   reduce using rule 97 (neu_addConstanteCaracter -> .)
    IGUALQUE        reduce using rule 97 (neu_addConstanteCaracter -> .)
    DIFQUE          reduce using rule 97 (neu_addConstanteCaracter -> .)
    OR              reduce using rule 97 (neu_addConstanteCaracter -> .)
    AND             reduce using rule 97 (neu_addConstanteCaracter -> .)
    R_PAR           reduce using rule 97 (neu_addConstanteCaracter -> .)
    COMA            reduce using rule 97 (neu_addConstanteCaracter -> .)
    PUNTOYCOMA      reduce using rule 97 (neu_addConstanteCaracter -> .)
    HACER           reduce using rule 97 (neu_addConstanteCaracter -> .)

    neu_addConstanteCaracter       shift and go to state 144

state 118

    (45) lectura -> LEER L_PAR ID . neu_lectura R_PAR empty
    (110) neu_lectura -> .

    R_PAR           reduce using rule 110 (neu_lectura -> .)

    neu_lectura                    shift and go to state 145

state 119

    (46) escritura -> ESCRIBIR L_PAR escrituraD . R_PAR empty

    R_PAR           shift and go to state 146


state 120

    (47) escrituraD -> hiper_exp . neu_escritura empty
    (111) neu_escritura -> .

    R_PAR           reduce using rule 111 (neu_escritura -> .)

    neu_escritura                  shift and go to state 147

state 121

    (48) escrituraD -> LETRERO . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 148

state 122

    (49) decision -> SI L_PAR hiper_exp . R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    R_PAR           shift and go to state 149


state 123

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes . hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 150
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 124

    (53) no_condicional -> DESDE L_PAR asignacionFor . R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    R_PAR           shift and go to state 151


state 125

    (54) asignacionFor -> ID . neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
    (119) neu_addIDFor -> .

    IGUAL           reduce using rule 119 (neu_addIDFor -> .)

    neu_addIDFor                   shift and go to state 152

state 126

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros . recibir_parametrosD empty
    (22) recibir_parametrosD -> . COMA recibir_parametros empty
    (23) recibir_parametrosD -> . empty
    (86) empty -> .

    COMA            shift and go to state 155
    R_PAR           reduce using rule 86 (empty -> .)

    recibir_parametrosD            shift and go to state 153
    empty                          shift and go to state 154

state 127

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque . neu_endFuncion funcionesD
    (90) neu_endFuncion -> .

    ENTERO          reduce using rule 90 (neu_endFuncion -> .)
    FLOTANTE        reduce using rule 90 (neu_endFuncion -> .)
    CARACTER        reduce using rule 90 (neu_endFuncion -> .)
    VOID            reduce using rule 90 (neu_endFuncion -> .)
    PRINCIPAL       reduce using rule 90 (neu_endFuncion -> .)

    neu_endFuncion                 shift and go to state 156

state 128

    (29) bloqueU -> estatuto bloqueD neu_vaciarPilas empty .

    R_LLAVE         reduce using rule 29 (bloqueU -> estatuto bloqueD neu_vaciarPilas empty .)


state 129

    (42) asignacion -> ID neu_addID IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 157
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 130

    (43) llamada -> ID neu_llamada_era L_PAR mandar_parametros . neu_paramValidacion R_PAR neu_llamada_gosub empty
    (125) neu_paramValidacion -> .

    R_PAR           reduce using rule 125 (neu_paramValidacion -> .)

    neu_paramValidacion            shift and go to state 158

state 131

    (25) mandar_parametros -> empty .

    R_PAR           reduce using rule 25 (mandar_parametros -> empty .)


state 132

    (24) mandar_parametros -> hiper_exp . neu_parametroEnviado mandar_parametrosD empty
    (123) neu_parametroEnviado -> .

    COMA            reduce using rule 123 (neu_parametroEnviado -> .)
    R_PAR           reduce using rule 123 (neu_parametroEnviado -> .)

    neu_parametroEnviado           shift and go to state 159

state 133

    (81) factor -> L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 160


state 134

    (44) retorno -> REGRESA L_PAR hiper_exp neu_retorno . R_PAR empty

    R_PAR           shift and go to state 161


state 135

    (67) hiper_exp -> super_exp neu_hacerHiperExp . hiper_expU
    (68) hiper_expU -> . operadorL hiper_exp empty
    (69) hiper_expU -> . empty
    (59) operadorL -> . OR neu_addOperador empty
    (60) operadorL -> . AND neu_addOperador empty
    (86) empty -> .

    OR              shift and go to state 165
    AND             shift and go to state 166
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    hiper_expU                     shift and go to state 162
    operadorL                      shift and go to state 163
    empty                          shift and go to state 164

state 136

    (70) super_exp -> exp neu_hacerSuperExp . super_expU
    (71) super_expU -> . operadorR super_exp empty
    (72) super_expU -> . empty
    (61) operadorR -> . MENORQUE neu_addOperador empty
    (62) operadorR -> . MAYORQUE neu_addOperador empty
    (63) operadorR -> . MENORIGUALQUE neu_addOperador empty
    (64) operadorR -> . MAYORIGUALQUE neu_addOperador empty
    (65) operadorR -> . IGUALQUE neu_addOperador empty
    (66) operadorR -> . DIFQUE neu_addOperador empty
    (86) empty -> .

    MENORQUE        shift and go to state 170
    MAYORQUE        shift and go to state 171
    MENORIGUALQUE   shift and go to state 172
    MAYORIGUALQUE   shift and go to state 173
    IGUALQUE        shift and go to state 174
    DIFQUE          shift and go to state 175
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    super_expU                     shift and go to state 167
    operadorR                      shift and go to state 168
    empty                          shift and go to state 169

state 137

    (73) exp -> termino neu_hacerExp . expU
    (74) expU -> . operadorA exp
    (75) expU -> . empty
    (55) operadorA -> . MAS neu_addOperador empty
    (56) operadorA -> . MENOS neu_addOperador empty
    (86) empty -> .

    MAS             shift and go to state 179
    MENOS           shift and go to state 180
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    expU                           shift and go to state 176
    operadorA                      shift and go to state 177
    empty                          shift and go to state 178

state 138

    (76) termino -> factor neu_hacerTermino . terminoU
    (77) terminoU -> . operadorT termino
    (78) terminoU -> . empty
    (57) operadorT -> . MULT neu_addOperador empty
    (58) operadorT -> . DIV neu_addOperador empty
    (86) empty -> .

    MULT            shift and go to state 184
    DIV             shift and go to state 185
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    terminoU                       shift and go to state 181
    operadorT                      shift and go to state 182
    empty                          shift and go to state 183

state 139

    (79) factor -> varcte empty .

    MULT            reduce using rule 79 (factor -> varcte empty .)
    DIV             reduce using rule 79 (factor -> varcte empty .)
    MAS             reduce using rule 79 (factor -> varcte empty .)
    MENOS           reduce using rule 79 (factor -> varcte empty .)
    MENORQUE        reduce using rule 79 (factor -> varcte empty .)
    MAYORQUE        reduce using rule 79 (factor -> varcte empty .)
    MENORIGUALQUE   reduce using rule 79 (factor -> varcte empty .)
    MAYORIGUALQUE   reduce using rule 79 (factor -> varcte empty .)
    IGUALQUE        reduce using rule 79 (factor -> varcte empty .)
    DIFQUE          reduce using rule 79 (factor -> varcte empty .)
    OR              reduce using rule 79 (factor -> varcte empty .)
    AND             reduce using rule 79 (factor -> varcte empty .)
    R_PAR           reduce using rule 79 (factor -> varcte empty .)
    COMA            reduce using rule 79 (factor -> varcte empty .)
    PUNTOYCOMA      reduce using rule 79 (factor -> varcte empty .)
    HACER           reduce using rule 79 (factor -> varcte empty .)


state 140

    (80) factor -> llamada empty .

    MULT            reduce using rule 80 (factor -> llamada empty .)
    DIV             reduce using rule 80 (factor -> llamada empty .)
    MAS             reduce using rule 80 (factor -> llamada empty .)
    MENOS           reduce using rule 80 (factor -> llamada empty .)
    MENORQUE        reduce using rule 80 (factor -> llamada empty .)
    MAYORQUE        reduce using rule 80 (factor -> llamada empty .)
    MENORIGUALQUE   reduce using rule 80 (factor -> llamada empty .)
    MAYORIGUALQUE   reduce using rule 80 (factor -> llamada empty .)
    IGUALQUE        reduce using rule 80 (factor -> llamada empty .)
    DIFQUE          reduce using rule 80 (factor -> llamada empty .)
    OR              reduce using rule 80 (factor -> llamada empty .)
    AND             reduce using rule 80 (factor -> llamada empty .)
    R_PAR           reduce using rule 80 (factor -> llamada empty .)
    COMA            reduce using rule 80 (factor -> llamada empty .)
    PUNTOYCOMA      reduce using rule 80 (factor -> llamada empty .)
    HACER           reduce using rule 80 (factor -> llamada empty .)


state 141

    (82) varcte -> ID neu_addID . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 186

state 142

    (83) varcte -> ENTEROVAL neu_addConstanteEntero . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 187

state 143

    (84) varcte -> FLOTANTEVAL neu_addConstanteFlotante . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 188

state 144

    (85) varcte -> CARACTERVAL neu_addConstanteCaracter . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 189

state 145

    (45) lectura -> LEER L_PAR ID neu_lectura . R_PAR empty

    R_PAR           shift and go to state 190


state 146

    (46) escritura -> ESCRIBIR L_PAR escrituraD R_PAR . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)

    empty                          shift and go to state 191

state 147

    (47) escrituraD -> hiper_exp neu_escritura . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 192

state 148

    (48) escrituraD -> LETRERO empty .

    R_PAR           reduce using rule 48 (escrituraD -> LETRERO empty .)


state 149

    (49) decision -> SI L_PAR hiper_exp R_PAR . neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (113) neu_iniciarDecision -> .

    ENTONCES        reduce using rule 113 (neu_iniciarDecision -> .)

    neu_iniciarDecision            shift and go to state 193

state 150

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp . neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (117) neu_condicionalDurante -> .

    R_PAR           reduce using rule 117 (neu_condicionalDurante -> .)

    neu_condicionalDurante         shift and go to state 194

state 151

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR . HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    HASTA           shift and go to state 195


state 152

    (54) asignacionFor -> ID neu_addIDFor . IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    IGUAL           shift and go to state 196


state 153

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 197

state 154

    (23) recibir_parametrosD -> empty .

    R_PAR           reduce using rule 23 (recibir_parametrosD -> empty .)


state 155

    (22) recibir_parametrosD -> COMA . recibir_parametros empty
    (20) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (21) recibir_parametros -> . empty
    (86) empty -> .

    ID              shift and go to state 48
    R_PAR           reduce using rule 86 (empty -> .)

    recibir_parametros             shift and go to state 198
    empty                          shift and go to state 50

state 156

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion . funcionesD
    (11) funcionesD -> . funciones
    (12) funcionesD -> . empty
    (8) funciones -> . funcionesU
    (9) funciones -> . empty
    (86) empty -> .
    (10) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (13) tipo_funcion -> . ENTERO empty
    (14) tipo_funcion -> . FLOTANTE empty
    (15) tipo_funcion -> . CARACTER empty
    (16) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 86 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    tipo_funcion                   shift and go to state 12
    funcionesD                     shift and go to state 199
    funciones                      shift and go to state 200
    empty                          shift and go to state 201
    funcionesU                     shift and go to state 11

state 157

    (42) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (109) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 109 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 202

state 158

    (43) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion . R_PAR neu_llamada_gosub empty

    R_PAR           shift and go to state 203


state 159

    (24) mandar_parametros -> hiper_exp neu_parametroEnviado . mandar_parametrosD empty
    (26) mandar_parametrosD -> . COMA mandar_parametros empty
    (27) mandar_parametrosD -> . empty
    (86) empty -> .

    COMA            shift and go to state 206
    R_PAR           reduce using rule 86 (empty -> .)

    mandar_parametrosD             shift and go to state 204
    empty                          shift and go to state 205

state 160

    (81) factor -> L_PAR hiper_exp R_PAR . empty
    (86) empty -> .

    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 207

state 161

    (44) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)

    empty                          shift and go to state 208

state 162

    (67) hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .

    R_PAR           reduce using rule 67 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    COMA            reduce using rule 67 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    PUNTOYCOMA      reduce using rule 67 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    HACER           reduce using rule 67 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)


state 163

    (68) hiper_expU -> operadorL . hiper_exp empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 209
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 164

    (69) hiper_expU -> empty .

    R_PAR           reduce using rule 69 (hiper_expU -> empty .)
    COMA            reduce using rule 69 (hiper_expU -> empty .)
    PUNTOYCOMA      reduce using rule 69 (hiper_expU -> empty .)
    HACER           reduce using rule 69 (hiper_expU -> empty .)


state 165

    (59) operadorL -> OR . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 210

state 166

    (60) operadorL -> AND . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 211

state 167

    (70) super_exp -> exp neu_hacerSuperExp super_expU .

    OR              reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)
    AND             reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_PAR           reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)
    COMA            reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)
    PUNTOYCOMA      reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)
    HACER           reduce using rule 70 (super_exp -> exp neu_hacerSuperExp super_expU .)


state 168

    (71) super_expU -> operadorR . super_exp empty
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    super_exp                      shift and go to state 212
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 169

    (72) super_expU -> empty .

    OR              reduce using rule 72 (super_expU -> empty .)
    AND             reduce using rule 72 (super_expU -> empty .)
    R_PAR           reduce using rule 72 (super_expU -> empty .)
    COMA            reduce using rule 72 (super_expU -> empty .)
    PUNTOYCOMA      reduce using rule 72 (super_expU -> empty .)
    HACER           reduce using rule 72 (super_expU -> empty .)


state 170

    (61) operadorR -> MENORQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 213

state 171

    (62) operadorR -> MAYORQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 214

state 172

    (63) operadorR -> MENORIGUALQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 215

state 173

    (64) operadorR -> MAYORIGUALQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 216

state 174

    (65) operadorR -> IGUALQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 217

state 175

    (66) operadorR -> DIFQUE . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 218

state 176

    (73) exp -> termino neu_hacerExp expU .

    MENORQUE        reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    MAYORQUE        reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    MENORIGUALQUE   reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    MAYORIGUALQUE   reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    IGUALQUE        reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    DIFQUE          reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    OR              reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    AND             reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    R_PAR           reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    COMA            reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    PUNTOYCOMA      reduce using rule 73 (exp -> termino neu_hacerExp expU .)
    HACER           reduce using rule 73 (exp -> termino neu_hacerExp expU .)


state 177

    (74) expU -> operadorA . exp
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    exp                            shift and go to state 219
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 178

    (75) expU -> empty .

    MENORQUE        reduce using rule 75 (expU -> empty .)
    MAYORQUE        reduce using rule 75 (expU -> empty .)
    MENORIGUALQUE   reduce using rule 75 (expU -> empty .)
    MAYORIGUALQUE   reduce using rule 75 (expU -> empty .)
    IGUALQUE        reduce using rule 75 (expU -> empty .)
    DIFQUE          reduce using rule 75 (expU -> empty .)
    OR              reduce using rule 75 (expU -> empty .)
    AND             reduce using rule 75 (expU -> empty .)
    R_PAR           reduce using rule 75 (expU -> empty .)
    COMA            reduce using rule 75 (expU -> empty .)
    PUNTOYCOMA      reduce using rule 75 (expU -> empty .)
    HACER           reduce using rule 75 (expU -> empty .)


state 179

    (55) operadorA -> MAS . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 220

state 180

    (56) operadorA -> MENOS . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 221

state 181

    (76) termino -> factor neu_hacerTermino terminoU .

    MAS             reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    MENOS           reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    MENORQUE        reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    MAYORQUE        reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    MENORIGUALQUE   reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    MAYORIGUALQUE   reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    IGUALQUE        reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    DIFQUE          reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    OR              reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    AND             reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    R_PAR           reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    COMA            reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    PUNTOYCOMA      reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)
    HACER           reduce using rule 76 (termino -> factor neu_hacerTermino terminoU .)


state 182

    (77) terminoU -> operadorT . termino
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    termino                        shift and go to state 222
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 183

    (78) terminoU -> empty .

    MAS             reduce using rule 78 (terminoU -> empty .)
    MENOS           reduce using rule 78 (terminoU -> empty .)
    MENORQUE        reduce using rule 78 (terminoU -> empty .)
    MAYORQUE        reduce using rule 78 (terminoU -> empty .)
    MENORIGUALQUE   reduce using rule 78 (terminoU -> empty .)
    MAYORIGUALQUE   reduce using rule 78 (terminoU -> empty .)
    IGUALQUE        reduce using rule 78 (terminoU -> empty .)
    DIFQUE          reduce using rule 78 (terminoU -> empty .)
    OR              reduce using rule 78 (terminoU -> empty .)
    AND             reduce using rule 78 (terminoU -> empty .)
    R_PAR           reduce using rule 78 (terminoU -> empty .)
    COMA            reduce using rule 78 (terminoU -> empty .)
    PUNTOYCOMA      reduce using rule 78 (terminoU -> empty .)
    HACER           reduce using rule 78 (terminoU -> empty .)


state 184

    (57) operadorT -> MULT . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 223

state 185

    (58) operadorT -> DIV . neu_addOperador empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 224

state 186

    (82) varcte -> ID neu_addID empty .

    MULT            reduce using rule 82 (varcte -> ID neu_addID empty .)
    DIV             reduce using rule 82 (varcte -> ID neu_addID empty .)
    MAS             reduce using rule 82 (varcte -> ID neu_addID empty .)
    MENOS           reduce using rule 82 (varcte -> ID neu_addID empty .)
    MENORQUE        reduce using rule 82 (varcte -> ID neu_addID empty .)
    MAYORQUE        reduce using rule 82 (varcte -> ID neu_addID empty .)
    MENORIGUALQUE   reduce using rule 82 (varcte -> ID neu_addID empty .)
    MAYORIGUALQUE   reduce using rule 82 (varcte -> ID neu_addID empty .)
    IGUALQUE        reduce using rule 82 (varcte -> ID neu_addID empty .)
    DIFQUE          reduce using rule 82 (varcte -> ID neu_addID empty .)
    OR              reduce using rule 82 (varcte -> ID neu_addID empty .)
    AND             reduce using rule 82 (varcte -> ID neu_addID empty .)
    R_PAR           reduce using rule 82 (varcte -> ID neu_addID empty .)
    COMA            reduce using rule 82 (varcte -> ID neu_addID empty .)
    PUNTOYCOMA      reduce using rule 82 (varcte -> ID neu_addID empty .)
    HACER           reduce using rule 82 (varcte -> ID neu_addID empty .)


state 187

    (83) varcte -> ENTEROVAL neu_addConstanteEntero empty .

    MULT            reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIV             reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAS             reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENOS           reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORQUE        reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORQUE        reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORIGUALQUE   reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORIGUALQUE   reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    IGUALQUE        reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIFQUE          reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    OR              reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    AND             reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_PAR           reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    COMA            reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    PUNTOYCOMA      reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    HACER           reduce using rule 83 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)


state 188

    (84) varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .

    MULT            reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIV             reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAS             reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENOS           reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORQUE        reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORQUE        reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORIGUALQUE   reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORIGUALQUE   reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    IGUALQUE        reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIFQUE          reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    OR              reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    AND             reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_PAR           reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    COMA            reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    PUNTOYCOMA      reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    HACER           reduce using rule 84 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)


state 189

    (85) varcte -> CARACTERVAL neu_addConstanteCaracter empty .

    MULT            reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIV             reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAS             reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENOS           reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORQUE        reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORQUE        reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORIGUALQUE   reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORIGUALQUE   reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    IGUALQUE        reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIFQUE          reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    OR              reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    AND             reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_PAR           reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    COMA            reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    PUNTOYCOMA      reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    HACER           reduce using rule 85 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)


state 190

    (45) lectura -> LEER L_PAR ID neu_lectura R_PAR . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)

    empty                          shift and go to state 225

state 191

    (46) escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .

    PUNTOYCOMA      reduce using rule 46 (escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .)


state 192

    (47) escrituraD -> hiper_exp neu_escritura empty .

    R_PAR           reduce using rule 47 (escrituraD -> hiper_exp neu_escritura empty .)


state 193

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision . ENTONCES bloque decisionU neu_endDecision empty

    ENTONCES        shift and go to state 226


state 194

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante . R_PAR HACER bloque neu_condicionalDespues empty

    R_PAR           shift and go to state 227


state 195

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA . hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 228
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 196

    (54) asignacionFor -> ID neu_addIDFor IGUAL . neu_addOperador hiper_exp neu_asignacionFor empty
    (101) neu_addOperador -> .

    L_PAR           reduce using rule 101 (neu_addOperador -> .)
    ID              reduce using rule 101 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 101 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 101 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 101 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 229

state 197

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .

    R_PAR           reduce using rule 20 (recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .)


state 198

    (22) recibir_parametrosD -> COMA recibir_parametros . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 230

state 199

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .

    PRINCIPAL       reduce using rule 10 (funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .)


state 200

    (11) funcionesD -> funciones .

    PRINCIPAL       reduce using rule 11 (funcionesD -> funciones .)


state 201

    (12) funcionesD -> empty .
    (9) funciones -> empty .

  ! reduce/reduce conflict for PRINCIPAL resolved using rule 9 (funciones -> empty .)
    PRINCIPAL       reduce using rule 9 (funciones -> empty .)

  ! PRINCIPAL       [ reduce using rule 12 (funcionesD -> empty .) ]


state 202

    (42) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)

    empty                          shift and go to state 231

state 203

    (43) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR . neu_llamada_gosub empty
    (100) neu_llamada_gosub -> .

    PUNTOYCOMA      reduce using rule 100 (neu_llamada_gosub -> .)
    MULT            reduce using rule 100 (neu_llamada_gosub -> .)
    DIV             reduce using rule 100 (neu_llamada_gosub -> .)
    MAS             reduce using rule 100 (neu_llamada_gosub -> .)
    MENOS           reduce using rule 100 (neu_llamada_gosub -> .)
    MENORQUE        reduce using rule 100 (neu_llamada_gosub -> .)
    MAYORQUE        reduce using rule 100 (neu_llamada_gosub -> .)
    MENORIGUALQUE   reduce using rule 100 (neu_llamada_gosub -> .)
    MAYORIGUALQUE   reduce using rule 100 (neu_llamada_gosub -> .)
    IGUALQUE        reduce using rule 100 (neu_llamada_gosub -> .)
    DIFQUE          reduce using rule 100 (neu_llamada_gosub -> .)
    OR              reduce using rule 100 (neu_llamada_gosub -> .)
    AND             reduce using rule 100 (neu_llamada_gosub -> .)
    R_PAR           reduce using rule 100 (neu_llamada_gosub -> .)
    COMA            reduce using rule 100 (neu_llamada_gosub -> .)
    HACER           reduce using rule 100 (neu_llamada_gosub -> .)

    neu_llamada_gosub              shift and go to state 232

state 204

    (24) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 233

state 205

    (27) mandar_parametrosD -> empty .

    R_PAR           reduce using rule 27 (mandar_parametrosD -> empty .)


state 206

    (26) mandar_parametrosD -> COMA . mandar_parametros empty
    (24) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (25) mandar_parametros -> . empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (86) empty -> .
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 86 (empty -> .)
    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    mandar_parametros              shift and go to state 234
    empty                          shift and go to state 131
    hiper_exp                      shift and go to state 132
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 207

    (81) factor -> L_PAR hiper_exp R_PAR empty .

    MULT            reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIV             reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAS             reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENOS           reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORQUE        reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORQUE        reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORIGUALQUE   reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORIGUALQUE   reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    IGUALQUE        reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIFQUE          reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    OR              reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    AND             reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_PAR           reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    COMA            reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    PUNTOYCOMA      reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)
    HACER           reduce using rule 81 (factor -> L_PAR hiper_exp R_PAR empty .)


state 208

    (44) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .

    PUNTOYCOMA      reduce using rule 44 (retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .)


state 209

    (68) hiper_expU -> operadorL hiper_exp . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 235

state 210

    (59) operadorL -> OR neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 236

state 211

    (60) operadorL -> AND neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 237

state 212

    (71) super_expU -> operadorR super_exp . empty
    (86) empty -> .

    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 238

state 213

    (61) operadorR -> MENORQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 239

state 214

    (62) operadorR -> MAYORQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 240

state 215

    (63) operadorR -> MENORIGUALQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 241

state 216

    (64) operadorR -> MAYORIGUALQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 242

state 217

    (65) operadorR -> IGUALQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 243

state 218

    (66) operadorR -> DIFQUE neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 244

state 219

    (74) expU -> operadorA exp .

    MENORQUE        reduce using rule 74 (expU -> operadorA exp .)
    MAYORQUE        reduce using rule 74 (expU -> operadorA exp .)
    MENORIGUALQUE   reduce using rule 74 (expU -> operadorA exp .)
    MAYORIGUALQUE   reduce using rule 74 (expU -> operadorA exp .)
    IGUALQUE        reduce using rule 74 (expU -> operadorA exp .)
    DIFQUE          reduce using rule 74 (expU -> operadorA exp .)
    OR              reduce using rule 74 (expU -> operadorA exp .)
    AND             reduce using rule 74 (expU -> operadorA exp .)
    R_PAR           reduce using rule 74 (expU -> operadorA exp .)
    COMA            reduce using rule 74 (expU -> operadorA exp .)
    PUNTOYCOMA      reduce using rule 74 (expU -> operadorA exp .)
    HACER           reduce using rule 74 (expU -> operadorA exp .)


state 220

    (55) operadorA -> MAS neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 245

state 221

    (56) operadorA -> MENOS neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 246

state 222

    (77) terminoU -> operadorT termino .

    MAS             reduce using rule 77 (terminoU -> operadorT termino .)
    MENOS           reduce using rule 77 (terminoU -> operadorT termino .)
    MENORQUE        reduce using rule 77 (terminoU -> operadorT termino .)
    MAYORQUE        reduce using rule 77 (terminoU -> operadorT termino .)
    MENORIGUALQUE   reduce using rule 77 (terminoU -> operadorT termino .)
    MAYORIGUALQUE   reduce using rule 77 (terminoU -> operadorT termino .)
    IGUALQUE        reduce using rule 77 (terminoU -> operadorT termino .)
    DIFQUE          reduce using rule 77 (terminoU -> operadorT termino .)
    OR              reduce using rule 77 (terminoU -> operadorT termino .)
    AND             reduce using rule 77 (terminoU -> operadorT termino .)
    R_PAR           reduce using rule 77 (terminoU -> operadorT termino .)
    COMA            reduce using rule 77 (terminoU -> operadorT termino .)
    PUNTOYCOMA      reduce using rule 77 (terminoU -> operadorT termino .)
    HACER           reduce using rule 77 (terminoU -> operadorT termino .)


state 223

    (57) operadorT -> MULT neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 247

state 224

    (58) operadorT -> DIV neu_addOperador . empty
    (86) empty -> .

    L_PAR           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ENTEROVAL       reduce using rule 86 (empty -> .)
    FLOTANTEVAL     reduce using rule 86 (empty -> .)
    CARACTERVAL     reduce using rule 86 (empty -> .)

    empty                          shift and go to state 248

state 225

    (45) lectura -> LEER L_PAR ID neu_lectura R_PAR empty .

    PUNTOYCOMA      reduce using rule 45 (lectura -> LEER L_PAR ID neu_lectura R_PAR empty .)


state 226

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES . bloque decisionU neu_endDecision empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 249

state 227

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR . HACER bloque neu_condicionalDespues empty

    HACER           shift and go to state 250


state 228

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp . neu_boolFor HACER bloque neu_endCondicion empty
    (121) neu_boolFor -> .

    HACER           reduce using rule 121 (neu_boolFor -> .)

    neu_boolFor                    shift and go to state 251

state 229

    (54) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador . hiper_exp neu_asignacionFor empty
    (67) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (70) super_exp -> . exp neu_hacerSuperExp super_expU
    (73) exp -> . termino neu_hacerExp expU
    (76) termino -> . factor neu_hacerTermino terminoU
    (79) factor -> . varcte empty
    (80) factor -> . llamada empty
    (81) factor -> . L_PAR hiper_exp R_PAR empty
    (82) varcte -> . ID neu_addID empty
    (83) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (84) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (85) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (43) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 106
    ID              shift and go to state 114
    ENTEROVAL       shift and go to state 115
    FLOTANTEVAL     shift and go to state 116
    CARACTERVAL     shift and go to state 117

    hiper_exp                      shift and go to state 252
    super_exp                      shift and go to state 108
    exp                            shift and go to state 109
    termino                        shift and go to state 110
    factor                         shift and go to state 111
    varcte                         shift and go to state 112
    llamada                        shift and go to state 113

state 230

    (22) recibir_parametrosD -> COMA recibir_parametros empty .

    R_PAR           reduce using rule 22 (recibir_parametrosD -> COMA recibir_parametros empty .)


state 231

    (42) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 42 (asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 232

    (43) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub . empty
    (86) empty -> .

    PUNTOYCOMA      reduce using rule 86 (empty -> .)
    MULT            reduce using rule 86 (empty -> .)
    DIV             reduce using rule 86 (empty -> .)
    MAS             reduce using rule 86 (empty -> .)
    MENOS           reduce using rule 86 (empty -> .)
    MENORQUE        reduce using rule 86 (empty -> .)
    MAYORQUE        reduce using rule 86 (empty -> .)
    MENORIGUALQUE   reduce using rule 86 (empty -> .)
    MAYORIGUALQUE   reduce using rule 86 (empty -> .)
    IGUALQUE        reduce using rule 86 (empty -> .)
    DIFQUE          reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    R_PAR           reduce using rule 86 (empty -> .)
    COMA            reduce using rule 86 (empty -> .)
    HACER           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 253

state 233

    (24) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .

    R_PAR           reduce using rule 24 (mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .)


state 234

    (26) mandar_parametrosD -> COMA mandar_parametros . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 254

state 235

    (68) hiper_expU -> operadorL hiper_exp empty .

    R_PAR           reduce using rule 68 (hiper_expU -> operadorL hiper_exp empty .)
    COMA            reduce using rule 68 (hiper_expU -> operadorL hiper_exp empty .)
    PUNTOYCOMA      reduce using rule 68 (hiper_expU -> operadorL hiper_exp empty .)
    HACER           reduce using rule 68 (hiper_expU -> operadorL hiper_exp empty .)


state 236

    (59) operadorL -> OR neu_addOperador empty .

    L_PAR           reduce using rule 59 (operadorL -> OR neu_addOperador empty .)
    ID              reduce using rule 59 (operadorL -> OR neu_addOperador empty .)
    ENTEROVAL       reduce using rule 59 (operadorL -> OR neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 59 (operadorL -> OR neu_addOperador empty .)
    CARACTERVAL     reduce using rule 59 (operadorL -> OR neu_addOperador empty .)


state 237

    (60) operadorL -> AND neu_addOperador empty .

    L_PAR           reduce using rule 60 (operadorL -> AND neu_addOperador empty .)
    ID              reduce using rule 60 (operadorL -> AND neu_addOperador empty .)
    ENTEROVAL       reduce using rule 60 (operadorL -> AND neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 60 (operadorL -> AND neu_addOperador empty .)
    CARACTERVAL     reduce using rule 60 (operadorL -> AND neu_addOperador empty .)


state 238

    (71) super_expU -> operadorR super_exp empty .

    OR              reduce using rule 71 (super_expU -> operadorR super_exp empty .)
    AND             reduce using rule 71 (super_expU -> operadorR super_exp empty .)
    R_PAR           reduce using rule 71 (super_expU -> operadorR super_exp empty .)
    COMA            reduce using rule 71 (super_expU -> operadorR super_exp empty .)
    PUNTOYCOMA      reduce using rule 71 (super_expU -> operadorR super_exp empty .)
    HACER           reduce using rule 71 (super_expU -> operadorR super_exp empty .)


state 239

    (61) operadorR -> MENORQUE neu_addOperador empty .

    L_PAR           reduce using rule 61 (operadorR -> MENORQUE neu_addOperador empty .)
    ID              reduce using rule 61 (operadorR -> MENORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 61 (operadorR -> MENORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 61 (operadorR -> MENORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 61 (operadorR -> MENORQUE neu_addOperador empty .)


state 240

    (62) operadorR -> MAYORQUE neu_addOperador empty .

    L_PAR           reduce using rule 62 (operadorR -> MAYORQUE neu_addOperador empty .)
    ID              reduce using rule 62 (operadorR -> MAYORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 62 (operadorR -> MAYORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 62 (operadorR -> MAYORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 62 (operadorR -> MAYORQUE neu_addOperador empty .)


state 241

    (63) operadorR -> MENORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 63 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 63 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 63 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 63 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 63 (operadorR -> MENORIGUALQUE neu_addOperador empty .)


state 242

    (64) operadorR -> MAYORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 64 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 64 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 64 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 64 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 64 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)


state 243

    (65) operadorR -> IGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 65 (operadorR -> IGUALQUE neu_addOperador empty .)
    ID              reduce using rule 65 (operadorR -> IGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 65 (operadorR -> IGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 65 (operadorR -> IGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 65 (operadorR -> IGUALQUE neu_addOperador empty .)


state 244

    (66) operadorR -> DIFQUE neu_addOperador empty .

    L_PAR           reduce using rule 66 (operadorR -> DIFQUE neu_addOperador empty .)
    ID              reduce using rule 66 (operadorR -> DIFQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 66 (operadorR -> DIFQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 66 (operadorR -> DIFQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 66 (operadorR -> DIFQUE neu_addOperador empty .)


state 245

    (55) operadorA -> MAS neu_addOperador empty .

    L_PAR           reduce using rule 55 (operadorA -> MAS neu_addOperador empty .)
    ID              reduce using rule 55 (operadorA -> MAS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 55 (operadorA -> MAS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 55 (operadorA -> MAS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 55 (operadorA -> MAS neu_addOperador empty .)


state 246

    (56) operadorA -> MENOS neu_addOperador empty .

    L_PAR           reduce using rule 56 (operadorA -> MENOS neu_addOperador empty .)
    ID              reduce using rule 56 (operadorA -> MENOS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 56 (operadorA -> MENOS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 56 (operadorA -> MENOS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 56 (operadorA -> MENOS neu_addOperador empty .)


state 247

    (57) operadorT -> MULT neu_addOperador empty .

    L_PAR           reduce using rule 57 (operadorT -> MULT neu_addOperador empty .)
    ID              reduce using rule 57 (operadorT -> MULT neu_addOperador empty .)
    ENTEROVAL       reduce using rule 57 (operadorT -> MULT neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 57 (operadorT -> MULT neu_addOperador empty .)
    CARACTERVAL     reduce using rule 57 (operadorT -> MULT neu_addOperador empty .)


state 248

    (58) operadorT -> DIV neu_addOperador empty .

    L_PAR           reduce using rule 58 (operadorT -> DIV neu_addOperador empty .)
    ID              reduce using rule 58 (operadorT -> DIV neu_addOperador empty .)
    ENTEROVAL       reduce using rule 58 (operadorT -> DIV neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 58 (operadorT -> DIV neu_addOperador empty .)
    CARACTERVAL     reduce using rule 58 (operadorT -> DIV neu_addOperador empty .)


state 249

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque . decisionU neu_endDecision empty
    (50) decisionU -> . SINO neu_iniciarDecisionElse bloque empty
    (51) decisionU -> . empty
    (86) empty -> .

    SINO            shift and go to state 257
    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    decisionU                      shift and go to state 255
    empty                          shift and go to state 256

state 250

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER . bloque neu_condicionalDespues empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 258

state 251

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor . HACER bloque neu_endCondicion empty

    HACER           shift and go to state 259


state 252

    (54) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp . neu_asignacionFor empty
    (120) neu_asignacionFor -> .

    R_PAR           reduce using rule 120 (neu_asignacionFor -> .)

    neu_asignacionFor              shift and go to state 260

state 253

    (43) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .

    PUNTOYCOMA      reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MULT            reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIV             reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAS             reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENOS           reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORQUE        reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORQUE        reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORIGUALQUE   reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORIGUALQUE   reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    IGUALQUE        reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIFQUE          reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    OR              reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    AND             reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    R_PAR           reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    COMA            reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    HACER           reduce using rule 43 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)


state 254

    (26) mandar_parametrosD -> COMA mandar_parametros empty .

    R_PAR           reduce using rule 26 (mandar_parametrosD -> COMA mandar_parametros empty .)


state 255

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU . neu_endDecision empty
    (115) neu_endDecision -> .

    ID              reduce using rule 115 (neu_endDecision -> .)
    REGRESA         reduce using rule 115 (neu_endDecision -> .)
    LEER            reduce using rule 115 (neu_endDecision -> .)
    ESCRIBIR        reduce using rule 115 (neu_endDecision -> .)
    SI              reduce using rule 115 (neu_endDecision -> .)
    MIENTRAS        reduce using rule 115 (neu_endDecision -> .)
    DESDE           reduce using rule 115 (neu_endDecision -> .)
    R_LLAVE         reduce using rule 115 (neu_endDecision -> .)

    neu_endDecision                shift and go to state 261

state 256

    (51) decisionU -> empty .

    ID              reduce using rule 51 (decisionU -> empty .)
    REGRESA         reduce using rule 51 (decisionU -> empty .)
    LEER            reduce using rule 51 (decisionU -> empty .)
    ESCRIBIR        reduce using rule 51 (decisionU -> empty .)
    SI              reduce using rule 51 (decisionU -> empty .)
    MIENTRAS        reduce using rule 51 (decisionU -> empty .)
    DESDE           reduce using rule 51 (decisionU -> empty .)
    R_LLAVE         reduce using rule 51 (decisionU -> empty .)


state 257

    (50) decisionU -> SINO . neu_iniciarDecisionElse bloque empty
    (114) neu_iniciarDecisionElse -> .

    L_LLAVE         reduce using rule 114 (neu_iniciarDecisionElse -> .)

    neu_iniciarDecisionElse        shift and go to state 262

state 258

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque . neu_condicionalDespues empty
    (118) neu_condicionalDespues -> .

    ID              reduce using rule 118 (neu_condicionalDespues -> .)
    REGRESA         reduce using rule 118 (neu_condicionalDespues -> .)
    LEER            reduce using rule 118 (neu_condicionalDespues -> .)
    ESCRIBIR        reduce using rule 118 (neu_condicionalDespues -> .)
    SI              reduce using rule 118 (neu_condicionalDespues -> .)
    MIENTRAS        reduce using rule 118 (neu_condicionalDespues -> .)
    DESDE           reduce using rule 118 (neu_condicionalDespues -> .)
    R_LLAVE         reduce using rule 118 (neu_condicionalDespues -> .)

    neu_condicionalDespues         shift and go to state 263

state 259

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER . bloque neu_endCondicion empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 264

state 260

    (54) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor . empty
    (86) empty -> .

    R_PAR           reduce using rule 86 (empty -> .)

    empty                          shift and go to state 265

state 261

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 266

state 262

    (50) decisionU -> SINO neu_iniciarDecisionElse . bloque empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 267

state 263

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 268

state 264

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque . neu_endCondicion empty
    (122) neu_endCondicion -> .

    ID              reduce using rule 122 (neu_endCondicion -> .)
    REGRESA         reduce using rule 122 (neu_endCondicion -> .)
    LEER            reduce using rule 122 (neu_endCondicion -> .)
    ESCRIBIR        reduce using rule 122 (neu_endCondicion -> .)
    SI              reduce using rule 122 (neu_endCondicion -> .)
    MIENTRAS        reduce using rule 122 (neu_endCondicion -> .)
    DESDE           reduce using rule 122 (neu_endCondicion -> .)
    R_LLAVE         reduce using rule 122 (neu_endCondicion -> .)

    neu_endCondicion               shift and go to state 269

state 265

    (54) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .

    R_PAR           reduce using rule 54 (asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .)


state 266

    (49) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .

    ID              reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    REGRESA         reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    LEER            reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    ESCRIBIR        reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    SI              reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    MIENTRAS        reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    DESDE           reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    R_LLAVE         reduce using rule 49 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)


state 267

    (50) decisionU -> SINO neu_iniciarDecisionElse bloque . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 270

state 268

    (52) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .

    ID              reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    REGRESA         reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    LEER            reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    ESCRIBIR        reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    SI              reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    MIENTRAS        reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    DESDE           reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    R_LLAVE         reduce using rule 52 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)


state 269

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion . empty
    (86) empty -> .

    ID              reduce using rule 86 (empty -> .)
    REGRESA         reduce using rule 86 (empty -> .)
    LEER            reduce using rule 86 (empty -> .)
    ESCRIBIR        reduce using rule 86 (empty -> .)
    SI              reduce using rule 86 (empty -> .)
    MIENTRAS        reduce using rule 86 (empty -> .)
    DESDE           reduce using rule 86 (empty -> .)
    R_LLAVE         reduce using rule 86 (empty -> .)

    empty                          shift and go to state 271

state 270

    (50) decisionU -> SINO neu_iniciarDecisionElse bloque empty .

    ID              reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    REGRESA         reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    LEER            reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    ESCRIBIR        reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    SI              reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    MIENTRAS        reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    DESDE           reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    R_LLAVE         reduce using rule 50 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)


state 271

    (53) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .

    ID              reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    REGRESA         reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    LEER            reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    ESCRIBIR        reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    SI              reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    MIENTRAS        reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    DESDE           reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    R_LLAVE         reduce using rule 53 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 47 resolved as shift
WARNING: shift/reduce conflict for LEER in state 47 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 47 resolved as shift
WARNING: shift/reduce conflict for SI in state 47 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 47 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 55 resolved as shift
WARNING: shift/reduce conflict for LEER in state 55 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 55 resolved as shift
WARNING: shift/reduce conflict for SI in state 55 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 55 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 55 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 54
WARNING: reduce/reduce conflict in state 76 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (bloqueD -> empty) in state 76
WARNING: reduce/reduce conflict in state 76 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 76
WARNING: reduce/reduce conflict in state 201 resolved using rule (funciones -> empty)
WARNING: rejected rule (funcionesD -> empty) in state 201
WARNING: Rule (bloqueD -> empty) is never reduced
WARNING: Rule (funcionesD -> empty) is never reduced
