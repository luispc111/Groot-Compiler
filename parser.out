Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PUNTO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
Rule 2     variables -> VARIABLES variablesU
Rule 3     variables -> empty
Rule 4     variablesU -> variablesD
Rule 5     variablesU -> empty
Rule 6     variablesD -> ID neu_addVariableAStack COMA variablesD
Rule 7     variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
Rule 8     variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
Rule 9     funciones -> funcionesU
Rule 10    funciones -> empty
Rule 11    funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
Rule 12    funcionesD -> funciones
Rule 13    funcionesD -> empty
Rule 14    tipo_funcion -> ENTERO empty
Rule 15    tipo_funcion -> FLOTANTE empty
Rule 16    tipo_funcion -> CARACTER empty
Rule 17    tipo_funcion -> VOID empty
Rule 18    tipo_var -> ENTERO empty
Rule 19    tipo_var -> FLOTANTE empty
Rule 20    tipo_var -> CARACTER empty
Rule 21    recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
Rule 22    recibir_parametros -> empty
Rule 23    recibir_parametrosD -> COMA recibir_parametros empty
Rule 24    recibir_parametrosD -> empty
Rule 25    mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty
Rule 26    mandar_parametros -> empty
Rule 27    mandar_parametrosD -> COMA mandar_parametros empty
Rule 28    mandar_parametrosD -> empty
Rule 29    bloque -> L_LLAVE bloqueU R_LLAVE empty
Rule 30    bloqueU -> estatuto bloqueD neu_vaciarPilas empty
Rule 31    bloqueU -> empty
Rule 32    bloqueD -> bloqueU empty
Rule 33    bloqueD -> empty
Rule 34    estatuto -> asignacion PUNTOYCOMA empty
Rule 35    estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty
Rule 36    estatuto -> retorno PUNTOYCOMA empty
Rule 37    estatuto -> lectura PUNTOYCOMA empty
Rule 38    estatuto -> escritura PUNTOYCOMA empty
Rule 39    estatuto -> decision empty
Rule 40    estatuto -> condicional empty
Rule 41    estatuto -> no_condicional empty
Rule 42    estatuto -> empty
Rule 43    asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 44    asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 45    llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
Rule 46    retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
Rule 47    lectura -> LEER L_PAR ID neu_lectura R_PAR empty
Rule 48    escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty
Rule 49    escrituraD -> hiper_exp neu_escritura empty
Rule 50    escrituraD -> LETRERO neu_letrero empty
Rule 51    decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
Rule 52    decisionU -> SINO neu_iniciarDecisionElse bloque empty
Rule 53    decisionU -> empty
Rule 54    condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
Rule 55    no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
Rule 56    asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
Rule 57    operadorA -> MAS neu_addOperador empty
Rule 58    operadorA -> MENOS neu_addOperador empty
Rule 59    operadorT -> MULT neu_addOperador empty
Rule 60    operadorT -> DIV neu_addOperador empty
Rule 61    operadorL -> OR neu_addOperador empty
Rule 62    operadorL -> AND neu_addOperador empty
Rule 63    operadorR -> MENORQUE neu_addOperador empty
Rule 64    operadorR -> MAYORQUE neu_addOperador empty
Rule 65    operadorR -> MENORIGUALQUE neu_addOperador empty
Rule 66    operadorR -> MAYORIGUALQUE neu_addOperador empty
Rule 67    operadorR -> IGUALQUE neu_addOperador empty
Rule 68    operadorR -> DIFQUE neu_addOperador empty
Rule 69    hiper_exp -> super_exp neu_hacerHiperExp hiper_expU
Rule 70    hiper_expU -> operadorL hiper_exp empty
Rule 71    hiper_expU -> empty
Rule 72    super_exp -> exp neu_hacerSuperExp super_expU
Rule 73    super_expU -> operadorR super_exp empty
Rule 74    super_expU -> empty
Rule 75    exp -> termino neu_hacerExp expU
Rule 76    expU -> operadorA exp
Rule 77    expU -> empty
Rule 78    termino -> factor neu_hacerTermino terminoU
Rule 79    terminoU -> operadorT termino
Rule 80    terminoU -> empty
Rule 81    factor -> varcte empty
Rule 82    factor -> llamada neu_esExpresion empty
Rule 83    factor -> L_PAR hiper_exp R_PAR empty
Rule 84    varcte -> ID neu_addID empty
Rule 85    varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
Rule 86    varcte -> ENTEROVAL neu_addConstanteEntero empty
Rule 87    varcte -> FLOTANTEVAL neu_addConstanteFlotante empty
Rule 88    varcte -> CARACTERVAL neu_addConstanteCaracter empty
Rule 89    empty -> <empty>
Rule 90    neu_programa -> <empty>
Rule 91    neu_endPrograma -> <empty>
Rule 92    neu_addFuncion -> <empty>
Rule 93    neu_endFuncion -> <empty>
Rule 94    neu_principal -> <empty>
Rule 95    neu_addVariable -> <empty>
Rule 96    neu_addVariableAStack -> <empty>
Rule 97    neu_addArreglo -> <empty>
Rule 98    neu_addID -> <empty>
Rule 99    neu_fondoFalso -> <empty>
Rule 100   neu_addIDArreglo -> <empty>
Rule 101   neu_addConstanteEntero -> <empty>
Rule 102   neu_addConstanteFlotante -> <empty>
Rule 103   neu_addConstanteCaracter -> <empty>
Rule 104   neu_addTermino -> <empty>
Rule 105   neu_llamada_era -> <empty>
Rule 106   neu_llamada_gosub -> <empty>
Rule 107   neu_esEstatuto -> <empty>
Rule 108   neu_esExpresion -> <empty>
Rule 109   neu_addOperador -> <empty>
Rule 110   getGMemoria -> <empty>
Rule 111   getLMemoria -> <empty>
Rule 112   getCMemoria -> <empty>
Rule 113   neu_hacerTermino -> <empty>
Rule 114   neu_hacerExp -> <empty>
Rule 115   neu_hacerSuperExp -> <empty>
Rule 116   neu_hacerHiperExp -> <empty>
Rule 117   neu_asignacion -> <empty>
Rule 118   neu_lectura -> <empty>
Rule 119   neu_escritura -> <empty>
Rule 120   neu_letrero -> <empty>
Rule 121   neu_retorno -> <empty>
Rule 122   neu_iniciarDecision -> <empty>
Rule 123   neu_iniciarDecisionElse -> <empty>
Rule 124   neu_endDecision -> <empty>
Rule 125   neu_condicionalAntes -> <empty>
Rule 126   neu_condicionalDurante -> <empty>
Rule 127   neu_condicionalDespues -> <empty>
Rule 128   neu_addIDFor -> <empty>
Rule 129   neu_asignacionFor -> <empty>
Rule 130   neu_boolFor -> <empty>
Rule 131   neu_endCondicion -> <empty>
Rule 132   neu_parametroEnviado -> <empty>
Rule 133   neu_recibirParametros -> <empty>
Rule 134   neu_paramValidacion -> <empty>
Rule 135   neu_vaciarPilas -> <empty>
Rule 136   notifError -> <empty>

Terminals, with rules where they appear

AND                  : 62
CARACTER             : 16 20
CARACTERVAL          : 88
COMA                 : 6 23 27
DESDE                : 55
DIFQUE               : 68
DIV                  : 60
DOSPUNTOS            : 7 8 21
ENTERO               : 14 18
ENTEROVAL            : 8 86
ENTONCES             : 51
ESCRIBIR             : 48
FLOTANTE             : 15 19
FLOTANTEVAL          : 87
FUNCION              : 11
HACER                : 54 55
HASTA                : 55
ID                   : 1 6 7 8 11 21 43 44 45 47 56 84 85
IGUAL                : 43 44 56
IGUALQUE             : 67
LEER                 : 47
LETRERO              : 50
L_CORCHETE           : 8 44 85
L_LLAVE              : 29
L_PAR                : 1 11 45 46 47 48 51 54 55 83
MAS                  : 57
MAYORIGUALQUE        : 66
MAYORQUE             : 64
MENORIGUALQUE        : 65
MENORQUE             : 63
MENOS                : 58
MIENTRAS             : 54
MULT                 : 59
OR                   : 61
PRINCIPAL            : 1
PROGRAMA             : 1
PUNTO                : 
PUNTOYCOMA           : 1 7 8 34 35 36 37 38
REGRESA              : 46
R_CORCHETE           : 8 44 85
R_LLAVE              : 29
R_PAR                : 1 11 45 46 47 48 51 54 55 83
SI                   : 51
SINO                 : 52
VARIABLES            : 2
VOID                 : 17
error                : 

Nonterminals, with rules where they appear

asignacion           : 34
asignacionFor        : 55
bloque               : 1 11 51 52 54 55
bloqueD              : 30
bloqueU              : 29 32
condicional          : 40
decision             : 39
decisionU            : 51
empty                : 1 3 5 10 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 70 71 73 74 77 80 81 82 83 84 85 86 87 88
escritura            : 38
escrituraD           : 48
estatuto             : 30
exp                  : 72 76
expU                 : 75
factor               : 78
funciones            : 1 12
funcionesD           : 11
funcionesU           : 9
getCMemoria          : 
getGMemoria          : 
getLMemoria          : 
hiper_exp            : 25 43 44 44 46 49 51 54 55 56 70 83 85
hiper_expU           : 69
lectura              : 37
llamada              : 35 82
mandar_parametros    : 27 45
mandar_parametrosD   : 25
neu_addArreglo       : 8
neu_addConstanteCaracter : 88
neu_addConstanteEntero : 86
neu_addConstanteFlotante : 87
neu_addFuncion       : 11
neu_addID            : 43 84
neu_addIDArreglo     : 44 85
neu_addIDFor         : 56
neu_addOperador      : 43 44 56 57 58 59 60 61 62 63 64 65 66 67 68
neu_addTermino       : 
neu_addVariable      : 7
neu_addVariableAStack : 6
neu_asignacion       : 43 44
neu_asignacionFor    : 56
neu_boolFor          : 55
neu_condicionalAntes : 54
neu_condicionalDespues : 54
neu_condicionalDurante : 54
neu_endCondicion     : 55
neu_endDecision      : 51
neu_endFuncion       : 11
neu_endPrograma      : 1
neu_esEstatuto       : 35
neu_esExpresion      : 82
neu_escritura        : 49
neu_fondoFalso       : 44 85
neu_hacerExp         : 75
neu_hacerHiperExp    : 69
neu_hacerSuperExp    : 72
neu_hacerTermino     : 78
neu_iniciarDecision  : 51
neu_iniciarDecisionElse : 52
neu_lectura          : 47
neu_letrero          : 50
neu_llamada_era      : 45
neu_llamada_gosub    : 45
neu_paramValidacion  : 45
neu_parametroEnviado : 25
neu_principal        : 1
neu_programa         : 1
neu_recibirParametros : 21
neu_retorno          : 46
neu_vaciarPilas      : 30
no_condicional       : 41
notifError           : 
operadorA            : 76
operadorL            : 70
operadorR            : 73
operadorT            : 79
program              : 0
recibir_parametros   : 11 23
recibir_parametrosD  : 21
retorno              : 36
super_exp            : 69 73
super_expU           : 72
termino              : 75 79
terminoU             : 78
tipo_funcion         : 11
tipo_var             : 7 8 21
varcte               : 81
variables            : 1 11
variablesD           : 4 6
variablesU           : 2 7 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PROGRAMA        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAMA . ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAMA ID . neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (90) neu_programa -> .

    PUNTOYCOMA      reduce using rule 90 (neu_programa -> .)

    neu_programa                   shift and go to state 4

state 4

    (1) program -> PROGRAMA ID neu_programa . PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PUNTOYCOMA      shift and go to state 5


state 5

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA . variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (89) empty -> .

    VARIABLES       shift and go to state 8
    ENTERO          reduce using rule 89 (empty -> .)
    FLOTANTE        reduce using rule 89 (empty -> .)
    CARACTER        reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    PRINCIPAL       reduce using rule 89 (empty -> .)

    variables                      shift and go to state 6
    empty                          shift and go to state 7

state 6

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables . funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (9) funciones -> . funcionesU
    (10) funciones -> . empty
    (11) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (89) empty -> .
    (14) tipo_funcion -> . ENTERO empty
    (15) tipo_funcion -> . FLOTANTE empty
    (16) tipo_funcion -> . CARACTER empty
    (17) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 89 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    funciones                      shift and go to state 9
    empty                          shift and go to state 10
    funcionesU                     shift and go to state 11
    tipo_funcion                   shift and go to state 12

state 7

    (3) variables -> empty .

    ENTERO          reduce using rule 3 (variables -> empty .)
    FLOTANTE        reduce using rule 3 (variables -> empty .)
    CARACTER        reduce using rule 3 (variables -> empty .)
    VOID            reduce using rule 3 (variables -> empty .)
    PRINCIPAL       reduce using rule 3 (variables -> empty .)
    L_LLAVE         reduce using rule 3 (variables -> empty .)


state 8

    (2) variables -> VARIABLES . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (89) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 89 (empty -> .)
    FLOTANTE        reduce using rule 89 (empty -> .)
    CARACTER        reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    PRINCIPAL       reduce using rule 89 (empty -> .)
    L_LLAVE         reduce using rule 89 (empty -> .)

    variablesU                     shift and go to state 17
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 9

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones . PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty

    PRINCIPAL       shift and go to state 21


state 10

    (10) funciones -> empty .

    PRINCIPAL       reduce using rule 10 (funciones -> empty .)


state 11

    (9) funciones -> funcionesU .

    PRINCIPAL       reduce using rule 9 (funciones -> funcionesU .)


state 12

    (11) funcionesU -> tipo_funcion . FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    FUNCION         shift and go to state 22


state 13

    (14) tipo_funcion -> ENTERO . empty
    (89) empty -> .

    FUNCION         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 23

state 14

    (15) tipo_funcion -> FLOTANTE . empty
    (89) empty -> .

    FUNCION         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 24

state 15

    (16) tipo_funcion -> CARACTER . empty
    (89) empty -> .

    FUNCION         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 25

state 16

    (17) tipo_funcion -> VOID . empty
    (89) empty -> .

    FUNCION         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 26

state 17

    (2) variables -> VARIABLES variablesU .

    ENTERO          reduce using rule 2 (variables -> VARIABLES variablesU .)
    FLOTANTE        reduce using rule 2 (variables -> VARIABLES variablesU .)
    CARACTER        reduce using rule 2 (variables -> VARIABLES variablesU .)
    VOID            reduce using rule 2 (variables -> VARIABLES variablesU .)
    PRINCIPAL       reduce using rule 2 (variables -> VARIABLES variablesU .)
    L_LLAVE         reduce using rule 2 (variables -> VARIABLES variablesU .)


state 18

    (4) variablesU -> variablesD .

    ENTERO          reduce using rule 4 (variablesU -> variablesD .)
    FLOTANTE        reduce using rule 4 (variablesU -> variablesD .)
    CARACTER        reduce using rule 4 (variablesU -> variablesD .)
    VOID            reduce using rule 4 (variablesU -> variablesD .)
    PRINCIPAL       reduce using rule 4 (variablesU -> variablesD .)
    L_LLAVE         reduce using rule 4 (variablesU -> variablesD .)


state 19

    (5) variablesU -> empty .

    ENTERO          reduce using rule 5 (variablesU -> empty .)
    FLOTANTE        reduce using rule 5 (variablesU -> empty .)
    CARACTER        reduce using rule 5 (variablesU -> empty .)
    VOID            reduce using rule 5 (variablesU -> empty .)
    PRINCIPAL       reduce using rule 5 (variablesU -> empty .)
    L_LLAVE         reduce using rule 5 (variablesU -> empty .)


state 20

    (6) variablesD -> ID . neu_addVariableAStack COMA variablesD
    (7) variablesD -> ID . DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> ID . L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (96) neu_addVariableAStack -> .

    DOSPUNTOS       shift and go to state 28
    L_CORCHETE      shift and go to state 29
    COMA            reduce using rule 96 (neu_addVariableAStack -> .)

    neu_addVariableAStack          shift and go to state 27

state 21

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL . neu_principal L_PAR R_PAR bloque neu_endPrograma empty
    (94) neu_principal -> .

    L_PAR           reduce using rule 94 (neu_principal -> .)

    neu_principal                  shift and go to state 30

state 22

    (11) funcionesU -> tipo_funcion FUNCION . ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    ID              shift and go to state 31


state 23

    (14) tipo_funcion -> ENTERO empty .

    FUNCION         reduce using rule 14 (tipo_funcion -> ENTERO empty .)


state 24

    (15) tipo_funcion -> FLOTANTE empty .

    FUNCION         reduce using rule 15 (tipo_funcion -> FLOTANTE empty .)


state 25

    (16) tipo_funcion -> CARACTER empty .

    FUNCION         reduce using rule 16 (tipo_funcion -> CARACTER empty .)


state 26

    (17) tipo_funcion -> VOID empty .

    FUNCION         reduce using rule 17 (tipo_funcion -> VOID empty .)


state 27

    (6) variablesD -> ID neu_addVariableAStack . COMA variablesD

    COMA            shift and go to state 32


state 28

    (7) variablesD -> ID DOSPUNTOS . tipo_var neu_addVariable PUNTOYCOMA variablesU
    (18) tipo_var -> . ENTERO empty
    (19) tipo_var -> . FLOTANTE empty
    (20) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 33

state 29

    (8) variablesD -> ID L_CORCHETE . ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU

    ENTEROVAL       shift and go to state 37


state 30

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal . L_PAR R_PAR bloque neu_endPrograma empty

    L_PAR           shift and go to state 38


state 31

    (11) funcionesU -> tipo_funcion FUNCION ID . neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (92) neu_addFuncion -> .

    L_PAR           reduce using rule 92 (neu_addFuncion -> .)

    neu_addFuncion                 shift and go to state 39

state 32

    (6) variablesD -> ID neu_addVariableAStack COMA . variablesD
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU

    ID              shift and go to state 20

    variablesD                     shift and go to state 40

state 33

    (7) variablesD -> ID DOSPUNTOS tipo_var . neu_addVariable PUNTOYCOMA variablesU
    (95) neu_addVariable -> .

    PUNTOYCOMA      reduce using rule 95 (neu_addVariable -> .)

    neu_addVariable                shift and go to state 41

state 34

    (18) tipo_var -> ENTERO . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 42

state 35

    (19) tipo_var -> FLOTANTE . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 43

state 36

    (20) tipo_var -> CARACTER . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 44

state 37

    (8) variablesD -> ID L_CORCHETE ENTEROVAL . R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU

    R_CORCHETE      shift and go to state 45


state 38

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR . R_PAR bloque neu_endPrograma empty

    R_PAR           shift and go to state 46


state 39

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion . L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    L_PAR           shift and go to state 47


state 40

    (6) variablesD -> ID neu_addVariableAStack COMA variablesD .

    ENTERO          reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    FLOTANTE        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    CARACTER        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    VOID            reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    PRINCIPAL       reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    L_LLAVE         reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)


state 41

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 48


state 42

    (18) tipo_var -> ENTERO empty .

    PUNTOYCOMA      reduce using rule 18 (tipo_var -> ENTERO empty .)
    COMA            reduce using rule 18 (tipo_var -> ENTERO empty .)
    R_PAR           reduce using rule 18 (tipo_var -> ENTERO empty .)


state 43

    (19) tipo_var -> FLOTANTE empty .

    PUNTOYCOMA      reduce using rule 19 (tipo_var -> FLOTANTE empty .)
    COMA            reduce using rule 19 (tipo_var -> FLOTANTE empty .)
    R_PAR           reduce using rule 19 (tipo_var -> FLOTANTE empty .)


state 44

    (20) tipo_var -> CARACTER empty .

    PUNTOYCOMA      reduce using rule 20 (tipo_var -> CARACTER empty .)
    COMA            reduce using rule 20 (tipo_var -> CARACTER empty .)
    R_PAR           reduce using rule 20 (tipo_var -> CARACTER empty .)


state 45

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE . DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU

    DOSPUNTOS       shift and go to state 49


state 46

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR . bloque neu_endPrograma empty
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 50

state 47

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR . recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (21) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (22) recibir_parametros -> . empty
    (89) empty -> .

    ID              shift and go to state 52
    R_PAR           reduce using rule 89 (empty -> .)

    recibir_parametros             shift and go to state 53
    empty                          shift and go to state 54

state 48

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (89) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 89 (empty -> .)
    FLOTANTE        reduce using rule 89 (empty -> .)
    CARACTER        reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    PRINCIPAL       reduce using rule 89 (empty -> .)
    L_LLAVE         reduce using rule 89 (empty -> .)

    variablesU                     shift and go to state 55
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 49

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS . tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (18) tipo_var -> . ENTERO empty
    (19) tipo_var -> . FLOTANTE empty
    (20) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 56

state 50

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque . neu_endPrograma empty
    (91) neu_endPrograma -> .

    $end            reduce using rule 91 (neu_endPrograma -> .)

    neu_endPrograma                shift and go to state 57

state 51

    (29) bloque -> L_LLAVE . bloqueU R_LLAVE empty
    (30) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (31) bloqueU -> . empty
    (34) estatuto -> . asignacion PUNTOYCOMA empty
    (35) estatuto -> . llamada neu_esEstatuto PUNTOYCOMA empty
    (36) estatuto -> . retorno PUNTOYCOMA empty
    (37) estatuto -> . lectura PUNTOYCOMA empty
    (38) estatuto -> . escritura PUNTOYCOMA empty
    (39) estatuto -> . decision empty
    (40) estatuto -> . condicional empty
    (41) estatuto -> . no_condicional empty
    (42) estatuto -> . empty
    (89) empty -> .
    (43) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (46) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (47) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (48) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (51) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (54) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (55) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 89 (empty -> .)
    ID              shift and go to state 69
    REGRESA         shift and go to state 70
    LEER            shift and go to state 71
    ESCRIBIR        shift and go to state 72
    SI              shift and go to state 73
    MIENTRAS        shift and go to state 74
    DESDE           shift and go to state 75

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! REGRESA         [ reduce using rule 89 (empty -> .) ]
  ! LEER            [ reduce using rule 89 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 89 (empty -> .) ]
  ! SI              [ reduce using rule 89 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 89 (empty -> .) ]
  ! DESDE           [ reduce using rule 89 (empty -> .) ]

    bloqueU                        shift and go to state 58
    empty                          shift and go to state 59
    estatuto                       shift and go to state 60
    asignacion                     shift and go to state 61
    llamada                        shift and go to state 62
    retorno                        shift and go to state 63
    lectura                        shift and go to state 64
    escritura                      shift and go to state 65
    decision                       shift and go to state 66
    condicional                    shift and go to state 67
    no_condicional                 shift and go to state 68

state 52

    (21) recibir_parametros -> ID . DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty

    DOSPUNTOS       shift and go to state 76


state 53

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros . R_PAR variables bloque neu_endFuncion funcionesD

    R_PAR           shift and go to state 77


state 54

    (22) recibir_parametros -> empty .

    R_PAR           reduce using rule 22 (recibir_parametros -> empty .)


state 55

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    VOID            reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)


state 56

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var . neu_addArreglo PUNTOYCOMA variablesU
    (97) neu_addArreglo -> .

    PUNTOYCOMA      reduce using rule 97 (neu_addArreglo -> .)

    neu_addArreglo                 shift and go to state 78

state 57

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma . empty
    (89) empty -> .

    $end            reduce using rule 89 (empty -> .)

    empty                          shift and go to state 79

state 58

    (29) bloque -> L_LLAVE bloqueU . R_LLAVE empty

    R_LLAVE         shift and go to state 80


state 59

    (31) bloqueU -> empty .
    (42) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 31 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 31 (bloqueU -> empty .)
    ID              reduce using rule 42 (estatuto -> empty .)
    REGRESA         reduce using rule 42 (estatuto -> empty .)
    LEER            reduce using rule 42 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 42 (estatuto -> empty .)
    SI              reduce using rule 42 (estatuto -> empty .)
    MIENTRAS        reduce using rule 42 (estatuto -> empty .)
    DESDE           reduce using rule 42 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 42 (estatuto -> empty .) ]


state 60

    (30) bloqueU -> estatuto . bloqueD neu_vaciarPilas empty
    (32) bloqueD -> . bloqueU empty
    (33) bloqueD -> . empty
    (30) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (31) bloqueU -> . empty
    (89) empty -> .
    (34) estatuto -> . asignacion PUNTOYCOMA empty
    (35) estatuto -> . llamada neu_esEstatuto PUNTOYCOMA empty
    (36) estatuto -> . retorno PUNTOYCOMA empty
    (37) estatuto -> . lectura PUNTOYCOMA empty
    (38) estatuto -> . escritura PUNTOYCOMA empty
    (39) estatuto -> . decision empty
    (40) estatuto -> . condicional empty
    (41) estatuto -> . no_condicional empty
    (42) estatuto -> . empty
    (43) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) asignacion -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (46) retorno -> . REGRESA L_PAR hiper_exp neu_retorno R_PAR empty
    (47) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (48) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (51) decision -> . SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (54) condicional -> . MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (55) no_condicional -> . DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
    R_LLAVE         reduce using rule 89 (empty -> .)
    ID              shift and go to state 69
    REGRESA         shift and go to state 70
    LEER            shift and go to state 71
    ESCRIBIR        shift and go to state 72
    SI              shift and go to state 73
    MIENTRAS        shift and go to state 74
    DESDE           shift and go to state 75

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! REGRESA         [ reduce using rule 89 (empty -> .) ]
  ! LEER            [ reduce using rule 89 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 89 (empty -> .) ]
  ! SI              [ reduce using rule 89 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 89 (empty -> .) ]
  ! DESDE           [ reduce using rule 89 (empty -> .) ]

    estatuto                       shift and go to state 60
    bloqueD                        shift and go to state 81
    empty                          shift and go to state 82
    bloqueU                        shift and go to state 83
    asignacion                     shift and go to state 61
    llamada                        shift and go to state 62
    retorno                        shift and go to state 63
    lectura                        shift and go to state 64
    escritura                      shift and go to state 65
    decision                       shift and go to state 66
    condicional                    shift and go to state 67
    no_condicional                 shift and go to state 68

state 61

    (34) estatuto -> asignacion . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 84


state 62

    (35) estatuto -> llamada . neu_esEstatuto PUNTOYCOMA empty
    (107) neu_esEstatuto -> .

    PUNTOYCOMA      reduce using rule 107 (neu_esEstatuto -> .)

    neu_esEstatuto                 shift and go to state 85

state 63

    (36) estatuto -> retorno . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 86


state 64

    (37) estatuto -> lectura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 87


state 65

    (38) estatuto -> escritura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 88


state 66

    (39) estatuto -> decision . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 89

state 67

    (40) estatuto -> condicional . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 90

state 68

    (41) estatuto -> no_condicional . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 91

state 69

    (43) asignacion -> ID . neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) asignacion -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (45) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (98) neu_addID -> .
    (105) neu_llamada_era -> .

    L_CORCHETE      shift and go to state 93
    IGUAL           reduce using rule 98 (neu_addID -> .)
    L_PAR           reduce using rule 105 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 92
    neu_llamada_era                shift and go to state 94

state 70

    (46) retorno -> REGRESA . L_PAR hiper_exp neu_retorno R_PAR empty

    L_PAR           shift and go to state 95


state 71

    (47) lectura -> LEER . L_PAR ID neu_lectura R_PAR empty

    L_PAR           shift and go to state 96


state 72

    (48) escritura -> ESCRIBIR . L_PAR escrituraD R_PAR empty

    L_PAR           shift and go to state 97


state 73

    (51) decision -> SI . L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    L_PAR           shift and go to state 98


state 74

    (54) condicional -> MIENTRAS . L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty

    L_PAR           shift and go to state 99


state 75

    (55) no_condicional -> DESDE . L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    L_PAR           shift and go to state 100


state 76

    (21) recibir_parametros -> ID DOSPUNTOS . tipo_var neu_recibirParametros recibir_parametrosD empty
    (18) tipo_var -> . ENTERO empty
    (19) tipo_var -> . FLOTANTE empty
    (20) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 34
    FLOTANTE        shift and go to state 35
    CARACTER        shift and go to state 36

    tipo_var                       shift and go to state 101

state 77

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR . variables bloque neu_endFuncion funcionesD
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (89) empty -> .

    VARIABLES       shift and go to state 8
    L_LLAVE         reduce using rule 89 (empty -> .)

    variables                      shift and go to state 102
    empty                          shift and go to state 7

state 78

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 103


state 79

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .

    $end            reduce using rule 1 (program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque neu_endPrograma empty .)


state 80

    (29) bloque -> L_LLAVE bloqueU R_LLAVE . empty
    (89) empty -> .

    $end            reduce using rule 89 (empty -> .)
    ENTERO          reduce using rule 89 (empty -> .)
    FLOTANTE        reduce using rule 89 (empty -> .)
    CARACTER        reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    PRINCIPAL       reduce using rule 89 (empty -> .)
    SINO            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 104

state 81

    (30) bloqueU -> estatuto bloqueD . neu_vaciarPilas empty
    (135) neu_vaciarPilas -> .

    R_LLAVE         reduce using rule 135 (neu_vaciarPilas -> .)

    neu_vaciarPilas                shift and go to state 105

state 82

    (33) bloqueD -> empty .
    (31) bloqueU -> empty .
    (42) estatuto -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 31 (bloqueU -> empty .)
  ! reduce/reduce conflict for R_LLAVE resolved using rule 31 (bloqueU -> empty .)
    R_LLAVE         reduce using rule 31 (bloqueU -> empty .)
    ID              reduce using rule 42 (estatuto -> empty .)
    REGRESA         reduce using rule 42 (estatuto -> empty .)
    LEER            reduce using rule 42 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 42 (estatuto -> empty .)
    SI              reduce using rule 42 (estatuto -> empty .)
    MIENTRAS        reduce using rule 42 (estatuto -> empty .)
    DESDE           reduce using rule 42 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 33 (bloqueD -> empty .) ]
  ! R_LLAVE         [ reduce using rule 42 (estatuto -> empty .) ]


state 83

    (32) bloqueD -> bloqueU . empty
    (89) empty -> .

    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 106

state 84

    (34) estatuto -> asignacion PUNTOYCOMA . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 107

state 85

    (35) estatuto -> llamada neu_esEstatuto . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 108


state 86

    (36) estatuto -> retorno PUNTOYCOMA . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 109

state 87

    (37) estatuto -> lectura PUNTOYCOMA . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 110

state 88

    (38) estatuto -> escritura PUNTOYCOMA . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 111

state 89

    (39) estatuto -> decision empty .

    ID              reduce using rule 39 (estatuto -> decision empty .)
    REGRESA         reduce using rule 39 (estatuto -> decision empty .)
    LEER            reduce using rule 39 (estatuto -> decision empty .)
    ESCRIBIR        reduce using rule 39 (estatuto -> decision empty .)
    SI              reduce using rule 39 (estatuto -> decision empty .)
    MIENTRAS        reduce using rule 39 (estatuto -> decision empty .)
    DESDE           reduce using rule 39 (estatuto -> decision empty .)
    R_LLAVE         reduce using rule 39 (estatuto -> decision empty .)


state 90

    (40) estatuto -> condicional empty .

    ID              reduce using rule 40 (estatuto -> condicional empty .)
    REGRESA         reduce using rule 40 (estatuto -> condicional empty .)
    LEER            reduce using rule 40 (estatuto -> condicional empty .)
    ESCRIBIR        reduce using rule 40 (estatuto -> condicional empty .)
    SI              reduce using rule 40 (estatuto -> condicional empty .)
    MIENTRAS        reduce using rule 40 (estatuto -> condicional empty .)
    DESDE           reduce using rule 40 (estatuto -> condicional empty .)
    R_LLAVE         reduce using rule 40 (estatuto -> condicional empty .)


state 91

    (41) estatuto -> no_condicional empty .

    ID              reduce using rule 41 (estatuto -> no_condicional empty .)
    REGRESA         reduce using rule 41 (estatuto -> no_condicional empty .)
    LEER            reduce using rule 41 (estatuto -> no_condicional empty .)
    ESCRIBIR        reduce using rule 41 (estatuto -> no_condicional empty .)
    SI              reduce using rule 41 (estatuto -> no_condicional empty .)
    MIENTRAS        reduce using rule 41 (estatuto -> no_condicional empty .)
    DESDE           reduce using rule 41 (estatuto -> no_condicional empty .)
    R_LLAVE         reduce using rule 41 (estatuto -> no_condicional empty .)


state 92

    (43) asignacion -> ID neu_addID . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 112


state 93

    (44) asignacion -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (99) neu_fondoFalso -> .

    L_PAR           reduce using rule 99 (neu_fondoFalso -> .)
    ID              reduce using rule 99 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 99 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 99 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 99 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 113

state 94

    (45) llamada -> ID neu_llamada_era . L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 114


state 95

    (46) retorno -> REGRESA L_PAR . hiper_exp neu_retorno R_PAR empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 116
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 96

    (47) lectura -> LEER L_PAR . ID neu_lectura R_PAR empty

    ID              shift and go to state 127


state 97

    (48) escritura -> ESCRIBIR L_PAR . escrituraD R_PAR empty
    (49) escrituraD -> . hiper_exp neu_escritura empty
    (50) escrituraD -> . LETRERO neu_letrero empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    LETRERO         shift and go to state 130
    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    escrituraD                     shift and go to state 128
    hiper_exp                      shift and go to state 129
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 98

    (51) decision -> SI L_PAR . hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 131
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 99

    (54) condicional -> MIENTRAS L_PAR . neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (125) neu_condicionalAntes -> .

    L_PAR           reduce using rule 125 (neu_condicionalAntes -> .)
    ID              reduce using rule 125 (neu_condicionalAntes -> .)
    ENTEROVAL       reduce using rule 125 (neu_condicionalAntes -> .)
    FLOTANTEVAL     reduce using rule 125 (neu_condicionalAntes -> .)
    CARACTERVAL     reduce using rule 125 (neu_condicionalAntes -> .)

    neu_condicionalAntes           shift and go to state 132

state 100

    (55) no_condicional -> DESDE L_PAR . asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (56) asignacionFor -> . ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    ID              shift and go to state 134

    asignacionFor                  shift and go to state 133

state 101

    (21) recibir_parametros -> ID DOSPUNTOS tipo_var . neu_recibirParametros recibir_parametrosD empty
    (133) neu_recibirParametros -> .

    COMA            reduce using rule 133 (neu_recibirParametros -> .)
    R_PAR           reduce using rule 133 (neu_recibirParametros -> .)

    neu_recibirParametros          shift and go to state 135

state 102

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables . bloque neu_endFuncion funcionesD
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 136

state 103

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (8) variablesD -> . ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU
    (89) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 89 (empty -> .)
    FLOTANTE        reduce using rule 89 (empty -> .)
    CARACTER        reduce using rule 89 (empty -> .)
    VOID            reduce using rule 89 (empty -> .)
    PRINCIPAL       reduce using rule 89 (empty -> .)
    L_LLAVE         reduce using rule 89 (empty -> .)

    variablesU                     shift and go to state 137
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 104

    (29) bloque -> L_LLAVE bloqueU R_LLAVE empty .

    $end            reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ENTERO          reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    FLOTANTE        reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    CARACTER        reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    VOID            reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PRINCIPAL       reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SINO            reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ID              reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    REGRESA         reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    LEER            reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ESCRIBIR        reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SI              reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    MIENTRAS        reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    DESDE           reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    R_LLAVE         reduce using rule 29 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)


state 105

    (30) bloqueU -> estatuto bloqueD neu_vaciarPilas . empty
    (89) empty -> .

    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 138

state 106

    (32) bloqueD -> bloqueU empty .

    R_LLAVE         reduce using rule 32 (bloqueD -> bloqueU empty .)


state 107

    (34) estatuto -> asignacion PUNTOYCOMA empty .

    ID              reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    REGRESA         reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    LEER            reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    SI              reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    DESDE           reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 34 (estatuto -> asignacion PUNTOYCOMA empty .)


state 108

    (35) estatuto -> llamada neu_esEstatuto PUNTOYCOMA . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 139

state 109

    (36) estatuto -> retorno PUNTOYCOMA empty .

    ID              reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    REGRESA         reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    LEER            reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    SI              reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    DESDE           reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 36 (estatuto -> retorno PUNTOYCOMA empty .)


state 110

    (37) estatuto -> lectura PUNTOYCOMA empty .

    ID              reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    LEER            reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    SI              reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    DESDE           reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 37 (estatuto -> lectura PUNTOYCOMA empty .)


state 111

    (38) estatuto -> escritura PUNTOYCOMA empty .

    ID              reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    LEER            reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    SI              reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    DESDE           reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 38 (estatuto -> escritura PUNTOYCOMA empty .)


state 112

    (43) asignacion -> ID neu_addID IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 140

state 113

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 141
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 114

    (45) llamada -> ID neu_llamada_era L_PAR . mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (25) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (26) mandar_parametros -> . empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (89) empty -> .
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 89 (empty -> .)
    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    mandar_parametros              shift and go to state 142
    empty                          shift and go to state 143
    hiper_exp                      shift and go to state 144
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 115

    (83) factor -> L_PAR . hiper_exp R_PAR empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 145
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 116

    (46) retorno -> REGRESA L_PAR hiper_exp . neu_retorno R_PAR empty
    (121) neu_retorno -> .

    R_PAR           reduce using rule 121 (neu_retorno -> .)

    neu_retorno                    shift and go to state 146

state 117

    (69) hiper_exp -> super_exp . neu_hacerHiperExp hiper_expU
    (116) neu_hacerHiperExp -> .

    OR              reduce using rule 116 (neu_hacerHiperExp -> .)
    AND             reduce using rule 116 (neu_hacerHiperExp -> .)
    R_PAR           reduce using rule 116 (neu_hacerHiperExp -> .)
    R_CORCHETE      reduce using rule 116 (neu_hacerHiperExp -> .)
    COMA            reduce using rule 116 (neu_hacerHiperExp -> .)
    PUNTOYCOMA      reduce using rule 116 (neu_hacerHiperExp -> .)
    HACER           reduce using rule 116 (neu_hacerHiperExp -> .)

    neu_hacerHiperExp              shift and go to state 147

state 118

    (72) super_exp -> exp . neu_hacerSuperExp super_expU
    (115) neu_hacerSuperExp -> .

    MENORQUE        reduce using rule 115 (neu_hacerSuperExp -> .)
    MAYORQUE        reduce using rule 115 (neu_hacerSuperExp -> .)
    MENORIGUALQUE   reduce using rule 115 (neu_hacerSuperExp -> .)
    MAYORIGUALQUE   reduce using rule 115 (neu_hacerSuperExp -> .)
    IGUALQUE        reduce using rule 115 (neu_hacerSuperExp -> .)
    DIFQUE          reduce using rule 115 (neu_hacerSuperExp -> .)
    OR              reduce using rule 115 (neu_hacerSuperExp -> .)
    AND             reduce using rule 115 (neu_hacerSuperExp -> .)
    R_PAR           reduce using rule 115 (neu_hacerSuperExp -> .)
    R_CORCHETE      reduce using rule 115 (neu_hacerSuperExp -> .)
    COMA            reduce using rule 115 (neu_hacerSuperExp -> .)
    PUNTOYCOMA      reduce using rule 115 (neu_hacerSuperExp -> .)
    HACER           reduce using rule 115 (neu_hacerSuperExp -> .)

    neu_hacerSuperExp              shift and go to state 148

state 119

    (75) exp -> termino . neu_hacerExp expU
    (114) neu_hacerExp -> .

    MAS             reduce using rule 114 (neu_hacerExp -> .)
    MENOS           reduce using rule 114 (neu_hacerExp -> .)
    MENORQUE        reduce using rule 114 (neu_hacerExp -> .)
    MAYORQUE        reduce using rule 114 (neu_hacerExp -> .)
    MENORIGUALQUE   reduce using rule 114 (neu_hacerExp -> .)
    MAYORIGUALQUE   reduce using rule 114 (neu_hacerExp -> .)
    IGUALQUE        reduce using rule 114 (neu_hacerExp -> .)
    DIFQUE          reduce using rule 114 (neu_hacerExp -> .)
    OR              reduce using rule 114 (neu_hacerExp -> .)
    AND             reduce using rule 114 (neu_hacerExp -> .)
    R_PAR           reduce using rule 114 (neu_hacerExp -> .)
    R_CORCHETE      reduce using rule 114 (neu_hacerExp -> .)
    COMA            reduce using rule 114 (neu_hacerExp -> .)
    PUNTOYCOMA      reduce using rule 114 (neu_hacerExp -> .)
    HACER           reduce using rule 114 (neu_hacerExp -> .)

    neu_hacerExp                   shift and go to state 149

state 120

    (78) termino -> factor . neu_hacerTermino terminoU
    (113) neu_hacerTermino -> .

    MULT            reduce using rule 113 (neu_hacerTermino -> .)
    DIV             reduce using rule 113 (neu_hacerTermino -> .)
    MAS             reduce using rule 113 (neu_hacerTermino -> .)
    MENOS           reduce using rule 113 (neu_hacerTermino -> .)
    MENORQUE        reduce using rule 113 (neu_hacerTermino -> .)
    MAYORQUE        reduce using rule 113 (neu_hacerTermino -> .)
    MENORIGUALQUE   reduce using rule 113 (neu_hacerTermino -> .)
    MAYORIGUALQUE   reduce using rule 113 (neu_hacerTermino -> .)
    IGUALQUE        reduce using rule 113 (neu_hacerTermino -> .)
    DIFQUE          reduce using rule 113 (neu_hacerTermino -> .)
    OR              reduce using rule 113 (neu_hacerTermino -> .)
    AND             reduce using rule 113 (neu_hacerTermino -> .)
    R_PAR           reduce using rule 113 (neu_hacerTermino -> .)
    R_CORCHETE      reduce using rule 113 (neu_hacerTermino -> .)
    COMA            reduce using rule 113 (neu_hacerTermino -> .)
    PUNTOYCOMA      reduce using rule 113 (neu_hacerTermino -> .)
    HACER           reduce using rule 113 (neu_hacerTermino -> .)

    neu_hacerTermino               shift and go to state 150

state 121

    (81) factor -> varcte . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 151

state 122

    (82) factor -> llamada . neu_esExpresion empty
    (108) neu_esExpresion -> .

    MULT            reduce using rule 108 (neu_esExpresion -> .)
    DIV             reduce using rule 108 (neu_esExpresion -> .)
    MAS             reduce using rule 108 (neu_esExpresion -> .)
    MENOS           reduce using rule 108 (neu_esExpresion -> .)
    MENORQUE        reduce using rule 108 (neu_esExpresion -> .)
    MAYORQUE        reduce using rule 108 (neu_esExpresion -> .)
    MENORIGUALQUE   reduce using rule 108 (neu_esExpresion -> .)
    MAYORIGUALQUE   reduce using rule 108 (neu_esExpresion -> .)
    IGUALQUE        reduce using rule 108 (neu_esExpresion -> .)
    DIFQUE          reduce using rule 108 (neu_esExpresion -> .)
    OR              reduce using rule 108 (neu_esExpresion -> .)
    AND             reduce using rule 108 (neu_esExpresion -> .)
    R_PAR           reduce using rule 108 (neu_esExpresion -> .)
    R_CORCHETE      reduce using rule 108 (neu_esExpresion -> .)
    COMA            reduce using rule 108 (neu_esExpresion -> .)
    PUNTOYCOMA      reduce using rule 108 (neu_esExpresion -> .)
    HACER           reduce using rule 108 (neu_esExpresion -> .)

    neu_esExpresion                shift and go to state 152

state 123

    (84) varcte -> ID . neu_addID empty
    (85) varcte -> ID . L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (45) llamada -> ID . neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty
    (98) neu_addID -> .
    (105) neu_llamada_era -> .

    L_CORCHETE      shift and go to state 154
    MULT            reduce using rule 98 (neu_addID -> .)
    DIV             reduce using rule 98 (neu_addID -> .)
    MAS             reduce using rule 98 (neu_addID -> .)
    MENOS           reduce using rule 98 (neu_addID -> .)
    MENORQUE        reduce using rule 98 (neu_addID -> .)
    MAYORQUE        reduce using rule 98 (neu_addID -> .)
    MENORIGUALQUE   reduce using rule 98 (neu_addID -> .)
    MAYORIGUALQUE   reduce using rule 98 (neu_addID -> .)
    IGUALQUE        reduce using rule 98 (neu_addID -> .)
    DIFQUE          reduce using rule 98 (neu_addID -> .)
    OR              reduce using rule 98 (neu_addID -> .)
    AND             reduce using rule 98 (neu_addID -> .)
    R_PAR           reduce using rule 98 (neu_addID -> .)
    R_CORCHETE      reduce using rule 98 (neu_addID -> .)
    COMA            reduce using rule 98 (neu_addID -> .)
    PUNTOYCOMA      reduce using rule 98 (neu_addID -> .)
    HACER           reduce using rule 98 (neu_addID -> .)
    L_PAR           reduce using rule 105 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 153
    neu_llamada_era                shift and go to state 94

state 124

    (86) varcte -> ENTEROVAL . neu_addConstanteEntero empty
    (101) neu_addConstanteEntero -> .

    MULT            reduce using rule 101 (neu_addConstanteEntero -> .)
    DIV             reduce using rule 101 (neu_addConstanteEntero -> .)
    MAS             reduce using rule 101 (neu_addConstanteEntero -> .)
    MENOS           reduce using rule 101 (neu_addConstanteEntero -> .)
    MENORQUE        reduce using rule 101 (neu_addConstanteEntero -> .)
    MAYORQUE        reduce using rule 101 (neu_addConstanteEntero -> .)
    MENORIGUALQUE   reduce using rule 101 (neu_addConstanteEntero -> .)
    MAYORIGUALQUE   reduce using rule 101 (neu_addConstanteEntero -> .)
    IGUALQUE        reduce using rule 101 (neu_addConstanteEntero -> .)
    DIFQUE          reduce using rule 101 (neu_addConstanteEntero -> .)
    OR              reduce using rule 101 (neu_addConstanteEntero -> .)
    AND             reduce using rule 101 (neu_addConstanteEntero -> .)
    R_PAR           reduce using rule 101 (neu_addConstanteEntero -> .)
    R_CORCHETE      reduce using rule 101 (neu_addConstanteEntero -> .)
    COMA            reduce using rule 101 (neu_addConstanteEntero -> .)
    PUNTOYCOMA      reduce using rule 101 (neu_addConstanteEntero -> .)
    HACER           reduce using rule 101 (neu_addConstanteEntero -> .)

    neu_addConstanteEntero         shift and go to state 155

state 125

    (87) varcte -> FLOTANTEVAL . neu_addConstanteFlotante empty
    (102) neu_addConstanteFlotante -> .

    MULT            reduce using rule 102 (neu_addConstanteFlotante -> .)
    DIV             reduce using rule 102 (neu_addConstanteFlotante -> .)
    MAS             reduce using rule 102 (neu_addConstanteFlotante -> .)
    MENOS           reduce using rule 102 (neu_addConstanteFlotante -> .)
    MENORQUE        reduce using rule 102 (neu_addConstanteFlotante -> .)
    MAYORQUE        reduce using rule 102 (neu_addConstanteFlotante -> .)
    MENORIGUALQUE   reduce using rule 102 (neu_addConstanteFlotante -> .)
    MAYORIGUALQUE   reduce using rule 102 (neu_addConstanteFlotante -> .)
    IGUALQUE        reduce using rule 102 (neu_addConstanteFlotante -> .)
    DIFQUE          reduce using rule 102 (neu_addConstanteFlotante -> .)
    OR              reduce using rule 102 (neu_addConstanteFlotante -> .)
    AND             reduce using rule 102 (neu_addConstanteFlotante -> .)
    R_PAR           reduce using rule 102 (neu_addConstanteFlotante -> .)
    R_CORCHETE      reduce using rule 102 (neu_addConstanteFlotante -> .)
    COMA            reduce using rule 102 (neu_addConstanteFlotante -> .)
    PUNTOYCOMA      reduce using rule 102 (neu_addConstanteFlotante -> .)
    HACER           reduce using rule 102 (neu_addConstanteFlotante -> .)

    neu_addConstanteFlotante       shift and go to state 156

state 126

    (88) varcte -> CARACTERVAL . neu_addConstanteCaracter empty
    (103) neu_addConstanteCaracter -> .

    MULT            reduce using rule 103 (neu_addConstanteCaracter -> .)
    DIV             reduce using rule 103 (neu_addConstanteCaracter -> .)
    MAS             reduce using rule 103 (neu_addConstanteCaracter -> .)
    MENOS           reduce using rule 103 (neu_addConstanteCaracter -> .)
    MENORQUE        reduce using rule 103 (neu_addConstanteCaracter -> .)
    MAYORQUE        reduce using rule 103 (neu_addConstanteCaracter -> .)
    MENORIGUALQUE   reduce using rule 103 (neu_addConstanteCaracter -> .)
    MAYORIGUALQUE   reduce using rule 103 (neu_addConstanteCaracter -> .)
    IGUALQUE        reduce using rule 103 (neu_addConstanteCaracter -> .)
    DIFQUE          reduce using rule 103 (neu_addConstanteCaracter -> .)
    OR              reduce using rule 103 (neu_addConstanteCaracter -> .)
    AND             reduce using rule 103 (neu_addConstanteCaracter -> .)
    R_PAR           reduce using rule 103 (neu_addConstanteCaracter -> .)
    R_CORCHETE      reduce using rule 103 (neu_addConstanteCaracter -> .)
    COMA            reduce using rule 103 (neu_addConstanteCaracter -> .)
    PUNTOYCOMA      reduce using rule 103 (neu_addConstanteCaracter -> .)
    HACER           reduce using rule 103 (neu_addConstanteCaracter -> .)

    neu_addConstanteCaracter       shift and go to state 157

state 127

    (47) lectura -> LEER L_PAR ID . neu_lectura R_PAR empty
    (118) neu_lectura -> .

    R_PAR           reduce using rule 118 (neu_lectura -> .)

    neu_lectura                    shift and go to state 158

state 128

    (48) escritura -> ESCRIBIR L_PAR escrituraD . R_PAR empty

    R_PAR           shift and go to state 159


state 129

    (49) escrituraD -> hiper_exp . neu_escritura empty
    (119) neu_escritura -> .

    R_PAR           reduce using rule 119 (neu_escritura -> .)

    neu_escritura                  shift and go to state 160

state 130

    (50) escrituraD -> LETRERO . neu_letrero empty
    (120) neu_letrero -> .

    R_PAR           reduce using rule 120 (neu_letrero -> .)

    neu_letrero                    shift and go to state 161

state 131

    (51) decision -> SI L_PAR hiper_exp . R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty

    R_PAR           shift and go to state 162


state 132

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes . hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 163
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 133

    (55) no_condicional -> DESDE L_PAR asignacionFor . R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    R_PAR           shift and go to state 164


state 134

    (56) asignacionFor -> ID . neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty
    (128) neu_addIDFor -> .

    IGUAL           reduce using rule 128 (neu_addIDFor -> .)

    neu_addIDFor                   shift and go to state 165

state 135

    (21) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros . recibir_parametrosD empty
    (23) recibir_parametrosD -> . COMA recibir_parametros empty
    (24) recibir_parametrosD -> . empty
    (89) empty -> .

    COMA            shift and go to state 168
    R_PAR           reduce using rule 89 (empty -> .)

    recibir_parametrosD            shift and go to state 166
    empty                          shift and go to state 167

state 136

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque . neu_endFuncion funcionesD
    (93) neu_endFuncion -> .

    ENTERO          reduce using rule 93 (neu_endFuncion -> .)
    FLOTANTE        reduce using rule 93 (neu_endFuncion -> .)
    CARACTER        reduce using rule 93 (neu_endFuncion -> .)
    VOID            reduce using rule 93 (neu_endFuncion -> .)
    PRINCIPAL       reduce using rule 93 (neu_endFuncion -> .)

    neu_endFuncion                 shift and go to state 169

state 137

    (8) variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    VOID            reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 8 (variablesD -> ID L_CORCHETE ENTEROVAL R_CORCHETE DOSPUNTOS tipo_var neu_addArreglo PUNTOYCOMA variablesU .)


state 138

    (30) bloqueU -> estatuto bloqueD neu_vaciarPilas empty .

    R_LLAVE         reduce using rule 30 (bloqueU -> estatuto bloqueD neu_vaciarPilas empty .)


state 139

    (35) estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .

    ID              reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    REGRESA         reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    LEER            reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    SI              reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    DESDE           reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 35 (estatuto -> llamada neu_esEstatuto PUNTOYCOMA empty .)


state 140

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 170
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 141

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty

    R_CORCHETE      shift and go to state 171


state 142

    (45) llamada -> ID neu_llamada_era L_PAR mandar_parametros . neu_paramValidacion R_PAR neu_llamada_gosub empty
    (134) neu_paramValidacion -> .

    R_PAR           reduce using rule 134 (neu_paramValidacion -> .)

    neu_paramValidacion            shift and go to state 172

state 143

    (26) mandar_parametros -> empty .

    R_PAR           reduce using rule 26 (mandar_parametros -> empty .)


state 144

    (25) mandar_parametros -> hiper_exp . neu_parametroEnviado mandar_parametrosD empty
    (132) neu_parametroEnviado -> .

    COMA            reduce using rule 132 (neu_parametroEnviado -> .)
    R_PAR           reduce using rule 132 (neu_parametroEnviado -> .)

    neu_parametroEnviado           shift and go to state 173

state 145

    (83) factor -> L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 174


state 146

    (46) retorno -> REGRESA L_PAR hiper_exp neu_retorno . R_PAR empty

    R_PAR           shift and go to state 175


state 147

    (69) hiper_exp -> super_exp neu_hacerHiperExp . hiper_expU
    (70) hiper_expU -> . operadorL hiper_exp empty
    (71) hiper_expU -> . empty
    (61) operadorL -> . OR neu_addOperador empty
    (62) operadorL -> . AND neu_addOperador empty
    (89) empty -> .

    OR              shift and go to state 179
    AND             shift and go to state 180
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    hiper_expU                     shift and go to state 176
    operadorL                      shift and go to state 177
    empty                          shift and go to state 178

state 148

    (72) super_exp -> exp neu_hacerSuperExp . super_expU
    (73) super_expU -> . operadorR super_exp empty
    (74) super_expU -> . empty
    (63) operadorR -> . MENORQUE neu_addOperador empty
    (64) operadorR -> . MAYORQUE neu_addOperador empty
    (65) operadorR -> . MENORIGUALQUE neu_addOperador empty
    (66) operadorR -> . MAYORIGUALQUE neu_addOperador empty
    (67) operadorR -> . IGUALQUE neu_addOperador empty
    (68) operadorR -> . DIFQUE neu_addOperador empty
    (89) empty -> .

    MENORQUE        shift and go to state 184
    MAYORQUE        shift and go to state 185
    MENORIGUALQUE   shift and go to state 186
    MAYORIGUALQUE   shift and go to state 187
    IGUALQUE        shift and go to state 188
    DIFQUE          shift and go to state 189
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    super_expU                     shift and go to state 181
    operadorR                      shift and go to state 182
    empty                          shift and go to state 183

state 149

    (75) exp -> termino neu_hacerExp . expU
    (76) expU -> . operadorA exp
    (77) expU -> . empty
    (57) operadorA -> . MAS neu_addOperador empty
    (58) operadorA -> . MENOS neu_addOperador empty
    (89) empty -> .

    MAS             shift and go to state 193
    MENOS           shift and go to state 194
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    expU                           shift and go to state 190
    operadorA                      shift and go to state 191
    empty                          shift and go to state 192

state 150

    (78) termino -> factor neu_hacerTermino . terminoU
    (79) terminoU -> . operadorT termino
    (80) terminoU -> . empty
    (59) operadorT -> . MULT neu_addOperador empty
    (60) operadorT -> . DIV neu_addOperador empty
    (89) empty -> .

    MULT            shift and go to state 198
    DIV             shift and go to state 199
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    terminoU                       shift and go to state 195
    operadorT                      shift and go to state 196
    empty                          shift and go to state 197

state 151

    (81) factor -> varcte empty .

    MULT            reduce using rule 81 (factor -> varcte empty .)
    DIV             reduce using rule 81 (factor -> varcte empty .)
    MAS             reduce using rule 81 (factor -> varcte empty .)
    MENOS           reduce using rule 81 (factor -> varcte empty .)
    MENORQUE        reduce using rule 81 (factor -> varcte empty .)
    MAYORQUE        reduce using rule 81 (factor -> varcte empty .)
    MENORIGUALQUE   reduce using rule 81 (factor -> varcte empty .)
    MAYORIGUALQUE   reduce using rule 81 (factor -> varcte empty .)
    IGUALQUE        reduce using rule 81 (factor -> varcte empty .)
    DIFQUE          reduce using rule 81 (factor -> varcte empty .)
    OR              reduce using rule 81 (factor -> varcte empty .)
    AND             reduce using rule 81 (factor -> varcte empty .)
    R_PAR           reduce using rule 81 (factor -> varcte empty .)
    R_CORCHETE      reduce using rule 81 (factor -> varcte empty .)
    COMA            reduce using rule 81 (factor -> varcte empty .)
    PUNTOYCOMA      reduce using rule 81 (factor -> varcte empty .)
    HACER           reduce using rule 81 (factor -> varcte empty .)


state 152

    (82) factor -> llamada neu_esExpresion . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 200

state 153

    (84) varcte -> ID neu_addID . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 201

state 154

    (85) varcte -> ID L_CORCHETE . neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (99) neu_fondoFalso -> .

    L_PAR           reduce using rule 99 (neu_fondoFalso -> .)
    ID              reduce using rule 99 (neu_fondoFalso -> .)
    ENTEROVAL       reduce using rule 99 (neu_fondoFalso -> .)
    FLOTANTEVAL     reduce using rule 99 (neu_fondoFalso -> .)
    CARACTERVAL     reduce using rule 99 (neu_fondoFalso -> .)

    neu_fondoFalso                 shift and go to state 202

state 155

    (86) varcte -> ENTEROVAL neu_addConstanteEntero . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 203

state 156

    (87) varcte -> FLOTANTEVAL neu_addConstanteFlotante . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 204

state 157

    (88) varcte -> CARACTERVAL neu_addConstanteCaracter . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 205

state 158

    (47) lectura -> LEER L_PAR ID neu_lectura . R_PAR empty

    R_PAR           shift and go to state 206


state 159

    (48) escritura -> ESCRIBIR L_PAR escrituraD R_PAR . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 207

state 160

    (49) escrituraD -> hiper_exp neu_escritura . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 208

state 161

    (50) escrituraD -> LETRERO neu_letrero . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 209

state 162

    (51) decision -> SI L_PAR hiper_exp R_PAR . neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty
    (122) neu_iniciarDecision -> .

    ENTONCES        reduce using rule 122 (neu_iniciarDecision -> .)

    neu_iniciarDecision            shift and go to state 210

state 163

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp . neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty
    (126) neu_condicionalDurante -> .

    R_PAR           reduce using rule 126 (neu_condicionalDurante -> .)

    neu_condicionalDurante         shift and go to state 211

state 164

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR . HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty

    HASTA           shift and go to state 212


state 165

    (56) asignacionFor -> ID neu_addIDFor . IGUAL neu_addOperador hiper_exp neu_asignacionFor empty

    IGUAL           shift and go to state 213


state 166

    (21) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 214

state 167

    (24) recibir_parametrosD -> empty .

    R_PAR           reduce using rule 24 (recibir_parametrosD -> empty .)


state 168

    (23) recibir_parametrosD -> COMA . recibir_parametros empty
    (21) recibir_parametros -> . ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty
    (22) recibir_parametros -> . empty
    (89) empty -> .

    ID              shift and go to state 52
    R_PAR           reduce using rule 89 (empty -> .)

    recibir_parametros             shift and go to state 215
    empty                          shift and go to state 54

state 169

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion . funcionesD
    (12) funcionesD -> . funciones
    (13) funcionesD -> . empty
    (9) funciones -> . funcionesU
    (10) funciones -> . empty
    (89) empty -> .
    (11) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (14) tipo_funcion -> . ENTERO empty
    (15) tipo_funcion -> . FLOTANTE empty
    (16) tipo_funcion -> . CARACTER empty
    (17) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 89 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    tipo_funcion                   shift and go to state 12
    funcionesD                     shift and go to state 216
    funciones                      shift and go to state 217
    empty                          shift and go to state 218
    funcionesU                     shift and go to state 11

state 170

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (117) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 117 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 219

state 171

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (100) neu_addIDArreglo -> .

    IGUAL           reduce using rule 100 (neu_addIDArreglo -> .)

    neu_addIDArreglo               shift and go to state 220

state 172

    (45) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion . R_PAR neu_llamada_gosub empty

    R_PAR           shift and go to state 221


state 173

    (25) mandar_parametros -> hiper_exp neu_parametroEnviado . mandar_parametrosD empty
    (27) mandar_parametrosD -> . COMA mandar_parametros empty
    (28) mandar_parametrosD -> . empty
    (89) empty -> .

    COMA            shift and go to state 224
    R_PAR           reduce using rule 89 (empty -> .)

    mandar_parametrosD             shift and go to state 222
    empty                          shift and go to state 223

state 174

    (83) factor -> L_PAR hiper_exp R_PAR . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 225

state 175

    (46) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 226

state 176

    (69) hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .

    R_PAR           reduce using rule 69 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    R_CORCHETE      reduce using rule 69 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    COMA            reduce using rule 69 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    PUNTOYCOMA      reduce using rule 69 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    HACER           reduce using rule 69 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)


state 177

    (70) hiper_expU -> operadorL . hiper_exp empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 227
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 178

    (71) hiper_expU -> empty .

    R_PAR           reduce using rule 71 (hiper_expU -> empty .)
    R_CORCHETE      reduce using rule 71 (hiper_expU -> empty .)
    COMA            reduce using rule 71 (hiper_expU -> empty .)
    PUNTOYCOMA      reduce using rule 71 (hiper_expU -> empty .)
    HACER           reduce using rule 71 (hiper_expU -> empty .)


state 179

    (61) operadorL -> OR . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 228

state 180

    (62) operadorL -> AND . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 229

state 181

    (72) super_exp -> exp neu_hacerSuperExp super_expU .

    OR              reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    AND             reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_PAR           reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_CORCHETE      reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    COMA            reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    PUNTOYCOMA      reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)
    HACER           reduce using rule 72 (super_exp -> exp neu_hacerSuperExp super_expU .)


state 182

    (73) super_expU -> operadorR . super_exp empty
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    super_exp                      shift and go to state 230
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 183

    (74) super_expU -> empty .

    OR              reduce using rule 74 (super_expU -> empty .)
    AND             reduce using rule 74 (super_expU -> empty .)
    R_PAR           reduce using rule 74 (super_expU -> empty .)
    R_CORCHETE      reduce using rule 74 (super_expU -> empty .)
    COMA            reduce using rule 74 (super_expU -> empty .)
    PUNTOYCOMA      reduce using rule 74 (super_expU -> empty .)
    HACER           reduce using rule 74 (super_expU -> empty .)


state 184

    (63) operadorR -> MENORQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 231

state 185

    (64) operadorR -> MAYORQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 232

state 186

    (65) operadorR -> MENORIGUALQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 233

state 187

    (66) operadorR -> MAYORIGUALQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 234

state 188

    (67) operadorR -> IGUALQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 235

state 189

    (68) operadorR -> DIFQUE . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 236

state 190

    (75) exp -> termino neu_hacerExp expU .

    MENORQUE        reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    MAYORQUE        reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    MENORIGUALQUE   reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    MAYORIGUALQUE   reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    IGUALQUE        reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    DIFQUE          reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    OR              reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    AND             reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    R_PAR           reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    R_CORCHETE      reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    COMA            reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    PUNTOYCOMA      reduce using rule 75 (exp -> termino neu_hacerExp expU .)
    HACER           reduce using rule 75 (exp -> termino neu_hacerExp expU .)


state 191

    (76) expU -> operadorA . exp
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    exp                            shift and go to state 237
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 192

    (77) expU -> empty .

    MENORQUE        reduce using rule 77 (expU -> empty .)
    MAYORQUE        reduce using rule 77 (expU -> empty .)
    MENORIGUALQUE   reduce using rule 77 (expU -> empty .)
    MAYORIGUALQUE   reduce using rule 77 (expU -> empty .)
    IGUALQUE        reduce using rule 77 (expU -> empty .)
    DIFQUE          reduce using rule 77 (expU -> empty .)
    OR              reduce using rule 77 (expU -> empty .)
    AND             reduce using rule 77 (expU -> empty .)
    R_PAR           reduce using rule 77 (expU -> empty .)
    R_CORCHETE      reduce using rule 77 (expU -> empty .)
    COMA            reduce using rule 77 (expU -> empty .)
    PUNTOYCOMA      reduce using rule 77 (expU -> empty .)
    HACER           reduce using rule 77 (expU -> empty .)


state 193

    (57) operadorA -> MAS . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 238

state 194

    (58) operadorA -> MENOS . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 239

state 195

    (78) termino -> factor neu_hacerTermino terminoU .

    MAS             reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    MENOS           reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    MENORQUE        reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    MAYORQUE        reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    MENORIGUALQUE   reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    MAYORIGUALQUE   reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    IGUALQUE        reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    DIFQUE          reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    OR              reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    AND             reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    R_PAR           reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    R_CORCHETE      reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    COMA            reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    PUNTOYCOMA      reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)
    HACER           reduce using rule 78 (termino -> factor neu_hacerTermino terminoU .)


state 196

    (79) terminoU -> operadorT . termino
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    termino                        shift and go to state 240
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 197

    (80) terminoU -> empty .

    MAS             reduce using rule 80 (terminoU -> empty .)
    MENOS           reduce using rule 80 (terminoU -> empty .)
    MENORQUE        reduce using rule 80 (terminoU -> empty .)
    MAYORQUE        reduce using rule 80 (terminoU -> empty .)
    MENORIGUALQUE   reduce using rule 80 (terminoU -> empty .)
    MAYORIGUALQUE   reduce using rule 80 (terminoU -> empty .)
    IGUALQUE        reduce using rule 80 (terminoU -> empty .)
    DIFQUE          reduce using rule 80 (terminoU -> empty .)
    OR              reduce using rule 80 (terminoU -> empty .)
    AND             reduce using rule 80 (terminoU -> empty .)
    R_PAR           reduce using rule 80 (terminoU -> empty .)
    R_CORCHETE      reduce using rule 80 (terminoU -> empty .)
    COMA            reduce using rule 80 (terminoU -> empty .)
    PUNTOYCOMA      reduce using rule 80 (terminoU -> empty .)
    HACER           reduce using rule 80 (terminoU -> empty .)


state 198

    (59) operadorT -> MULT . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 241

state 199

    (60) operadorT -> DIV . neu_addOperador empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 242

state 200

    (82) factor -> llamada neu_esExpresion empty .

    MULT            reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    DIV             reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MAS             reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MENOS           reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MENORQUE        reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MAYORQUE        reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MENORIGUALQUE   reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    MAYORIGUALQUE   reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    IGUALQUE        reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    DIFQUE          reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    OR              reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    AND             reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    R_PAR           reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    R_CORCHETE      reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    COMA            reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    PUNTOYCOMA      reduce using rule 82 (factor -> llamada neu_esExpresion empty .)
    HACER           reduce using rule 82 (factor -> llamada neu_esExpresion empty .)


state 201

    (84) varcte -> ID neu_addID empty .

    MULT            reduce using rule 84 (varcte -> ID neu_addID empty .)
    DIV             reduce using rule 84 (varcte -> ID neu_addID empty .)
    MAS             reduce using rule 84 (varcte -> ID neu_addID empty .)
    MENOS           reduce using rule 84 (varcte -> ID neu_addID empty .)
    MENORQUE        reduce using rule 84 (varcte -> ID neu_addID empty .)
    MAYORQUE        reduce using rule 84 (varcte -> ID neu_addID empty .)
    MENORIGUALQUE   reduce using rule 84 (varcte -> ID neu_addID empty .)
    MAYORIGUALQUE   reduce using rule 84 (varcte -> ID neu_addID empty .)
    IGUALQUE        reduce using rule 84 (varcte -> ID neu_addID empty .)
    DIFQUE          reduce using rule 84 (varcte -> ID neu_addID empty .)
    OR              reduce using rule 84 (varcte -> ID neu_addID empty .)
    AND             reduce using rule 84 (varcte -> ID neu_addID empty .)
    R_PAR           reduce using rule 84 (varcte -> ID neu_addID empty .)
    R_CORCHETE      reduce using rule 84 (varcte -> ID neu_addID empty .)
    COMA            reduce using rule 84 (varcte -> ID neu_addID empty .)
    PUNTOYCOMA      reduce using rule 84 (varcte -> ID neu_addID empty .)
    HACER           reduce using rule 84 (varcte -> ID neu_addID empty .)


state 202

    (85) varcte -> ID L_CORCHETE neu_fondoFalso . hiper_exp R_CORCHETE neu_addIDArreglo empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 243
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 203

    (86) varcte -> ENTEROVAL neu_addConstanteEntero empty .

    MULT            reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIV             reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAS             reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENOS           reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORQUE        reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORQUE        reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORIGUALQUE   reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORIGUALQUE   reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    IGUALQUE        reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIFQUE          reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    OR              reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    AND             reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_PAR           reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_CORCHETE      reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    COMA            reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    PUNTOYCOMA      reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    HACER           reduce using rule 86 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)


state 204

    (87) varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .

    MULT            reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIV             reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAS             reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENOS           reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORQUE        reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORQUE        reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORIGUALQUE   reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORIGUALQUE   reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    IGUALQUE        reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIFQUE          reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    OR              reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    AND             reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_PAR           reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_CORCHETE      reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    COMA            reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    PUNTOYCOMA      reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    HACER           reduce using rule 87 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)


state 205

    (88) varcte -> CARACTERVAL neu_addConstanteCaracter empty .

    MULT            reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIV             reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAS             reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENOS           reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORQUE        reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORQUE        reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORIGUALQUE   reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORIGUALQUE   reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    IGUALQUE        reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIFQUE          reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    OR              reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    AND             reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_PAR           reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_CORCHETE      reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    COMA            reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    PUNTOYCOMA      reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    HACER           reduce using rule 88 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)


state 206

    (47) lectura -> LEER L_PAR ID neu_lectura R_PAR . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 244

state 207

    (48) escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .

    PUNTOYCOMA      reduce using rule 48 (escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .)


state 208

    (49) escrituraD -> hiper_exp neu_escritura empty .

    R_PAR           reduce using rule 49 (escrituraD -> hiper_exp neu_escritura empty .)


state 209

    (50) escrituraD -> LETRERO neu_letrero empty .

    R_PAR           reduce using rule 50 (escrituraD -> LETRERO neu_letrero empty .)


state 210

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision . ENTONCES bloque decisionU neu_endDecision empty

    ENTONCES        shift and go to state 245


state 211

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante . R_PAR HACER bloque neu_condicionalDespues empty

    R_PAR           shift and go to state 246


state 212

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA . hiper_exp neu_boolFor HACER bloque neu_endCondicion empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 247
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 213

    (56) asignacionFor -> ID neu_addIDFor IGUAL . neu_addOperador hiper_exp neu_asignacionFor empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 248

state 214

    (21) recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .

    R_PAR           reduce using rule 21 (recibir_parametros -> ID DOSPUNTOS tipo_var neu_recibirParametros recibir_parametrosD empty .)


state 215

    (23) recibir_parametrosD -> COMA recibir_parametros . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 249

state 216

    (11) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .

    PRINCIPAL       reduce using rule 11 (funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .)


state 217

    (12) funcionesD -> funciones .

    PRINCIPAL       reduce using rule 12 (funcionesD -> funciones .)


state 218

    (13) funcionesD -> empty .
    (10) funciones -> empty .

  ! reduce/reduce conflict for PRINCIPAL resolved using rule 10 (funciones -> empty .)
    PRINCIPAL       reduce using rule 10 (funciones -> empty .)

  ! PRINCIPAL       [ reduce using rule 13 (funcionesD -> empty .) ]


state 219

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 250

state 220

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 251


state 221

    (45) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR . neu_llamada_gosub empty
    (106) neu_llamada_gosub -> .

    PUNTOYCOMA      reduce using rule 106 (neu_llamada_gosub -> .)
    MULT            reduce using rule 106 (neu_llamada_gosub -> .)
    DIV             reduce using rule 106 (neu_llamada_gosub -> .)
    MAS             reduce using rule 106 (neu_llamada_gosub -> .)
    MENOS           reduce using rule 106 (neu_llamada_gosub -> .)
    MENORQUE        reduce using rule 106 (neu_llamada_gosub -> .)
    MAYORQUE        reduce using rule 106 (neu_llamada_gosub -> .)
    MENORIGUALQUE   reduce using rule 106 (neu_llamada_gosub -> .)
    MAYORIGUALQUE   reduce using rule 106 (neu_llamada_gosub -> .)
    IGUALQUE        reduce using rule 106 (neu_llamada_gosub -> .)
    DIFQUE          reduce using rule 106 (neu_llamada_gosub -> .)
    OR              reduce using rule 106 (neu_llamada_gosub -> .)
    AND             reduce using rule 106 (neu_llamada_gosub -> .)
    R_PAR           reduce using rule 106 (neu_llamada_gosub -> .)
    R_CORCHETE      reduce using rule 106 (neu_llamada_gosub -> .)
    COMA            reduce using rule 106 (neu_llamada_gosub -> .)
    HACER           reduce using rule 106 (neu_llamada_gosub -> .)

    neu_llamada_gosub              shift and go to state 252

state 222

    (25) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 253

state 223

    (28) mandar_parametrosD -> empty .

    R_PAR           reduce using rule 28 (mandar_parametrosD -> empty .)


state 224

    (27) mandar_parametrosD -> COMA . mandar_parametros empty
    (25) mandar_parametros -> . hiper_exp neu_parametroEnviado mandar_parametrosD empty
    (26) mandar_parametros -> . empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (89) empty -> .
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    R_PAR           reduce using rule 89 (empty -> .)
    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    mandar_parametros              shift and go to state 254
    empty                          shift and go to state 143
    hiper_exp                      shift and go to state 144
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 225

    (83) factor -> L_PAR hiper_exp R_PAR empty .

    MULT            reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIV             reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAS             reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENOS           reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORQUE        reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORQUE        reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORIGUALQUE   reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORIGUALQUE   reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    IGUALQUE        reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIFQUE          reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    OR              reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    AND             reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_PAR           reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_CORCHETE      reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    COMA            reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    PUNTOYCOMA      reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)
    HACER           reduce using rule 83 (factor -> L_PAR hiper_exp R_PAR empty .)


state 226

    (46) retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .

    PUNTOYCOMA      reduce using rule 46 (retorno -> REGRESA L_PAR hiper_exp neu_retorno R_PAR empty .)


state 227

    (70) hiper_expU -> operadorL hiper_exp . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 255

state 228

    (61) operadorL -> OR neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 256

state 229

    (62) operadorL -> AND neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 257

state 230

    (73) super_expU -> operadorR super_exp . empty
    (89) empty -> .

    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 258

state 231

    (63) operadorR -> MENORQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 259

state 232

    (64) operadorR -> MAYORQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 260

state 233

    (65) operadorR -> MENORIGUALQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 261

state 234

    (66) operadorR -> MAYORIGUALQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 262

state 235

    (67) operadorR -> IGUALQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 263

state 236

    (68) operadorR -> DIFQUE neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 264

state 237

    (76) expU -> operadorA exp .

    MENORQUE        reduce using rule 76 (expU -> operadorA exp .)
    MAYORQUE        reduce using rule 76 (expU -> operadorA exp .)
    MENORIGUALQUE   reduce using rule 76 (expU -> operadorA exp .)
    MAYORIGUALQUE   reduce using rule 76 (expU -> operadorA exp .)
    IGUALQUE        reduce using rule 76 (expU -> operadorA exp .)
    DIFQUE          reduce using rule 76 (expU -> operadorA exp .)
    OR              reduce using rule 76 (expU -> operadorA exp .)
    AND             reduce using rule 76 (expU -> operadorA exp .)
    R_PAR           reduce using rule 76 (expU -> operadorA exp .)
    R_CORCHETE      reduce using rule 76 (expU -> operadorA exp .)
    COMA            reduce using rule 76 (expU -> operadorA exp .)
    PUNTOYCOMA      reduce using rule 76 (expU -> operadorA exp .)
    HACER           reduce using rule 76 (expU -> operadorA exp .)


state 238

    (57) operadorA -> MAS neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 265

state 239

    (58) operadorA -> MENOS neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 266

state 240

    (79) terminoU -> operadorT termino .

    MAS             reduce using rule 79 (terminoU -> operadorT termino .)
    MENOS           reduce using rule 79 (terminoU -> operadorT termino .)
    MENORQUE        reduce using rule 79 (terminoU -> operadorT termino .)
    MAYORQUE        reduce using rule 79 (terminoU -> operadorT termino .)
    MENORIGUALQUE   reduce using rule 79 (terminoU -> operadorT termino .)
    MAYORIGUALQUE   reduce using rule 79 (terminoU -> operadorT termino .)
    IGUALQUE        reduce using rule 79 (terminoU -> operadorT termino .)
    DIFQUE          reduce using rule 79 (terminoU -> operadorT termino .)
    OR              reduce using rule 79 (terminoU -> operadorT termino .)
    AND             reduce using rule 79 (terminoU -> operadorT termino .)
    R_PAR           reduce using rule 79 (terminoU -> operadorT termino .)
    R_CORCHETE      reduce using rule 79 (terminoU -> operadorT termino .)
    COMA            reduce using rule 79 (terminoU -> operadorT termino .)
    PUNTOYCOMA      reduce using rule 79 (terminoU -> operadorT termino .)
    HACER           reduce using rule 79 (terminoU -> operadorT termino .)


state 241

    (59) operadorT -> MULT neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 267

state 242

    (60) operadorT -> DIV neu_addOperador . empty
    (89) empty -> .

    L_PAR           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    ENTEROVAL       reduce using rule 89 (empty -> .)
    FLOTANTEVAL     reduce using rule 89 (empty -> .)
    CARACTERVAL     reduce using rule 89 (empty -> .)

    empty                          shift and go to state 268

state 243

    (85) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp . R_CORCHETE neu_addIDArreglo empty

    R_CORCHETE      shift and go to state 269


state 244

    (47) lectura -> LEER L_PAR ID neu_lectura R_PAR empty .

    PUNTOYCOMA      reduce using rule 47 (lectura -> LEER L_PAR ID neu_lectura R_PAR empty .)


state 245

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES . bloque decisionU neu_endDecision empty
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 270

state 246

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR . HACER bloque neu_condicionalDespues empty

    HACER           shift and go to state 271


state 247

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp . neu_boolFor HACER bloque neu_endCondicion empty
    (130) neu_boolFor -> .

    HACER           reduce using rule 130 (neu_boolFor -> .)

    neu_boolFor                    shift and go to state 272

state 248

    (56) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador . hiper_exp neu_asignacionFor empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 273
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 249

    (23) recibir_parametrosD -> COMA recibir_parametros empty .

    R_PAR           reduce using rule 23 (recibir_parametrosD -> COMA recibir_parametros empty .)


state 250

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 43 (asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 251

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (109) neu_addOperador -> .

    L_PAR           reduce using rule 109 (neu_addOperador -> .)
    ID              reduce using rule 109 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 109 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 109 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 109 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 274

state 252

    (45) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 275

state 253

    (25) mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .

    R_PAR           reduce using rule 25 (mandar_parametros -> hiper_exp neu_parametroEnviado mandar_parametrosD empty .)


state 254

    (27) mandar_parametrosD -> COMA mandar_parametros . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 276

state 255

    (70) hiper_expU -> operadorL hiper_exp empty .

    R_PAR           reduce using rule 70 (hiper_expU -> operadorL hiper_exp empty .)
    R_CORCHETE      reduce using rule 70 (hiper_expU -> operadorL hiper_exp empty .)
    COMA            reduce using rule 70 (hiper_expU -> operadorL hiper_exp empty .)
    PUNTOYCOMA      reduce using rule 70 (hiper_expU -> operadorL hiper_exp empty .)
    HACER           reduce using rule 70 (hiper_expU -> operadorL hiper_exp empty .)


state 256

    (61) operadorL -> OR neu_addOperador empty .

    L_PAR           reduce using rule 61 (operadorL -> OR neu_addOperador empty .)
    ID              reduce using rule 61 (operadorL -> OR neu_addOperador empty .)
    ENTEROVAL       reduce using rule 61 (operadorL -> OR neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 61 (operadorL -> OR neu_addOperador empty .)
    CARACTERVAL     reduce using rule 61 (operadorL -> OR neu_addOperador empty .)


state 257

    (62) operadorL -> AND neu_addOperador empty .

    L_PAR           reduce using rule 62 (operadorL -> AND neu_addOperador empty .)
    ID              reduce using rule 62 (operadorL -> AND neu_addOperador empty .)
    ENTEROVAL       reduce using rule 62 (operadorL -> AND neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 62 (operadorL -> AND neu_addOperador empty .)
    CARACTERVAL     reduce using rule 62 (operadorL -> AND neu_addOperador empty .)


state 258

    (73) super_expU -> operadorR super_exp empty .

    OR              reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    AND             reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    R_PAR           reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    R_CORCHETE      reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    COMA            reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    PUNTOYCOMA      reduce using rule 73 (super_expU -> operadorR super_exp empty .)
    HACER           reduce using rule 73 (super_expU -> operadorR super_exp empty .)


state 259

    (63) operadorR -> MENORQUE neu_addOperador empty .

    L_PAR           reduce using rule 63 (operadorR -> MENORQUE neu_addOperador empty .)
    ID              reduce using rule 63 (operadorR -> MENORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 63 (operadorR -> MENORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 63 (operadorR -> MENORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 63 (operadorR -> MENORQUE neu_addOperador empty .)


state 260

    (64) operadorR -> MAYORQUE neu_addOperador empty .

    L_PAR           reduce using rule 64 (operadorR -> MAYORQUE neu_addOperador empty .)
    ID              reduce using rule 64 (operadorR -> MAYORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 64 (operadorR -> MAYORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 64 (operadorR -> MAYORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 64 (operadorR -> MAYORQUE neu_addOperador empty .)


state 261

    (65) operadorR -> MENORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 65 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 65 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 65 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 65 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 65 (operadorR -> MENORIGUALQUE neu_addOperador empty .)


state 262

    (66) operadorR -> MAYORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 66 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 66 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 66 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 66 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 66 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)


state 263

    (67) operadorR -> IGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 67 (operadorR -> IGUALQUE neu_addOperador empty .)
    ID              reduce using rule 67 (operadorR -> IGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 67 (operadorR -> IGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 67 (operadorR -> IGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 67 (operadorR -> IGUALQUE neu_addOperador empty .)


state 264

    (68) operadorR -> DIFQUE neu_addOperador empty .

    L_PAR           reduce using rule 68 (operadorR -> DIFQUE neu_addOperador empty .)
    ID              reduce using rule 68 (operadorR -> DIFQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 68 (operadorR -> DIFQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 68 (operadorR -> DIFQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 68 (operadorR -> DIFQUE neu_addOperador empty .)


state 265

    (57) operadorA -> MAS neu_addOperador empty .

    L_PAR           reduce using rule 57 (operadorA -> MAS neu_addOperador empty .)
    ID              reduce using rule 57 (operadorA -> MAS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 57 (operadorA -> MAS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 57 (operadorA -> MAS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 57 (operadorA -> MAS neu_addOperador empty .)


state 266

    (58) operadorA -> MENOS neu_addOperador empty .

    L_PAR           reduce using rule 58 (operadorA -> MENOS neu_addOperador empty .)
    ID              reduce using rule 58 (operadorA -> MENOS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 58 (operadorA -> MENOS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 58 (operadorA -> MENOS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 58 (operadorA -> MENOS neu_addOperador empty .)


state 267

    (59) operadorT -> MULT neu_addOperador empty .

    L_PAR           reduce using rule 59 (operadorT -> MULT neu_addOperador empty .)
    ID              reduce using rule 59 (operadorT -> MULT neu_addOperador empty .)
    ENTEROVAL       reduce using rule 59 (operadorT -> MULT neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 59 (operadorT -> MULT neu_addOperador empty .)
    CARACTERVAL     reduce using rule 59 (operadorT -> MULT neu_addOperador empty .)


state 268

    (60) operadorT -> DIV neu_addOperador empty .

    L_PAR           reduce using rule 60 (operadorT -> DIV neu_addOperador empty .)
    ID              reduce using rule 60 (operadorT -> DIV neu_addOperador empty .)
    ENTEROVAL       reduce using rule 60 (operadorT -> DIV neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 60 (operadorT -> DIV neu_addOperador empty .)
    CARACTERVAL     reduce using rule 60 (operadorT -> DIV neu_addOperador empty .)


state 269

    (85) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE . neu_addIDArreglo empty
    (100) neu_addIDArreglo -> .

    MULT            reduce using rule 100 (neu_addIDArreglo -> .)
    DIV             reduce using rule 100 (neu_addIDArreglo -> .)
    MAS             reduce using rule 100 (neu_addIDArreglo -> .)
    MENOS           reduce using rule 100 (neu_addIDArreglo -> .)
    MENORQUE        reduce using rule 100 (neu_addIDArreglo -> .)
    MAYORQUE        reduce using rule 100 (neu_addIDArreglo -> .)
    MENORIGUALQUE   reduce using rule 100 (neu_addIDArreglo -> .)
    MAYORIGUALQUE   reduce using rule 100 (neu_addIDArreglo -> .)
    IGUALQUE        reduce using rule 100 (neu_addIDArreglo -> .)
    DIFQUE          reduce using rule 100 (neu_addIDArreglo -> .)
    OR              reduce using rule 100 (neu_addIDArreglo -> .)
    AND             reduce using rule 100 (neu_addIDArreglo -> .)
    R_PAR           reduce using rule 100 (neu_addIDArreglo -> .)
    R_CORCHETE      reduce using rule 100 (neu_addIDArreglo -> .)
    COMA            reduce using rule 100 (neu_addIDArreglo -> .)
    PUNTOYCOMA      reduce using rule 100 (neu_addIDArreglo -> .)
    HACER           reduce using rule 100 (neu_addIDArreglo -> .)

    neu_addIDArreglo               shift and go to state 277

state 270

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque . decisionU neu_endDecision empty
    (52) decisionU -> . SINO neu_iniciarDecisionElse bloque empty
    (53) decisionU -> . empty
    (89) empty -> .

    SINO            shift and go to state 280
    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    decisionU                      shift and go to state 278
    empty                          shift and go to state 279

state 271

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER . bloque neu_condicionalDespues empty
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 281

state 272

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor . HACER bloque neu_endCondicion empty

    HACER           shift and go to state 282


state 273

    (56) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp . neu_asignacionFor empty
    (129) neu_asignacionFor -> .

    R_PAR           reduce using rule 129 (neu_asignacionFor -> .)

    neu_asignacionFor              shift and go to state 283

state 274

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (69) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (72) super_exp -> . exp neu_hacerSuperExp super_expU
    (75) exp -> . termino neu_hacerExp expU
    (78) termino -> . factor neu_hacerTermino terminoU
    (81) factor -> . varcte empty
    (82) factor -> . llamada neu_esExpresion empty
    (83) factor -> . L_PAR hiper_exp R_PAR empty
    (84) varcte -> . ID neu_addID empty
    (85) varcte -> . ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty
    (86) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (87) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (88) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (45) llamada -> . ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 115
    ID              shift and go to state 123
    ENTEROVAL       shift and go to state 124
    FLOTANTEVAL     shift and go to state 125
    CARACTERVAL     shift and go to state 126

    hiper_exp                      shift and go to state 284
    super_exp                      shift and go to state 117
    exp                            shift and go to state 118
    termino                        shift and go to state 119
    factor                         shift and go to state 120
    varcte                         shift and go to state 121
    llamada                        shift and go to state 122

state 275

    (45) llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .

    PUNTOYCOMA      reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MULT            reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIV             reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAS             reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENOS           reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORQUE        reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORQUE        reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MENORIGUALQUE   reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    MAYORIGUALQUE   reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    IGUALQUE        reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    DIFQUE          reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    OR              reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    AND             reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    R_PAR           reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    R_CORCHETE      reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    COMA            reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)
    HACER           reduce using rule 45 (llamada -> ID neu_llamada_era L_PAR mandar_parametros neu_paramValidacion R_PAR neu_llamada_gosub empty .)


state 276

    (27) mandar_parametrosD -> COMA mandar_parametros empty .

    R_PAR           reduce using rule 27 (mandar_parametrosD -> COMA mandar_parametros empty .)


state 277

    (85) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo . empty
    (89) empty -> .

    MULT            reduce using rule 89 (empty -> .)
    DIV             reduce using rule 89 (empty -> .)
    MAS             reduce using rule 89 (empty -> .)
    MENOS           reduce using rule 89 (empty -> .)
    MENORQUE        reduce using rule 89 (empty -> .)
    MAYORQUE        reduce using rule 89 (empty -> .)
    MENORIGUALQUE   reduce using rule 89 (empty -> .)
    MAYORIGUALQUE   reduce using rule 89 (empty -> .)
    IGUALQUE        reduce using rule 89 (empty -> .)
    DIFQUE          reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    R_PAR           reduce using rule 89 (empty -> .)
    R_CORCHETE      reduce using rule 89 (empty -> .)
    COMA            reduce using rule 89 (empty -> .)
    PUNTOYCOMA      reduce using rule 89 (empty -> .)
    HACER           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 285

state 278

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU . neu_endDecision empty
    (124) neu_endDecision -> .

    ID              reduce using rule 124 (neu_endDecision -> .)
    REGRESA         reduce using rule 124 (neu_endDecision -> .)
    LEER            reduce using rule 124 (neu_endDecision -> .)
    ESCRIBIR        reduce using rule 124 (neu_endDecision -> .)
    SI              reduce using rule 124 (neu_endDecision -> .)
    MIENTRAS        reduce using rule 124 (neu_endDecision -> .)
    DESDE           reduce using rule 124 (neu_endDecision -> .)
    R_LLAVE         reduce using rule 124 (neu_endDecision -> .)

    neu_endDecision                shift and go to state 286

state 279

    (53) decisionU -> empty .

    ID              reduce using rule 53 (decisionU -> empty .)
    REGRESA         reduce using rule 53 (decisionU -> empty .)
    LEER            reduce using rule 53 (decisionU -> empty .)
    ESCRIBIR        reduce using rule 53 (decisionU -> empty .)
    SI              reduce using rule 53 (decisionU -> empty .)
    MIENTRAS        reduce using rule 53 (decisionU -> empty .)
    DESDE           reduce using rule 53 (decisionU -> empty .)
    R_LLAVE         reduce using rule 53 (decisionU -> empty .)


state 280

    (52) decisionU -> SINO . neu_iniciarDecisionElse bloque empty
    (123) neu_iniciarDecisionElse -> .

    L_LLAVE         reduce using rule 123 (neu_iniciarDecisionElse -> .)

    neu_iniciarDecisionElse        shift and go to state 287

state 281

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque . neu_condicionalDespues empty
    (127) neu_condicionalDespues -> .

    ID              reduce using rule 127 (neu_condicionalDespues -> .)
    REGRESA         reduce using rule 127 (neu_condicionalDespues -> .)
    LEER            reduce using rule 127 (neu_condicionalDespues -> .)
    ESCRIBIR        reduce using rule 127 (neu_condicionalDespues -> .)
    SI              reduce using rule 127 (neu_condicionalDespues -> .)
    MIENTRAS        reduce using rule 127 (neu_condicionalDespues -> .)
    DESDE           reduce using rule 127 (neu_condicionalDespues -> .)
    R_LLAVE         reduce using rule 127 (neu_condicionalDespues -> .)

    neu_condicionalDespues         shift and go to state 288

state 282

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER . bloque neu_endCondicion empty
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 289

state 283

    (56) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor . empty
    (89) empty -> .

    R_PAR           reduce using rule 89 (empty -> .)

    empty                          shift and go to state 290

state 284

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (117) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 117 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 291

state 285

    (85) varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .

    MULT            reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    DIV             reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAS             reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENOS           reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENORQUE        reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAYORQUE        reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MENORIGUALQUE   reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    MAYORIGUALQUE   reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    IGUALQUE        reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    DIFQUE          reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    OR              reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    AND             reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    R_PAR           reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    R_CORCHETE      reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    COMA            reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    PUNTOYCOMA      reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)
    HACER           reduce using rule 85 (varcte -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo empty .)


state 286

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 292

state 287

    (52) decisionU -> SINO neu_iniciarDecisionElse . bloque empty
    (29) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 51

    bloque                         shift and go to state 293

state 288

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 294

state 289

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque . neu_endCondicion empty
    (131) neu_endCondicion -> .

    ID              reduce using rule 131 (neu_endCondicion -> .)
    REGRESA         reduce using rule 131 (neu_endCondicion -> .)
    LEER            reduce using rule 131 (neu_endCondicion -> .)
    ESCRIBIR        reduce using rule 131 (neu_endCondicion -> .)
    SI              reduce using rule 131 (neu_endCondicion -> .)
    MIENTRAS        reduce using rule 131 (neu_endCondicion -> .)
    DESDE           reduce using rule 131 (neu_endCondicion -> .)
    R_LLAVE         reduce using rule 131 (neu_endCondicion -> .)

    neu_endCondicion               shift and go to state 295

state 290

    (56) asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .

    R_PAR           reduce using rule 56 (asignacionFor -> ID neu_addIDFor IGUAL neu_addOperador hiper_exp neu_asignacionFor empty .)


state 291

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (89) empty -> .

    PUNTOYCOMA      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 296

state 292

    (51) decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .

    ID              reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    REGRESA         reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    LEER            reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    ESCRIBIR        reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    SI              reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    MIENTRAS        reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    DESDE           reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)
    R_LLAVE         reduce using rule 51 (decision -> SI L_PAR hiper_exp R_PAR neu_iniciarDecision ENTONCES bloque decisionU neu_endDecision empty .)


state 293

    (52) decisionU -> SINO neu_iniciarDecisionElse bloque . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 297

state 294

    (54) condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .

    ID              reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    REGRESA         reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    LEER            reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    ESCRIBIR        reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    SI              reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    MIENTRAS        reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    DESDE           reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)
    R_LLAVE         reduce using rule 54 (condicional -> MIENTRAS L_PAR neu_condicionalAntes hiper_exp neu_condicionalDurante R_PAR HACER bloque neu_condicionalDespues empty .)


state 295

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    REGRESA         reduce using rule 89 (empty -> .)
    LEER            reduce using rule 89 (empty -> .)
    ESCRIBIR        reduce using rule 89 (empty -> .)
    SI              reduce using rule 89 (empty -> .)
    MIENTRAS        reduce using rule 89 (empty -> .)
    DESDE           reduce using rule 89 (empty -> .)
    R_LLAVE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 298

state 296

    (44) asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 44 (asignacion -> ID L_CORCHETE neu_fondoFalso hiper_exp R_CORCHETE neu_addIDArreglo IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 297

    (52) decisionU -> SINO neu_iniciarDecisionElse bloque empty .

    ID              reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    REGRESA         reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    LEER            reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    ESCRIBIR        reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    SI              reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    MIENTRAS        reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    DESDE           reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)
    R_LLAVE         reduce using rule 52 (decisionU -> SINO neu_iniciarDecisionElse bloque empty .)


state 298

    (55) no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .

    ID              reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    REGRESA         reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    LEER            reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    ESCRIBIR        reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    SI              reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    MIENTRAS        reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    DESDE           reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)
    R_LLAVE         reduce using rule 55 (no_condicional -> DESDE L_PAR asignacionFor R_PAR HASTA hiper_exp neu_boolFor HACER bloque neu_endCondicion empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 51 resolved as shift
WARNING: shift/reduce conflict for LEER in state 51 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 51 resolved as shift
WARNING: shift/reduce conflict for SI in state 51 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 51 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 60 resolved as shift
WARNING: shift/reduce conflict for LEER in state 60 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 60 resolved as shift
WARNING: shift/reduce conflict for SI in state 60 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 60 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 60 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 59
WARNING: reduce/reduce conflict in state 82 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (bloqueD -> empty) in state 82
WARNING: reduce/reduce conflict in state 82 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 82
WARNING: reduce/reduce conflict in state 218 resolved using rule (funciones -> empty)
WARNING: rejected rule (funcionesD -> empty) in state 218
WARNING: Rule (bloqueD -> empty) is never reduced
WARNING: Rule (funcionesD -> empty) is never reduced
