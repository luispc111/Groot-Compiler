Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    L_CORCHETE
    PUNTO
    R_CORCHETE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty
Rule 2     variables -> VARIABLES variablesU
Rule 3     variables -> empty
Rule 4     variablesU -> variablesD
Rule 5     variablesU -> empty
Rule 6     variablesD -> ID neu_addVariableAStack COMA variablesD
Rule 7     variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
Rule 8     funciones -> funcionesU
Rule 9     funciones -> empty
Rule 10    funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
Rule 11    funcionesD -> funciones
Rule 12    funcionesD -> empty
Rule 13    tipo_funcion -> ENTERO empty
Rule 14    tipo_funcion -> FLOTANTE empty
Rule 15    tipo_funcion -> CARACTER empty
Rule 16    tipo_funcion -> VOID empty
Rule 17    tipo_var -> ENTERO empty
Rule 18    tipo_var -> FLOTANTE empty
Rule 19    tipo_var -> CARACTER empty
Rule 20    recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty
Rule 21    recibir_parametros -> empty
Rule 22    recibir_parametrosD -> COMA recibir_parametros empty
Rule 23    recibir_parametrosD -> empty
Rule 24    mandar_parametros -> ID mandar_parametrosD empty
Rule 25    mandar_parametros -> empty
Rule 26    mandar_parametrosD -> COMA mandar_parametros empty
Rule 27    mandar_parametrosD -> empty
Rule 28    bloque -> L_LLAVE bloqueU R_LLAVE empty
Rule 29    bloqueU -> estatuto bloqueD neu_vaciarPilas empty
Rule 30    bloqueU -> empty
Rule 31    bloqueD -> bloqueU empty
Rule 32    bloqueD -> empty
Rule 33    estatuto -> asignacion PUNTOYCOMA empty
Rule 34    estatuto -> llamada PUNTOYCOMA empty
Rule 35    estatuto -> retorno PUNTOYCOMA empty
Rule 36    estatuto -> lectura PUNTOYCOMA empty
Rule 37    estatuto -> escritura PUNTOYCOMA empty
Rule 38    estatuto -> decision empty
Rule 39    estatuto -> condicional empty
Rule 40    estatuto -> no_condicional empty
Rule 41    estatuto -> funciones_especiales PUNTOYCOMA empty
Rule 42    estatuto -> empty
Rule 43    asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
Rule 44    llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty
Rule 45    retorno -> REGRESA L_PAR ID R_PAR empty
Rule 46    lectura -> LEER L_PAR ID neu_lectura R_PAR empty
Rule 47    escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty
Rule 48    escrituraD -> hiper_exp neu_escritura empty
Rule 49    escrituraD -> LETRERO empty
Rule 50    decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty
Rule 51    decisionU -> SINO bloque empty
Rule 52    decisionU -> empty
Rule 53    condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty
Rule 54    no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty
Rule 55    funciones_especiales -> circulo empty
Rule 56    funciones_especiales -> color empty
Rule 57    funciones_especiales -> grosor empty
Rule 58    funciones_especiales -> linea empty
Rule 59    funciones_especiales -> puntoxy empty
Rule 60    funciones_especiales -> arco empty
Rule 61    funciones_especiales -> penup empty
Rule 62    funciones_especiales -> pendown empty
Rule 63    funciones_especiales -> empty
Rule 64    circulo -> CIRCULO L_PAR hiper_exp R_PAR empty
Rule 65    color -> COLOR L_PAR hiper_exp R_PAR empty
Rule 66    grosor -> GROSOR L_PAR hiper_exp R_PAR empty
Rule 67    linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty
Rule 68    puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty
Rule 69    arco -> ARCO L_PAR hiper_exp R_PAR empty
Rule 70    penup -> PENUP L_PAR hiper_exp R_PAR empty
Rule 71    pendown -> PENDOWN L_PAR hiper_exp R_PAR empty
Rule 72    operadorA -> MAS neu_addOperador empty
Rule 73    operadorA -> MENOS neu_addOperador empty
Rule 74    operadorT -> MULT neu_addOperador empty
Rule 75    operadorT -> DIV neu_addOperador empty
Rule 76    operadorL -> OR neu_addOperador empty
Rule 77    operadorL -> AND neu_addOperador empty
Rule 78    operadorR -> MENORQUE neu_addOperador empty
Rule 79    operadorR -> MAYORQUE neu_addOperador empty
Rule 80    operadorR -> MENORIGUALQUE neu_addOperador empty
Rule 81    operadorR -> MAYORIGUALQUE neu_addOperador empty
Rule 82    operadorR -> IGUALQUE neu_addOperador empty
Rule 83    operadorR -> DIFQUE neu_addOperador empty
Rule 84    hiper_exp -> super_exp neu_hacerHiperExp hiper_expU
Rule 85    hiper_expU -> operadorL hiper_exp empty
Rule 86    hiper_expU -> empty
Rule 87    super_exp -> exp neu_hacerSuperExp super_expU
Rule 88    super_expU -> operadorR super_exp empty
Rule 89    super_expU -> empty
Rule 90    exp -> termino neu_hacerExp expU
Rule 91    expU -> operadorA exp
Rule 92    expU -> empty
Rule 93    termino -> factor neu_hacerTermino terminoU
Rule 94    terminoU -> operadorT termino
Rule 95    terminoU -> empty
Rule 96    factor -> varcte empty
Rule 97    factor -> llamada empty
Rule 98    factor -> L_PAR hiper_exp R_PAR empty
Rule 99    varcte -> ID neu_addID empty
Rule 100   varcte -> ENTEROVAL neu_addConstanteEntero empty
Rule 101   varcte -> FLOTANTEVAL neu_addConstanteFlotante empty
Rule 102   varcte -> CARACTERVAL neu_addConstanteCaracter empty
Rule 103   empty -> <empty>
Rule 104   neu_programa -> <empty>
Rule 105   neu_addFuncion -> <empty>
Rule 106   neu_endFuncion -> <empty>
Rule 107   neu_principal -> <empty>
Rule 108   neu_addVariable -> <empty>
Rule 109   neu_addVariableAStack -> <empty>
Rule 110   neu_addID -> <empty>
Rule 111   neu_addConstanteEntero -> <empty>
Rule 112   neu_addConstanteFlotante -> <empty>
Rule 113   neu_addConstanteCaracter -> <empty>
Rule 114   neu_addTermino -> <empty>
Rule 115   neu_llamada_era -> <empty>
Rule 116   neu_llamada_gosub -> <empty>
Rule 117   neu_addOperador -> <empty>
Rule 118   getGMemoria -> <empty>
Rule 119   getLMemoria -> <empty>
Rule 120   getCMemoria -> <empty>
Rule 121   neu_hacerTermino -> <empty>
Rule 122   neu_hacerExp -> <empty>
Rule 123   neu_hacerSuperExp -> <empty>
Rule 124   neu_hacerHiperExp -> <empty>
Rule 125   neu_asignacion -> <empty>
Rule 126   neu_lectura -> <empty>
Rule 127   neu_escritura -> <empty>
Rule 128   neu_vaciarPilas -> <empty>

Terminals, with rules where they appear

AND                  : 77
ARCO                 : 69
CARACTER             : 15 19
CARACTERVAL          : 102
CIRCULO              : 64
COLOR                : 65
COMA                 : 6 22 26 67 67 67 68
DESDE                : 54
DIFQUE               : 83
DIV                  : 75
DOSPUNTOS            : 7 20
ENTERO               : 13 17
ENTEROVAL            : 100
ENTONCES             : 50
ESCRIBIR             : 47
FLOTANTE             : 14 18
FLOTANTEVAL          : 101
FUNCION              : 10
GROSOR               : 66
HACER                : 53 54
HASTA                : 54
ID                   : 1 6 7 10 20 24 43 44 45 46 99
IGUAL                : 43
IGUALQUE             : 82
LEER                 : 46
LETRERO              : 49
LINEA                : 67
L_CORCHETE           : 
L_LLAVE              : 28
L_PAR                : 1 10 44 45 46 47 50 53 54 64 65 66 67 68 69 70 71 98
MAS                  : 72
MAYORIGUALQUE        : 81
MAYORQUE             : 79
MENORIGUALQUE        : 80
MENORQUE             : 78
MENOS                : 73
MIENTRAS             : 53
MULT                 : 74
OR                   : 76
PENDOWN              : 71
PENUP                : 70
PRINCIPAL            : 1
PROGRAMA             : 1
PUNTO                : 
PUNTOXY              : 68
PUNTOYCOMA           : 1 7 33 34 35 36 37 41
REGRESA              : 45
R_CORCHETE           : 
R_LLAVE              : 28
R_PAR                : 1 10 44 45 46 47 50 53 54 64 65 66 67 68 69 70 71 98
SI                   : 50
SINO                 : 51
VARIABLES            : 2
VOID                 : 16
error                : 

Nonterminals, with rules where they appear

arco                 : 60
asignacion           : 33 54
bloque               : 1 10 50 51 53 54
bloqueD              : 29
bloqueU              : 28 31
circulo              : 55
color                : 56
condicional          : 39
decision             : 38
decisionU            : 50
empty                : 1 3 5 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 85 86 88 89 92 95 96 97 98 99 100 101 102
escritura            : 37
escrituraD           : 47
estatuto             : 29
exp                  : 87 91
expU                 : 90
factor               : 93
funciones            : 1 11
funcionesD           : 10
funcionesU           : 8
funciones_especiales : 41
getCMemoria          : 
getGMemoria          : 
getLMemoria          : 
grosor               : 57
hiper_exp            : 43 48 50 53 54 64 65 66 67 67 67 67 68 68 69 70 71 85 98
hiper_expU           : 84
lectura              : 36
linea                : 58
llamada              : 34 97
mandar_parametros    : 26 44
mandar_parametrosD   : 24
neu_addConstanteCaracter : 102
neu_addConstanteEntero : 100
neu_addConstanteFlotante : 101
neu_addFuncion       : 10
neu_addID            : 43 99
neu_addOperador      : 43 72 73 74 75 76 77 78 79 80 81 82 83
neu_addTermino       : 
neu_addVariable      : 7
neu_addVariableAStack : 6
neu_asignacion       : 43
neu_endFuncion       : 10
neu_escritura        : 48
neu_hacerExp         : 90
neu_hacerHiperExp    : 84
neu_hacerSuperExp    : 87
neu_hacerTermino     : 93
neu_lectura          : 46
neu_llamada_era      : 44
neu_llamada_gosub    : 44
neu_principal        : 1
neu_programa         : 1
neu_vaciarPilas      : 29
no_condicional       : 40
operadorA            : 91
operadorL            : 85
operadorR            : 88
operadorT            : 94
pendown              : 62
penup                : 61
program              : 0
puntoxy              : 59
recibir_parametros   : 10 22
recibir_parametrosD  : 20
retorno              : 35
super_exp            : 84 88
super_expU           : 87
termino              : 90 94
terminoU             : 93
tipo_funcion         : 10
tipo_var             : 7 20
varcte               : 96
variables            : 1 10
variablesD           : 4 6
variablesU           : 2 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty

    PROGRAMA        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAMA . ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAMA ID . neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty
    (104) neu_programa -> .

    PUNTOYCOMA      reduce using rule 104 (neu_programa -> .)

    neu_programa                   shift and go to state 4

state 4

    (1) program -> PROGRAMA ID neu_programa . PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty

    PUNTOYCOMA      shift and go to state 5


state 5

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA . variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (103) empty -> .

    VARIABLES       shift and go to state 8
    ENTERO          reduce using rule 103 (empty -> .)
    FLOTANTE        reduce using rule 103 (empty -> .)
    CARACTER        reduce using rule 103 (empty -> .)
    VOID            reduce using rule 103 (empty -> .)
    PRINCIPAL       reduce using rule 103 (empty -> .)

    variables                      shift and go to state 6
    empty                          shift and go to state 7

state 6

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables . funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty
    (8) funciones -> . funcionesU
    (9) funciones -> . empty
    (10) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (103) empty -> .
    (13) tipo_funcion -> . ENTERO empty
    (14) tipo_funcion -> . FLOTANTE empty
    (15) tipo_funcion -> . CARACTER empty
    (16) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 103 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    funciones                      shift and go to state 9
    empty                          shift and go to state 10
    funcionesU                     shift and go to state 11
    tipo_funcion                   shift and go to state 12

state 7

    (3) variables -> empty .

    ENTERO          reduce using rule 3 (variables -> empty .)
    FLOTANTE        reduce using rule 3 (variables -> empty .)
    CARACTER        reduce using rule 3 (variables -> empty .)
    VOID            reduce using rule 3 (variables -> empty .)
    PRINCIPAL       reduce using rule 3 (variables -> empty .)
    L_LLAVE         reduce using rule 3 (variables -> empty .)


state 8

    (2) variables -> VARIABLES . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (103) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 103 (empty -> .)
    FLOTANTE        reduce using rule 103 (empty -> .)
    CARACTER        reduce using rule 103 (empty -> .)
    VOID            reduce using rule 103 (empty -> .)
    PRINCIPAL       reduce using rule 103 (empty -> .)
    L_LLAVE         reduce using rule 103 (empty -> .)

    variablesU                     shift and go to state 17
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 9

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones . PRINCIPAL neu_principal L_PAR R_PAR bloque empty

    PRINCIPAL       shift and go to state 21


state 10

    (9) funciones -> empty .

    PRINCIPAL       reduce using rule 9 (funciones -> empty .)


state 11

    (8) funciones -> funcionesU .

    PRINCIPAL       reduce using rule 8 (funciones -> funcionesU .)


state 12

    (10) funcionesU -> tipo_funcion . FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    FUNCION         shift and go to state 22


state 13

    (13) tipo_funcion -> ENTERO . empty
    (103) empty -> .

    FUNCION         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 23

state 14

    (14) tipo_funcion -> FLOTANTE . empty
    (103) empty -> .

    FUNCION         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 24

state 15

    (15) tipo_funcion -> CARACTER . empty
    (103) empty -> .

    FUNCION         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 25

state 16

    (16) tipo_funcion -> VOID . empty
    (103) empty -> .

    FUNCION         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 26

state 17

    (2) variables -> VARIABLES variablesU .

    ENTERO          reduce using rule 2 (variables -> VARIABLES variablesU .)
    FLOTANTE        reduce using rule 2 (variables -> VARIABLES variablesU .)
    CARACTER        reduce using rule 2 (variables -> VARIABLES variablesU .)
    VOID            reduce using rule 2 (variables -> VARIABLES variablesU .)
    PRINCIPAL       reduce using rule 2 (variables -> VARIABLES variablesU .)
    L_LLAVE         reduce using rule 2 (variables -> VARIABLES variablesU .)


state 18

    (4) variablesU -> variablesD .

    ENTERO          reduce using rule 4 (variablesU -> variablesD .)
    FLOTANTE        reduce using rule 4 (variablesU -> variablesD .)
    CARACTER        reduce using rule 4 (variablesU -> variablesD .)
    VOID            reduce using rule 4 (variablesU -> variablesD .)
    PRINCIPAL       reduce using rule 4 (variablesU -> variablesD .)
    L_LLAVE         reduce using rule 4 (variablesU -> variablesD .)


state 19

    (5) variablesU -> empty .

    ENTERO          reduce using rule 5 (variablesU -> empty .)
    FLOTANTE        reduce using rule 5 (variablesU -> empty .)
    CARACTER        reduce using rule 5 (variablesU -> empty .)
    VOID            reduce using rule 5 (variablesU -> empty .)
    PRINCIPAL       reduce using rule 5 (variablesU -> empty .)
    L_LLAVE         reduce using rule 5 (variablesU -> empty .)


state 20

    (6) variablesD -> ID . neu_addVariableAStack COMA variablesD
    (7) variablesD -> ID . DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (109) neu_addVariableAStack -> .

    DOSPUNTOS       shift and go to state 28
    COMA            reduce using rule 109 (neu_addVariableAStack -> .)

    neu_addVariableAStack          shift and go to state 27

state 21

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL . neu_principal L_PAR R_PAR bloque empty
    (107) neu_principal -> .

    L_PAR           reduce using rule 107 (neu_principal -> .)

    neu_principal                  shift and go to state 29

state 22

    (10) funcionesU -> tipo_funcion FUNCION . ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    ID              shift and go to state 30


state 23

    (13) tipo_funcion -> ENTERO empty .

    FUNCION         reduce using rule 13 (tipo_funcion -> ENTERO empty .)


state 24

    (14) tipo_funcion -> FLOTANTE empty .

    FUNCION         reduce using rule 14 (tipo_funcion -> FLOTANTE empty .)


state 25

    (15) tipo_funcion -> CARACTER empty .

    FUNCION         reduce using rule 15 (tipo_funcion -> CARACTER empty .)


state 26

    (16) tipo_funcion -> VOID empty .

    FUNCION         reduce using rule 16 (tipo_funcion -> VOID empty .)


state 27

    (6) variablesD -> ID neu_addVariableAStack . COMA variablesD

    COMA            shift and go to state 31


state 28

    (7) variablesD -> ID DOSPUNTOS . tipo_var neu_addVariable PUNTOYCOMA variablesU
    (17) tipo_var -> . ENTERO empty
    (18) tipo_var -> . FLOTANTE empty
    (19) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    CARACTER        shift and go to state 35

    tipo_var                       shift and go to state 32

state 29

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal . L_PAR R_PAR bloque empty

    L_PAR           shift and go to state 36


state 30

    (10) funcionesU -> tipo_funcion FUNCION ID . neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (105) neu_addFuncion -> .

    L_PAR           reduce using rule 105 (neu_addFuncion -> .)

    neu_addFuncion                 shift and go to state 37

state 31

    (6) variablesD -> ID neu_addVariableAStack COMA . variablesD
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU

    ID              shift and go to state 20

    variablesD                     shift and go to state 38

state 32

    (7) variablesD -> ID DOSPUNTOS tipo_var . neu_addVariable PUNTOYCOMA variablesU
    (108) neu_addVariable -> .

    PUNTOYCOMA      reduce using rule 108 (neu_addVariable -> .)

    neu_addVariable                shift and go to state 39

state 33

    (17) tipo_var -> ENTERO . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 40

state 34

    (18) tipo_var -> FLOTANTE . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 41

state 35

    (19) tipo_var -> CARACTER . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 42

state 36

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR . R_PAR bloque empty

    R_PAR           shift and go to state 43


state 37

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion . L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD

    L_PAR           shift and go to state 44


state 38

    (6) variablesD -> ID neu_addVariableAStack COMA variablesD .

    ENTERO          reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    FLOTANTE        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    CARACTER        reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    VOID            reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    PRINCIPAL       reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)
    L_LLAVE         reduce using rule 6 (variablesD -> ID neu_addVariableAStack COMA variablesD .)


state 39

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable . PUNTOYCOMA variablesU

    PUNTOYCOMA      shift and go to state 45


state 40

    (17) tipo_var -> ENTERO empty .

    PUNTOYCOMA      reduce using rule 17 (tipo_var -> ENTERO empty .)
    COMA            reduce using rule 17 (tipo_var -> ENTERO empty .)
    R_PAR           reduce using rule 17 (tipo_var -> ENTERO empty .)


state 41

    (18) tipo_var -> FLOTANTE empty .

    PUNTOYCOMA      reduce using rule 18 (tipo_var -> FLOTANTE empty .)
    COMA            reduce using rule 18 (tipo_var -> FLOTANTE empty .)
    R_PAR           reduce using rule 18 (tipo_var -> FLOTANTE empty .)


state 42

    (19) tipo_var -> CARACTER empty .

    PUNTOYCOMA      reduce using rule 19 (tipo_var -> CARACTER empty .)
    COMA            reduce using rule 19 (tipo_var -> CARACTER empty .)
    R_PAR           reduce using rule 19 (tipo_var -> CARACTER empty .)


state 43

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR . bloque empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 46

state 44

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR . recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (20) recibir_parametros -> . ID DOSPUNTOS tipo_var recibir_parametrosD empty
    (21) recibir_parametros -> . empty
    (103) empty -> .

    ID              shift and go to state 48
    R_PAR           reduce using rule 103 (empty -> .)

    recibir_parametros             shift and go to state 49
    empty                          shift and go to state 50

state 45

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA . variablesU
    (4) variablesU -> . variablesD
    (5) variablesU -> . empty
    (6) variablesD -> . ID neu_addVariableAStack COMA variablesD
    (7) variablesD -> . ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU
    (103) empty -> .

    ID              shift and go to state 20
    ENTERO          reduce using rule 103 (empty -> .)
    FLOTANTE        reduce using rule 103 (empty -> .)
    CARACTER        reduce using rule 103 (empty -> .)
    VOID            reduce using rule 103 (empty -> .)
    PRINCIPAL       reduce using rule 103 (empty -> .)
    L_LLAVE         reduce using rule 103 (empty -> .)

    variablesU                     shift and go to state 51
    variablesD                     shift and go to state 18
    empty                          shift and go to state 19

state 46

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque . empty
    (103) empty -> .

    $end            reduce using rule 103 (empty -> .)

    empty                          shift and go to state 52

state 47

    (28) bloque -> L_LLAVE . bloqueU R_LLAVE empty
    (29) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (30) bloqueU -> . empty
    (33) estatuto -> . asignacion PUNTOYCOMA empty
    (34) estatuto -> . llamada PUNTOYCOMA empty
    (35) estatuto -> . retorno PUNTOYCOMA empty
    (36) estatuto -> . lectura PUNTOYCOMA empty
    (37) estatuto -> . escritura PUNTOYCOMA empty
    (38) estatuto -> . decision empty
    (39) estatuto -> . condicional empty
    (40) estatuto -> . no_condicional empty
    (41) estatuto -> . funciones_especiales PUNTOYCOMA empty
    (42) estatuto -> . empty
    (103) empty -> .
    (43) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty
    (45) retorno -> . REGRESA L_PAR ID R_PAR empty
    (46) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (47) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (50) decision -> . SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty
    (53) condicional -> . MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty
    (54) no_condicional -> . DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty
    (55) funciones_especiales -> . circulo empty
    (56) funciones_especiales -> . color empty
    (57) funciones_especiales -> . grosor empty
    (58) funciones_especiales -> . linea empty
    (59) funciones_especiales -> . puntoxy empty
    (60) funciones_especiales -> . arco empty
    (61) funciones_especiales -> . penup empty
    (62) funciones_especiales -> . pendown empty
    (63) funciones_especiales -> . empty
    (64) circulo -> . CIRCULO L_PAR hiper_exp R_PAR empty
    (65) color -> . COLOR L_PAR hiper_exp R_PAR empty
    (66) grosor -> . GROSOR L_PAR hiper_exp R_PAR empty
    (67) linea -> . LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty
    (68) puntoxy -> . PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty
    (69) arco -> . ARCO L_PAR hiper_exp R_PAR empty
    (70) penup -> . PENUP L_PAR hiper_exp R_PAR empty
    (71) pendown -> . PENDOWN L_PAR hiper_exp R_PAR empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
  ! shift/reduce conflict for CIRCULO resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for GROSOR resolved as shift
  ! shift/reduce conflict for LINEA resolved as shift
  ! shift/reduce conflict for PUNTOXY resolved as shift
  ! shift/reduce conflict for ARCO resolved as shift
  ! shift/reduce conflict for PENUP resolved as shift
  ! shift/reduce conflict for PENDOWN resolved as shift
    R_LLAVE         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    ID              shift and go to state 65
    REGRESA         shift and go to state 66
    LEER            shift and go to state 67
    ESCRIBIR        shift and go to state 68
    SI              shift and go to state 69
    MIENTRAS        shift and go to state 70
    DESDE           shift and go to state 71
    CIRCULO         shift and go to state 80
    COLOR           shift and go to state 81
    GROSOR          shift and go to state 82
    LINEA           shift and go to state 83
    PUNTOXY         shift and go to state 84
    ARCO            shift and go to state 85
    PENUP           shift and go to state 86
    PENDOWN         shift and go to state 87

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! REGRESA         [ reduce using rule 103 (empty -> .) ]
  ! LEER            [ reduce using rule 103 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 103 (empty -> .) ]
  ! SI              [ reduce using rule 103 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 103 (empty -> .) ]
  ! DESDE           [ reduce using rule 103 (empty -> .) ]
  ! CIRCULO         [ reduce using rule 103 (empty -> .) ]
  ! COLOR           [ reduce using rule 103 (empty -> .) ]
  ! GROSOR          [ reduce using rule 103 (empty -> .) ]
  ! LINEA           [ reduce using rule 103 (empty -> .) ]
  ! PUNTOXY         [ reduce using rule 103 (empty -> .) ]
  ! ARCO            [ reduce using rule 103 (empty -> .) ]
  ! PENUP           [ reduce using rule 103 (empty -> .) ]
  ! PENDOWN         [ reduce using rule 103 (empty -> .) ]

    bloqueU                        shift and go to state 53
    empty                          shift and go to state 54
    estatuto                       shift and go to state 55
    asignacion                     shift and go to state 56
    llamada                        shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    condicional                    shift and go to state 62
    no_condicional                 shift and go to state 63
    funciones_especiales           shift and go to state 64
    circulo                        shift and go to state 72
    color                          shift and go to state 73
    grosor                         shift and go to state 74
    linea                          shift and go to state 75
    puntoxy                        shift and go to state 76
    arco                           shift and go to state 77
    penup                          shift and go to state 78
    pendown                        shift and go to state 79

state 48

    (20) recibir_parametros -> ID . DOSPUNTOS tipo_var recibir_parametrosD empty

    DOSPUNTOS       shift and go to state 88


state 49

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros . R_PAR variables bloque neu_endFuncion funcionesD

    R_PAR           shift and go to state 89


state 50

    (21) recibir_parametros -> empty .

    R_PAR           reduce using rule 21 (recibir_parametros -> empty .)


state 51

    (7) variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .

    ENTERO          reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    FLOTANTE        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    CARACTER        reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    VOID            reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    PRINCIPAL       reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)
    L_LLAVE         reduce using rule 7 (variablesD -> ID DOSPUNTOS tipo_var neu_addVariable PUNTOYCOMA variablesU .)


state 52

    (1) program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty .

    $end            reduce using rule 1 (program -> PROGRAMA ID neu_programa PUNTOYCOMA variables funciones PRINCIPAL neu_principal L_PAR R_PAR bloque empty .)


state 53

    (28) bloque -> L_LLAVE bloqueU . R_LLAVE empty

    R_LLAVE         shift and go to state 90


state 54

    (30) bloqueU -> empty .
    (42) estatuto -> empty .
    (63) funciones_especiales -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 42 (estatuto -> empty .)
    R_LLAVE         reduce using rule 30 (bloqueU -> empty .)
    ID              reduce using rule 42 (estatuto -> empty .)
    REGRESA         reduce using rule 42 (estatuto -> empty .)
    LEER            reduce using rule 42 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 42 (estatuto -> empty .)
    SI              reduce using rule 42 (estatuto -> empty .)
    MIENTRAS        reduce using rule 42 (estatuto -> empty .)
    DESDE           reduce using rule 42 (estatuto -> empty .)
    CIRCULO         reduce using rule 42 (estatuto -> empty .)
    COLOR           reduce using rule 42 (estatuto -> empty .)
    GROSOR          reduce using rule 42 (estatuto -> empty .)
    LINEA           reduce using rule 42 (estatuto -> empty .)
    PUNTOXY         reduce using rule 42 (estatuto -> empty .)
    ARCO            reduce using rule 42 (estatuto -> empty .)
    PENUP           reduce using rule 42 (estatuto -> empty .)
    PENDOWN         reduce using rule 42 (estatuto -> empty .)
    PUNTOYCOMA      reduce using rule 42 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 42 (estatuto -> empty .) ]
  ! PUNTOYCOMA      [ reduce using rule 63 (funciones_especiales -> empty .) ]


state 55

    (29) bloqueU -> estatuto . bloqueD neu_vaciarPilas empty
    (31) bloqueD -> . bloqueU empty
    (32) bloqueD -> . empty
    (29) bloqueU -> . estatuto bloqueD neu_vaciarPilas empty
    (30) bloqueU -> . empty
    (103) empty -> .
    (33) estatuto -> . asignacion PUNTOYCOMA empty
    (34) estatuto -> . llamada PUNTOYCOMA empty
    (35) estatuto -> . retorno PUNTOYCOMA empty
    (36) estatuto -> . lectura PUNTOYCOMA empty
    (37) estatuto -> . escritura PUNTOYCOMA empty
    (38) estatuto -> . decision empty
    (39) estatuto -> . condicional empty
    (40) estatuto -> . no_condicional empty
    (41) estatuto -> . funciones_especiales PUNTOYCOMA empty
    (42) estatuto -> . empty
    (43) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty
    (45) retorno -> . REGRESA L_PAR ID R_PAR empty
    (46) lectura -> . LEER L_PAR ID neu_lectura R_PAR empty
    (47) escritura -> . ESCRIBIR L_PAR escrituraD R_PAR empty
    (50) decision -> . SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty
    (53) condicional -> . MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty
    (54) no_condicional -> . DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty
    (55) funciones_especiales -> . circulo empty
    (56) funciones_especiales -> . color empty
    (57) funciones_especiales -> . grosor empty
    (58) funciones_especiales -> . linea empty
    (59) funciones_especiales -> . puntoxy empty
    (60) funciones_especiales -> . arco empty
    (61) funciones_especiales -> . penup empty
    (62) funciones_especiales -> . pendown empty
    (63) funciones_especiales -> . empty
    (64) circulo -> . CIRCULO L_PAR hiper_exp R_PAR empty
    (65) color -> . COLOR L_PAR hiper_exp R_PAR empty
    (66) grosor -> . GROSOR L_PAR hiper_exp R_PAR empty
    (67) linea -> . LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty
    (68) puntoxy -> . PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty
    (69) arco -> . ARCO L_PAR hiper_exp R_PAR empty
    (70) penup -> . PENUP L_PAR hiper_exp R_PAR empty
    (71) pendown -> . PENDOWN L_PAR hiper_exp R_PAR empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for REGRESA resolved as shift
  ! shift/reduce conflict for LEER resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for MIENTRAS resolved as shift
  ! shift/reduce conflict for DESDE resolved as shift
  ! shift/reduce conflict for CIRCULO resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for GROSOR resolved as shift
  ! shift/reduce conflict for LINEA resolved as shift
  ! shift/reduce conflict for PUNTOXY resolved as shift
  ! shift/reduce conflict for ARCO resolved as shift
  ! shift/reduce conflict for PENUP resolved as shift
  ! shift/reduce conflict for PENDOWN resolved as shift
    R_LLAVE         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    ID              shift and go to state 65
    REGRESA         shift and go to state 66
    LEER            shift and go to state 67
    ESCRIBIR        shift and go to state 68
    SI              shift and go to state 69
    MIENTRAS        shift and go to state 70
    DESDE           shift and go to state 71
    CIRCULO         shift and go to state 80
    COLOR           shift and go to state 81
    GROSOR          shift and go to state 82
    LINEA           shift and go to state 83
    PUNTOXY         shift and go to state 84
    ARCO            shift and go to state 85
    PENUP           shift and go to state 86
    PENDOWN         shift and go to state 87

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! REGRESA         [ reduce using rule 103 (empty -> .) ]
  ! LEER            [ reduce using rule 103 (empty -> .) ]
  ! ESCRIBIR        [ reduce using rule 103 (empty -> .) ]
  ! SI              [ reduce using rule 103 (empty -> .) ]
  ! MIENTRAS        [ reduce using rule 103 (empty -> .) ]
  ! DESDE           [ reduce using rule 103 (empty -> .) ]
  ! CIRCULO         [ reduce using rule 103 (empty -> .) ]
  ! COLOR           [ reduce using rule 103 (empty -> .) ]
  ! GROSOR          [ reduce using rule 103 (empty -> .) ]
  ! LINEA           [ reduce using rule 103 (empty -> .) ]
  ! PUNTOXY         [ reduce using rule 103 (empty -> .) ]
  ! ARCO            [ reduce using rule 103 (empty -> .) ]
  ! PENUP           [ reduce using rule 103 (empty -> .) ]
  ! PENDOWN         [ reduce using rule 103 (empty -> .) ]

    estatuto                       shift and go to state 55
    bloqueD                        shift and go to state 91
    empty                          shift and go to state 92
    bloqueU                        shift and go to state 93
    asignacion                     shift and go to state 56
    llamada                        shift and go to state 57
    retorno                        shift and go to state 58
    lectura                        shift and go to state 59
    escritura                      shift and go to state 60
    decision                       shift and go to state 61
    condicional                    shift and go to state 62
    no_condicional                 shift and go to state 63
    funciones_especiales           shift and go to state 64
    circulo                        shift and go to state 72
    color                          shift and go to state 73
    grosor                         shift and go to state 74
    linea                          shift and go to state 75
    puntoxy                        shift and go to state 76
    arco                           shift and go to state 77
    penup                          shift and go to state 78
    pendown                        shift and go to state 79

state 56

    (33) estatuto -> asignacion . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 94


state 57

    (34) estatuto -> llamada . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 95


state 58

    (35) estatuto -> retorno . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 96


state 59

    (36) estatuto -> lectura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 97


state 60

    (37) estatuto -> escritura . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 98


state 61

    (38) estatuto -> decision . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 99

state 62

    (39) estatuto -> condicional . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 100

state 63

    (40) estatuto -> no_condicional . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 101

state 64

    (41) estatuto -> funciones_especiales . PUNTOYCOMA empty

    PUNTOYCOMA      shift and go to state 102


state 65

    (43) asignacion -> ID . neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (44) llamada -> ID . neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty
    (110) neu_addID -> .
    (115) neu_llamada_era -> .

    IGUAL           reduce using rule 110 (neu_addID -> .)
    L_PAR           reduce using rule 115 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 103
    neu_llamada_era                shift and go to state 104

state 66

    (45) retorno -> REGRESA . L_PAR ID R_PAR empty

    L_PAR           shift and go to state 105


state 67

    (46) lectura -> LEER . L_PAR ID neu_lectura R_PAR empty

    L_PAR           shift and go to state 106


state 68

    (47) escritura -> ESCRIBIR . L_PAR escrituraD R_PAR empty

    L_PAR           shift and go to state 107


state 69

    (50) decision -> SI . L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty

    L_PAR           shift and go to state 108


state 70

    (53) condicional -> MIENTRAS . L_PAR hiper_exp R_PAR HACER bloque empty

    L_PAR           shift and go to state 109


state 71

    (54) no_condicional -> DESDE . L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty

    L_PAR           shift and go to state 110


state 72

    (55) funciones_especiales -> circulo . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 111

state 73

    (56) funciones_especiales -> color . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 112

state 74

    (57) funciones_especiales -> grosor . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 113

state 75

    (58) funciones_especiales -> linea . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 114

state 76

    (59) funciones_especiales -> puntoxy . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 115

state 77

    (60) funciones_especiales -> arco . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 116

state 78

    (61) funciones_especiales -> penup . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 117

state 79

    (62) funciones_especiales -> pendown . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 118

state 80

    (64) circulo -> CIRCULO . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 119


state 81

    (65) color -> COLOR . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 120


state 82

    (66) grosor -> GROSOR . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 121


state 83

    (67) linea -> LINEA . L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty

    L_PAR           shift and go to state 122


state 84

    (68) puntoxy -> PUNTOXY . L_PAR hiper_exp COMA hiper_exp R_PAR empty

    L_PAR           shift and go to state 123


state 85

    (69) arco -> ARCO . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 124


state 86

    (70) penup -> PENUP . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 125


state 87

    (71) pendown -> PENDOWN . L_PAR hiper_exp R_PAR empty

    L_PAR           shift and go to state 126


state 88

    (20) recibir_parametros -> ID DOSPUNTOS . tipo_var recibir_parametrosD empty
    (17) tipo_var -> . ENTERO empty
    (18) tipo_var -> . FLOTANTE empty
    (19) tipo_var -> . CARACTER empty

    ENTERO          shift and go to state 33
    FLOTANTE        shift and go to state 34
    CARACTER        shift and go to state 35

    tipo_var                       shift and go to state 127

state 89

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR . variables bloque neu_endFuncion funcionesD
    (2) variables -> . VARIABLES variablesU
    (3) variables -> . empty
    (103) empty -> .

    VARIABLES       shift and go to state 8
    L_LLAVE         reduce using rule 103 (empty -> .)

    variables                      shift and go to state 128
    empty                          shift and go to state 7

state 90

    (28) bloque -> L_LLAVE bloqueU R_LLAVE . empty
    (103) empty -> .

    $end            reduce using rule 103 (empty -> .)
    ENTERO          reduce using rule 103 (empty -> .)
    FLOTANTE        reduce using rule 103 (empty -> .)
    CARACTER        reduce using rule 103 (empty -> .)
    VOID            reduce using rule 103 (empty -> .)
    PRINCIPAL       reduce using rule 103 (empty -> .)
    SINO            reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 129

state 91

    (29) bloqueU -> estatuto bloqueD . neu_vaciarPilas empty
    (128) neu_vaciarPilas -> .

    R_LLAVE         reduce using rule 128 (neu_vaciarPilas -> .)

    neu_vaciarPilas                shift and go to state 130

state 92

    (32) bloqueD -> empty .
    (30) bloqueU -> empty .
    (42) estatuto -> empty .
    (63) funciones_especiales -> empty .

  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
  ! reduce/reduce conflict for R_LLAVE resolved using rule 30 (bloqueU -> empty .)
  ! reduce/reduce conflict for PUNTOYCOMA resolved using rule 42 (estatuto -> empty .)
    R_LLAVE         reduce using rule 30 (bloqueU -> empty .)
    ID              reduce using rule 42 (estatuto -> empty .)
    REGRESA         reduce using rule 42 (estatuto -> empty .)
    LEER            reduce using rule 42 (estatuto -> empty .)
    ESCRIBIR        reduce using rule 42 (estatuto -> empty .)
    SI              reduce using rule 42 (estatuto -> empty .)
    MIENTRAS        reduce using rule 42 (estatuto -> empty .)
    DESDE           reduce using rule 42 (estatuto -> empty .)
    CIRCULO         reduce using rule 42 (estatuto -> empty .)
    COLOR           reduce using rule 42 (estatuto -> empty .)
    GROSOR          reduce using rule 42 (estatuto -> empty .)
    LINEA           reduce using rule 42 (estatuto -> empty .)
    PUNTOXY         reduce using rule 42 (estatuto -> empty .)
    ARCO            reduce using rule 42 (estatuto -> empty .)
    PENUP           reduce using rule 42 (estatuto -> empty .)
    PENDOWN         reduce using rule 42 (estatuto -> empty .)
    PUNTOYCOMA      reduce using rule 42 (estatuto -> empty .)

  ! R_LLAVE         [ reduce using rule 32 (bloqueD -> empty .) ]
  ! R_LLAVE         [ reduce using rule 42 (estatuto -> empty .) ]
  ! PUNTOYCOMA      [ reduce using rule 63 (funciones_especiales -> empty .) ]


state 93

    (31) bloqueD -> bloqueU . empty
    (103) empty -> .

    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 131

state 94

    (33) estatuto -> asignacion PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 132

state 95

    (34) estatuto -> llamada PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 133

state 96

    (35) estatuto -> retorno PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 134

state 97

    (36) estatuto -> lectura PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 135

state 98

    (37) estatuto -> escritura PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 136

state 99

    (38) estatuto -> decision empty .

    ID              reduce using rule 38 (estatuto -> decision empty .)
    REGRESA         reduce using rule 38 (estatuto -> decision empty .)
    LEER            reduce using rule 38 (estatuto -> decision empty .)
    ESCRIBIR        reduce using rule 38 (estatuto -> decision empty .)
    SI              reduce using rule 38 (estatuto -> decision empty .)
    MIENTRAS        reduce using rule 38 (estatuto -> decision empty .)
    DESDE           reduce using rule 38 (estatuto -> decision empty .)
    CIRCULO         reduce using rule 38 (estatuto -> decision empty .)
    COLOR           reduce using rule 38 (estatuto -> decision empty .)
    GROSOR          reduce using rule 38 (estatuto -> decision empty .)
    LINEA           reduce using rule 38 (estatuto -> decision empty .)
    PUNTOXY         reduce using rule 38 (estatuto -> decision empty .)
    ARCO            reduce using rule 38 (estatuto -> decision empty .)
    PENUP           reduce using rule 38 (estatuto -> decision empty .)
    PENDOWN         reduce using rule 38 (estatuto -> decision empty .)
    PUNTOYCOMA      reduce using rule 38 (estatuto -> decision empty .)
    R_LLAVE         reduce using rule 38 (estatuto -> decision empty .)


state 100

    (39) estatuto -> condicional empty .

    ID              reduce using rule 39 (estatuto -> condicional empty .)
    REGRESA         reduce using rule 39 (estatuto -> condicional empty .)
    LEER            reduce using rule 39 (estatuto -> condicional empty .)
    ESCRIBIR        reduce using rule 39 (estatuto -> condicional empty .)
    SI              reduce using rule 39 (estatuto -> condicional empty .)
    MIENTRAS        reduce using rule 39 (estatuto -> condicional empty .)
    DESDE           reduce using rule 39 (estatuto -> condicional empty .)
    CIRCULO         reduce using rule 39 (estatuto -> condicional empty .)
    COLOR           reduce using rule 39 (estatuto -> condicional empty .)
    GROSOR          reduce using rule 39 (estatuto -> condicional empty .)
    LINEA           reduce using rule 39 (estatuto -> condicional empty .)
    PUNTOXY         reduce using rule 39 (estatuto -> condicional empty .)
    ARCO            reduce using rule 39 (estatuto -> condicional empty .)
    PENUP           reduce using rule 39 (estatuto -> condicional empty .)
    PENDOWN         reduce using rule 39 (estatuto -> condicional empty .)
    PUNTOYCOMA      reduce using rule 39 (estatuto -> condicional empty .)
    R_LLAVE         reduce using rule 39 (estatuto -> condicional empty .)


state 101

    (40) estatuto -> no_condicional empty .

    ID              reduce using rule 40 (estatuto -> no_condicional empty .)
    REGRESA         reduce using rule 40 (estatuto -> no_condicional empty .)
    LEER            reduce using rule 40 (estatuto -> no_condicional empty .)
    ESCRIBIR        reduce using rule 40 (estatuto -> no_condicional empty .)
    SI              reduce using rule 40 (estatuto -> no_condicional empty .)
    MIENTRAS        reduce using rule 40 (estatuto -> no_condicional empty .)
    DESDE           reduce using rule 40 (estatuto -> no_condicional empty .)
    CIRCULO         reduce using rule 40 (estatuto -> no_condicional empty .)
    COLOR           reduce using rule 40 (estatuto -> no_condicional empty .)
    GROSOR          reduce using rule 40 (estatuto -> no_condicional empty .)
    LINEA           reduce using rule 40 (estatuto -> no_condicional empty .)
    PUNTOXY         reduce using rule 40 (estatuto -> no_condicional empty .)
    ARCO            reduce using rule 40 (estatuto -> no_condicional empty .)
    PENUP           reduce using rule 40 (estatuto -> no_condicional empty .)
    PENDOWN         reduce using rule 40 (estatuto -> no_condicional empty .)
    PUNTOYCOMA      reduce using rule 40 (estatuto -> no_condicional empty .)
    R_LLAVE         reduce using rule 40 (estatuto -> no_condicional empty .)


state 102

    (41) estatuto -> funciones_especiales PUNTOYCOMA . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 137

state 103

    (43) asignacion -> ID neu_addID . IGUAL neu_addOperador hiper_exp neu_asignacion empty

    IGUAL           shift and go to state 138


state 104

    (44) llamada -> ID neu_llamada_era . L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 139


state 105

    (45) retorno -> REGRESA L_PAR . ID R_PAR empty

    ID              shift and go to state 140


state 106

    (46) lectura -> LEER L_PAR . ID neu_lectura R_PAR empty

    ID              shift and go to state 141


state 107

    (47) escritura -> ESCRIBIR L_PAR . escrituraD R_PAR empty
    (48) escrituraD -> . hiper_exp neu_escritura empty
    (49) escrituraD -> . LETRERO empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    LETRERO         shift and go to state 145
    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    escrituraD                     shift and go to state 143
    hiper_exp                      shift and go to state 144
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 108

    (50) decision -> SI L_PAR . hiper_exp R_PAR ENTONCES bloque decisionU empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 156
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 109

    (53) condicional -> MIENTRAS L_PAR . hiper_exp R_PAR HACER bloque empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 157
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 110

    (54) no_condicional -> DESDE L_PAR . asignacion R_PAR HASTA hiper_exp HACER bloque empty
    (43) asignacion -> . ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty

    ID              shift and go to state 159

    asignacion                     shift and go to state 158

state 111

    (55) funciones_especiales -> circulo empty .

    PUNTOYCOMA      reduce using rule 55 (funciones_especiales -> circulo empty .)


state 112

    (56) funciones_especiales -> color empty .

    PUNTOYCOMA      reduce using rule 56 (funciones_especiales -> color empty .)


state 113

    (57) funciones_especiales -> grosor empty .

    PUNTOYCOMA      reduce using rule 57 (funciones_especiales -> grosor empty .)


state 114

    (58) funciones_especiales -> linea empty .

    PUNTOYCOMA      reduce using rule 58 (funciones_especiales -> linea empty .)


state 115

    (59) funciones_especiales -> puntoxy empty .

    PUNTOYCOMA      reduce using rule 59 (funciones_especiales -> puntoxy empty .)


state 116

    (60) funciones_especiales -> arco empty .

    PUNTOYCOMA      reduce using rule 60 (funciones_especiales -> arco empty .)


state 117

    (61) funciones_especiales -> penup empty .

    PUNTOYCOMA      reduce using rule 61 (funciones_especiales -> penup empty .)


state 118

    (62) funciones_especiales -> pendown empty .

    PUNTOYCOMA      reduce using rule 62 (funciones_especiales -> pendown empty .)


state 119

    (64) circulo -> CIRCULO L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 160
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 120

    (65) color -> COLOR L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 161
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 121

    (66) grosor -> GROSOR L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 162
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 122

    (67) linea -> LINEA L_PAR . hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 163
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 123

    (68) puntoxy -> PUNTOXY L_PAR . hiper_exp COMA hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 164
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 124

    (69) arco -> ARCO L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 165
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 125

    (70) penup -> PENUP L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 166
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 126

    (71) pendown -> PENDOWN L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 167
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 127

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var . recibir_parametrosD empty
    (22) recibir_parametrosD -> . COMA recibir_parametros empty
    (23) recibir_parametrosD -> . empty
    (103) empty -> .

    COMA            shift and go to state 170
    R_PAR           reduce using rule 103 (empty -> .)

    recibir_parametrosD            shift and go to state 168
    empty                          shift and go to state 169

state 128

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables . bloque neu_endFuncion funcionesD
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 171

state 129

    (28) bloque -> L_LLAVE bloqueU R_LLAVE empty .

    $end            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ENTERO          reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    FLOTANTE        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    CARACTER        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    VOID            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PRINCIPAL       reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SINO            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ID              reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    REGRESA         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    LEER            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ESCRIBIR        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    SI              reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    MIENTRAS        reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    DESDE           reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    CIRCULO         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    COLOR           reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    GROSOR          reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    LINEA           reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PUNTOXY         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    ARCO            reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PENUP           reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PENDOWN         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    PUNTOYCOMA      reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)
    R_LLAVE         reduce using rule 28 (bloque -> L_LLAVE bloqueU R_LLAVE empty .)


state 130

    (29) bloqueU -> estatuto bloqueD neu_vaciarPilas . empty
    (103) empty -> .

    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 172

state 131

    (31) bloqueD -> bloqueU empty .

    R_LLAVE         reduce using rule 31 (bloqueD -> bloqueU empty .)


state 132

    (33) estatuto -> asignacion PUNTOYCOMA empty .

    ID              reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    REGRESA         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    LEER            reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    SI              reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    DESDE           reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    COLOR           reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    GROSOR          reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    LINEA           reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    ARCO            reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    PENUP           reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 33 (estatuto -> asignacion PUNTOYCOMA empty .)


state 133

    (34) estatuto -> llamada PUNTOYCOMA empty .

    ID              reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    REGRESA         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    LEER            reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    SI              reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    DESDE           reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    COLOR           reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    GROSOR          reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    LINEA           reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    ARCO            reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    PENUP           reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 34 (estatuto -> llamada PUNTOYCOMA empty .)


state 134

    (35) estatuto -> retorno PUNTOYCOMA empty .

    ID              reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    REGRESA         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    LEER            reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    SI              reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    DESDE           reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    COLOR           reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    GROSOR          reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    LINEA           reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    ARCO            reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    PENUP           reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 35 (estatuto -> retorno PUNTOYCOMA empty .)


state 135

    (36) estatuto -> lectura PUNTOYCOMA empty .

    ID              reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    LEER            reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    SI              reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    DESDE           reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    COLOR           reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    GROSOR          reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    LINEA           reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    ARCO            reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    PENUP           reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 36 (estatuto -> lectura PUNTOYCOMA empty .)


state 136

    (37) estatuto -> escritura PUNTOYCOMA empty .

    ID              reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    REGRESA         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    LEER            reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    SI              reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    DESDE           reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    COLOR           reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    GROSOR          reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    LINEA           reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    ARCO            reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    PENUP           reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 37 (estatuto -> escritura PUNTOYCOMA empty .)


state 137

    (41) estatuto -> funciones_especiales PUNTOYCOMA empty .

    ID              reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    REGRESA         reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    LEER            reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    ESCRIBIR        reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    SI              reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    MIENTRAS        reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    DESDE           reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    CIRCULO         reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    COLOR           reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    GROSOR          reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    LINEA           reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    PUNTOXY         reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    ARCO            reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    PENUP           reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    PENDOWN         reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    PUNTOYCOMA      reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)
    R_LLAVE         reduce using rule 41 (estatuto -> funciones_especiales PUNTOYCOMA empty .)


state 138

    (43) asignacion -> ID neu_addID IGUAL . neu_addOperador hiper_exp neu_asignacion empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 173

state 139

    (44) llamada -> ID neu_llamada_era L_PAR . mandar_parametros R_PAR neu_llamada_gosub empty
    (24) mandar_parametros -> . ID mandar_parametrosD empty
    (25) mandar_parametros -> . empty
    (103) empty -> .

    ID              shift and go to state 174
    R_PAR           reduce using rule 103 (empty -> .)

    mandar_parametros              shift and go to state 175
    empty                          shift and go to state 176

state 140

    (45) retorno -> REGRESA L_PAR ID . R_PAR empty

    R_PAR           shift and go to state 177


state 141

    (46) lectura -> LEER L_PAR ID . neu_lectura R_PAR empty
    (126) neu_lectura -> .

    R_PAR           reduce using rule 126 (neu_lectura -> .)

    neu_lectura                    shift and go to state 178

state 142

    (98) factor -> L_PAR . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 179
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 143

    (47) escritura -> ESCRIBIR L_PAR escrituraD . R_PAR empty

    R_PAR           shift and go to state 180


state 144

    (48) escrituraD -> hiper_exp . neu_escritura empty
    (127) neu_escritura -> .

    R_PAR           reduce using rule 127 (neu_escritura -> .)

    neu_escritura                  shift and go to state 181

state 145

    (49) escrituraD -> LETRERO . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 182

state 146

    (84) hiper_exp -> super_exp . neu_hacerHiperExp hiper_expU
    (124) neu_hacerHiperExp -> .

    OR              reduce using rule 124 (neu_hacerHiperExp -> .)
    AND             reduce using rule 124 (neu_hacerHiperExp -> .)
    R_PAR           reduce using rule 124 (neu_hacerHiperExp -> .)
    COMA            reduce using rule 124 (neu_hacerHiperExp -> .)
    PUNTOYCOMA      reduce using rule 124 (neu_hacerHiperExp -> .)
    HACER           reduce using rule 124 (neu_hacerHiperExp -> .)

    neu_hacerHiperExp              shift and go to state 183

state 147

    (87) super_exp -> exp . neu_hacerSuperExp super_expU
    (123) neu_hacerSuperExp -> .

    MENORQUE        reduce using rule 123 (neu_hacerSuperExp -> .)
    MAYORQUE        reduce using rule 123 (neu_hacerSuperExp -> .)
    MENORIGUALQUE   reduce using rule 123 (neu_hacerSuperExp -> .)
    MAYORIGUALQUE   reduce using rule 123 (neu_hacerSuperExp -> .)
    IGUALQUE        reduce using rule 123 (neu_hacerSuperExp -> .)
    DIFQUE          reduce using rule 123 (neu_hacerSuperExp -> .)
    OR              reduce using rule 123 (neu_hacerSuperExp -> .)
    AND             reduce using rule 123 (neu_hacerSuperExp -> .)
    R_PAR           reduce using rule 123 (neu_hacerSuperExp -> .)
    COMA            reduce using rule 123 (neu_hacerSuperExp -> .)
    PUNTOYCOMA      reduce using rule 123 (neu_hacerSuperExp -> .)
    HACER           reduce using rule 123 (neu_hacerSuperExp -> .)

    neu_hacerSuperExp              shift and go to state 184

state 148

    (90) exp -> termino . neu_hacerExp expU
    (122) neu_hacerExp -> .

    MAS             reduce using rule 122 (neu_hacerExp -> .)
    MENOS           reduce using rule 122 (neu_hacerExp -> .)
    MENORQUE        reduce using rule 122 (neu_hacerExp -> .)
    MAYORQUE        reduce using rule 122 (neu_hacerExp -> .)
    MENORIGUALQUE   reduce using rule 122 (neu_hacerExp -> .)
    MAYORIGUALQUE   reduce using rule 122 (neu_hacerExp -> .)
    IGUALQUE        reduce using rule 122 (neu_hacerExp -> .)
    DIFQUE          reduce using rule 122 (neu_hacerExp -> .)
    OR              reduce using rule 122 (neu_hacerExp -> .)
    AND             reduce using rule 122 (neu_hacerExp -> .)
    R_PAR           reduce using rule 122 (neu_hacerExp -> .)
    COMA            reduce using rule 122 (neu_hacerExp -> .)
    PUNTOYCOMA      reduce using rule 122 (neu_hacerExp -> .)
    HACER           reduce using rule 122 (neu_hacerExp -> .)

    neu_hacerExp                   shift and go to state 185

state 149

    (93) termino -> factor . neu_hacerTermino terminoU
    (121) neu_hacerTermino -> .

    MULT            reduce using rule 121 (neu_hacerTermino -> .)
    DIV             reduce using rule 121 (neu_hacerTermino -> .)
    MAS             reduce using rule 121 (neu_hacerTermino -> .)
    MENOS           reduce using rule 121 (neu_hacerTermino -> .)
    MENORQUE        reduce using rule 121 (neu_hacerTermino -> .)
    MAYORQUE        reduce using rule 121 (neu_hacerTermino -> .)
    MENORIGUALQUE   reduce using rule 121 (neu_hacerTermino -> .)
    MAYORIGUALQUE   reduce using rule 121 (neu_hacerTermino -> .)
    IGUALQUE        reduce using rule 121 (neu_hacerTermino -> .)
    DIFQUE          reduce using rule 121 (neu_hacerTermino -> .)
    OR              reduce using rule 121 (neu_hacerTermino -> .)
    AND             reduce using rule 121 (neu_hacerTermino -> .)
    R_PAR           reduce using rule 121 (neu_hacerTermino -> .)
    COMA            reduce using rule 121 (neu_hacerTermino -> .)
    PUNTOYCOMA      reduce using rule 121 (neu_hacerTermino -> .)
    HACER           reduce using rule 121 (neu_hacerTermino -> .)

    neu_hacerTermino               shift and go to state 186

state 150

    (96) factor -> varcte . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 187

state 151

    (97) factor -> llamada . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 188

state 152

    (99) varcte -> ID . neu_addID empty
    (44) llamada -> ID . neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty
    (110) neu_addID -> .
    (115) neu_llamada_era -> .

    MULT            reduce using rule 110 (neu_addID -> .)
    DIV             reduce using rule 110 (neu_addID -> .)
    MAS             reduce using rule 110 (neu_addID -> .)
    MENOS           reduce using rule 110 (neu_addID -> .)
    MENORQUE        reduce using rule 110 (neu_addID -> .)
    MAYORQUE        reduce using rule 110 (neu_addID -> .)
    MENORIGUALQUE   reduce using rule 110 (neu_addID -> .)
    MAYORIGUALQUE   reduce using rule 110 (neu_addID -> .)
    IGUALQUE        reduce using rule 110 (neu_addID -> .)
    DIFQUE          reduce using rule 110 (neu_addID -> .)
    OR              reduce using rule 110 (neu_addID -> .)
    AND             reduce using rule 110 (neu_addID -> .)
    R_PAR           reduce using rule 110 (neu_addID -> .)
    COMA            reduce using rule 110 (neu_addID -> .)
    PUNTOYCOMA      reduce using rule 110 (neu_addID -> .)
    HACER           reduce using rule 110 (neu_addID -> .)
    L_PAR           reduce using rule 115 (neu_llamada_era -> .)

    neu_addID                      shift and go to state 189
    neu_llamada_era                shift and go to state 104

state 153

    (100) varcte -> ENTEROVAL . neu_addConstanteEntero empty
    (111) neu_addConstanteEntero -> .

    MULT            reduce using rule 111 (neu_addConstanteEntero -> .)
    DIV             reduce using rule 111 (neu_addConstanteEntero -> .)
    MAS             reduce using rule 111 (neu_addConstanteEntero -> .)
    MENOS           reduce using rule 111 (neu_addConstanteEntero -> .)
    MENORQUE        reduce using rule 111 (neu_addConstanteEntero -> .)
    MAYORQUE        reduce using rule 111 (neu_addConstanteEntero -> .)
    MENORIGUALQUE   reduce using rule 111 (neu_addConstanteEntero -> .)
    MAYORIGUALQUE   reduce using rule 111 (neu_addConstanteEntero -> .)
    IGUALQUE        reduce using rule 111 (neu_addConstanteEntero -> .)
    DIFQUE          reduce using rule 111 (neu_addConstanteEntero -> .)
    OR              reduce using rule 111 (neu_addConstanteEntero -> .)
    AND             reduce using rule 111 (neu_addConstanteEntero -> .)
    R_PAR           reduce using rule 111 (neu_addConstanteEntero -> .)
    COMA            reduce using rule 111 (neu_addConstanteEntero -> .)
    PUNTOYCOMA      reduce using rule 111 (neu_addConstanteEntero -> .)
    HACER           reduce using rule 111 (neu_addConstanteEntero -> .)

    neu_addConstanteEntero         shift and go to state 190

state 154

    (101) varcte -> FLOTANTEVAL . neu_addConstanteFlotante empty
    (112) neu_addConstanteFlotante -> .

    MULT            reduce using rule 112 (neu_addConstanteFlotante -> .)
    DIV             reduce using rule 112 (neu_addConstanteFlotante -> .)
    MAS             reduce using rule 112 (neu_addConstanteFlotante -> .)
    MENOS           reduce using rule 112 (neu_addConstanteFlotante -> .)
    MENORQUE        reduce using rule 112 (neu_addConstanteFlotante -> .)
    MAYORQUE        reduce using rule 112 (neu_addConstanteFlotante -> .)
    MENORIGUALQUE   reduce using rule 112 (neu_addConstanteFlotante -> .)
    MAYORIGUALQUE   reduce using rule 112 (neu_addConstanteFlotante -> .)
    IGUALQUE        reduce using rule 112 (neu_addConstanteFlotante -> .)
    DIFQUE          reduce using rule 112 (neu_addConstanteFlotante -> .)
    OR              reduce using rule 112 (neu_addConstanteFlotante -> .)
    AND             reduce using rule 112 (neu_addConstanteFlotante -> .)
    R_PAR           reduce using rule 112 (neu_addConstanteFlotante -> .)
    COMA            reduce using rule 112 (neu_addConstanteFlotante -> .)
    PUNTOYCOMA      reduce using rule 112 (neu_addConstanteFlotante -> .)
    HACER           reduce using rule 112 (neu_addConstanteFlotante -> .)

    neu_addConstanteFlotante       shift and go to state 191

state 155

    (102) varcte -> CARACTERVAL . neu_addConstanteCaracter empty
    (113) neu_addConstanteCaracter -> .

    MULT            reduce using rule 113 (neu_addConstanteCaracter -> .)
    DIV             reduce using rule 113 (neu_addConstanteCaracter -> .)
    MAS             reduce using rule 113 (neu_addConstanteCaracter -> .)
    MENOS           reduce using rule 113 (neu_addConstanteCaracter -> .)
    MENORQUE        reduce using rule 113 (neu_addConstanteCaracter -> .)
    MAYORQUE        reduce using rule 113 (neu_addConstanteCaracter -> .)
    MENORIGUALQUE   reduce using rule 113 (neu_addConstanteCaracter -> .)
    MAYORIGUALQUE   reduce using rule 113 (neu_addConstanteCaracter -> .)
    IGUALQUE        reduce using rule 113 (neu_addConstanteCaracter -> .)
    DIFQUE          reduce using rule 113 (neu_addConstanteCaracter -> .)
    OR              reduce using rule 113 (neu_addConstanteCaracter -> .)
    AND             reduce using rule 113 (neu_addConstanteCaracter -> .)
    R_PAR           reduce using rule 113 (neu_addConstanteCaracter -> .)
    COMA            reduce using rule 113 (neu_addConstanteCaracter -> .)
    PUNTOYCOMA      reduce using rule 113 (neu_addConstanteCaracter -> .)
    HACER           reduce using rule 113 (neu_addConstanteCaracter -> .)

    neu_addConstanteCaracter       shift and go to state 192

state 156

    (50) decision -> SI L_PAR hiper_exp . R_PAR ENTONCES bloque decisionU empty

    R_PAR           shift and go to state 193


state 157

    (53) condicional -> MIENTRAS L_PAR hiper_exp . R_PAR HACER bloque empty

    R_PAR           shift and go to state 194


state 158

    (54) no_condicional -> DESDE L_PAR asignacion . R_PAR HASTA hiper_exp HACER bloque empty

    R_PAR           shift and go to state 195


state 159

    (43) asignacion -> ID . neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty
    (110) neu_addID -> .

    IGUAL           reduce using rule 110 (neu_addID -> .)

    neu_addID                      shift and go to state 103

state 160

    (64) circulo -> CIRCULO L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 196


state 161

    (65) color -> COLOR L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 197


state 162

    (66) grosor -> GROSOR L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 198


state 163

    (67) linea -> LINEA L_PAR hiper_exp . COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty

    COMA            shift and go to state 199


state 164

    (68) puntoxy -> PUNTOXY L_PAR hiper_exp . COMA hiper_exp R_PAR empty

    COMA            shift and go to state 200


state 165

    (69) arco -> ARCO L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 201


state 166

    (70) penup -> PENUP L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 202


state 167

    (71) pendown -> PENDOWN L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 203


state 168

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 204

state 169

    (23) recibir_parametrosD -> empty .

    R_PAR           reduce using rule 23 (recibir_parametrosD -> empty .)


state 170

    (22) recibir_parametrosD -> COMA . recibir_parametros empty
    (20) recibir_parametros -> . ID DOSPUNTOS tipo_var recibir_parametrosD empty
    (21) recibir_parametros -> . empty
    (103) empty -> .

    ID              shift and go to state 48
    R_PAR           reduce using rule 103 (empty -> .)

    recibir_parametros             shift and go to state 205
    empty                          shift and go to state 50

state 171

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque . neu_endFuncion funcionesD
    (106) neu_endFuncion -> .

    ENTERO          reduce using rule 106 (neu_endFuncion -> .)
    FLOTANTE        reduce using rule 106 (neu_endFuncion -> .)
    CARACTER        reduce using rule 106 (neu_endFuncion -> .)
    VOID            reduce using rule 106 (neu_endFuncion -> .)
    PRINCIPAL       reduce using rule 106 (neu_endFuncion -> .)

    neu_endFuncion                 shift and go to state 206

state 172

    (29) bloqueU -> estatuto bloqueD neu_vaciarPilas empty .

    R_LLAVE         reduce using rule 29 (bloqueU -> estatuto bloqueD neu_vaciarPilas empty .)


state 173

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador . hiper_exp neu_asignacion empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 207
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 174

    (24) mandar_parametros -> ID . mandar_parametrosD empty
    (26) mandar_parametrosD -> . COMA mandar_parametros empty
    (27) mandar_parametrosD -> . empty
    (103) empty -> .

    COMA            shift and go to state 210
    R_PAR           reduce using rule 103 (empty -> .)

    mandar_parametrosD             shift and go to state 208
    empty                          shift and go to state 209

state 175

    (44) llamada -> ID neu_llamada_era L_PAR mandar_parametros . R_PAR neu_llamada_gosub empty

    R_PAR           shift and go to state 211


state 176

    (25) mandar_parametros -> empty .

    R_PAR           reduce using rule 25 (mandar_parametros -> empty .)


state 177

    (45) retorno -> REGRESA L_PAR ID R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 212

state 178

    (46) lectura -> LEER L_PAR ID neu_lectura . R_PAR empty

    R_PAR           shift and go to state 213


state 179

    (98) factor -> L_PAR hiper_exp . R_PAR empty

    R_PAR           shift and go to state 214


state 180

    (47) escritura -> ESCRIBIR L_PAR escrituraD R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 215

state 181

    (48) escrituraD -> hiper_exp neu_escritura . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 216

state 182

    (49) escrituraD -> LETRERO empty .

    R_PAR           reduce using rule 49 (escrituraD -> LETRERO empty .)


state 183

    (84) hiper_exp -> super_exp neu_hacerHiperExp . hiper_expU
    (85) hiper_expU -> . operadorL hiper_exp empty
    (86) hiper_expU -> . empty
    (76) operadorL -> . OR neu_addOperador empty
    (77) operadorL -> . AND neu_addOperador empty
    (103) empty -> .

    OR              shift and go to state 220
    AND             shift and go to state 221
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    hiper_expU                     shift and go to state 217
    operadorL                      shift and go to state 218
    empty                          shift and go to state 219

state 184

    (87) super_exp -> exp neu_hacerSuperExp . super_expU
    (88) super_expU -> . operadorR super_exp empty
    (89) super_expU -> . empty
    (78) operadorR -> . MENORQUE neu_addOperador empty
    (79) operadorR -> . MAYORQUE neu_addOperador empty
    (80) operadorR -> . MENORIGUALQUE neu_addOperador empty
    (81) operadorR -> . MAYORIGUALQUE neu_addOperador empty
    (82) operadorR -> . IGUALQUE neu_addOperador empty
    (83) operadorR -> . DIFQUE neu_addOperador empty
    (103) empty -> .

    MENORQUE        shift and go to state 225
    MAYORQUE        shift and go to state 226
    MENORIGUALQUE   shift and go to state 227
    MAYORIGUALQUE   shift and go to state 228
    IGUALQUE        shift and go to state 229
    DIFQUE          shift and go to state 230
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    super_expU                     shift and go to state 222
    operadorR                      shift and go to state 223
    empty                          shift and go to state 224

state 185

    (90) exp -> termino neu_hacerExp . expU
    (91) expU -> . operadorA exp
    (92) expU -> . empty
    (72) operadorA -> . MAS neu_addOperador empty
    (73) operadorA -> . MENOS neu_addOperador empty
    (103) empty -> .

    MAS             shift and go to state 234
    MENOS           shift and go to state 235
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    expU                           shift and go to state 231
    operadorA                      shift and go to state 232
    empty                          shift and go to state 233

state 186

    (93) termino -> factor neu_hacerTermino . terminoU
    (94) terminoU -> . operadorT termino
    (95) terminoU -> . empty
    (74) operadorT -> . MULT neu_addOperador empty
    (75) operadorT -> . DIV neu_addOperador empty
    (103) empty -> .

    MULT            shift and go to state 239
    DIV             shift and go to state 240
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    terminoU                       shift and go to state 236
    operadorT                      shift and go to state 237
    empty                          shift and go to state 238

state 187

    (96) factor -> varcte empty .

    MULT            reduce using rule 96 (factor -> varcte empty .)
    DIV             reduce using rule 96 (factor -> varcte empty .)
    MAS             reduce using rule 96 (factor -> varcte empty .)
    MENOS           reduce using rule 96 (factor -> varcte empty .)
    MENORQUE        reduce using rule 96 (factor -> varcte empty .)
    MAYORQUE        reduce using rule 96 (factor -> varcte empty .)
    MENORIGUALQUE   reduce using rule 96 (factor -> varcte empty .)
    MAYORIGUALQUE   reduce using rule 96 (factor -> varcte empty .)
    IGUALQUE        reduce using rule 96 (factor -> varcte empty .)
    DIFQUE          reduce using rule 96 (factor -> varcte empty .)
    OR              reduce using rule 96 (factor -> varcte empty .)
    AND             reduce using rule 96 (factor -> varcte empty .)
    R_PAR           reduce using rule 96 (factor -> varcte empty .)
    COMA            reduce using rule 96 (factor -> varcte empty .)
    PUNTOYCOMA      reduce using rule 96 (factor -> varcte empty .)
    HACER           reduce using rule 96 (factor -> varcte empty .)


state 188

    (97) factor -> llamada empty .

    MULT            reduce using rule 97 (factor -> llamada empty .)
    DIV             reduce using rule 97 (factor -> llamada empty .)
    MAS             reduce using rule 97 (factor -> llamada empty .)
    MENOS           reduce using rule 97 (factor -> llamada empty .)
    MENORQUE        reduce using rule 97 (factor -> llamada empty .)
    MAYORQUE        reduce using rule 97 (factor -> llamada empty .)
    MENORIGUALQUE   reduce using rule 97 (factor -> llamada empty .)
    MAYORIGUALQUE   reduce using rule 97 (factor -> llamada empty .)
    IGUALQUE        reduce using rule 97 (factor -> llamada empty .)
    DIFQUE          reduce using rule 97 (factor -> llamada empty .)
    OR              reduce using rule 97 (factor -> llamada empty .)
    AND             reduce using rule 97 (factor -> llamada empty .)
    R_PAR           reduce using rule 97 (factor -> llamada empty .)
    COMA            reduce using rule 97 (factor -> llamada empty .)
    PUNTOYCOMA      reduce using rule 97 (factor -> llamada empty .)
    HACER           reduce using rule 97 (factor -> llamada empty .)


state 189

    (99) varcte -> ID neu_addID . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 241

state 190

    (100) varcte -> ENTEROVAL neu_addConstanteEntero . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 242

state 191

    (101) varcte -> FLOTANTEVAL neu_addConstanteFlotante . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 243

state 192

    (102) varcte -> CARACTERVAL neu_addConstanteCaracter . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 244

state 193

    (50) decision -> SI L_PAR hiper_exp R_PAR . ENTONCES bloque decisionU empty

    ENTONCES        shift and go to state 245


state 194

    (53) condicional -> MIENTRAS L_PAR hiper_exp R_PAR . HACER bloque empty

    HACER           shift and go to state 246


state 195

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR . HASTA hiper_exp HACER bloque empty

    HASTA           shift and go to state 247


state 196

    (64) circulo -> CIRCULO L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 248

state 197

    (65) color -> COLOR L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 249

state 198

    (66) grosor -> GROSOR L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 250

state 199

    (67) linea -> LINEA L_PAR hiper_exp COMA . hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 251
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 200

    (68) puntoxy -> PUNTOXY L_PAR hiper_exp COMA . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 252
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 201

    (69) arco -> ARCO L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 253

state 202

    (70) penup -> PENUP L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 254

state 203

    (71) pendown -> PENDOWN L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 255

state 204

    (20) recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty .

    R_PAR           reduce using rule 20 (recibir_parametros -> ID DOSPUNTOS tipo_var recibir_parametrosD empty .)


state 205

    (22) recibir_parametrosD -> COMA recibir_parametros . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 256

state 206

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion . funcionesD
    (11) funcionesD -> . funciones
    (12) funcionesD -> . empty
    (8) funciones -> . funcionesU
    (9) funciones -> . empty
    (103) empty -> .
    (10) funcionesU -> . tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD
    (13) tipo_funcion -> . ENTERO empty
    (14) tipo_funcion -> . FLOTANTE empty
    (15) tipo_funcion -> . CARACTER empty
    (16) tipo_funcion -> . VOID empty

    PRINCIPAL       reduce using rule 103 (empty -> .)
    ENTERO          shift and go to state 13
    FLOTANTE        shift and go to state 14
    CARACTER        shift and go to state 15
    VOID            shift and go to state 16

    tipo_funcion                   shift and go to state 12
    funcionesD                     shift and go to state 257
    funciones                      shift and go to state 258
    empty                          shift and go to state 259
    funcionesU                     shift and go to state 11

state 207

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp . neu_asignacion empty
    (125) neu_asignacion -> .

    PUNTOYCOMA      reduce using rule 125 (neu_asignacion -> .)
    R_PAR           reduce using rule 125 (neu_asignacion -> .)

    neu_asignacion                 shift and go to state 260

state 208

    (24) mandar_parametros -> ID mandar_parametrosD . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 261

state 209

    (27) mandar_parametrosD -> empty .

    R_PAR           reduce using rule 27 (mandar_parametrosD -> empty .)


state 210

    (26) mandar_parametrosD -> COMA . mandar_parametros empty
    (24) mandar_parametros -> . ID mandar_parametrosD empty
    (25) mandar_parametros -> . empty
    (103) empty -> .

    ID              shift and go to state 174
    R_PAR           reduce using rule 103 (empty -> .)

    mandar_parametros              shift and go to state 262
    empty                          shift and go to state 176

state 211

    (44) llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR . neu_llamada_gosub empty
    (116) neu_llamada_gosub -> .

    PUNTOYCOMA      reduce using rule 116 (neu_llamada_gosub -> .)
    MULT            reduce using rule 116 (neu_llamada_gosub -> .)
    DIV             reduce using rule 116 (neu_llamada_gosub -> .)
    MAS             reduce using rule 116 (neu_llamada_gosub -> .)
    MENOS           reduce using rule 116 (neu_llamada_gosub -> .)
    MENORQUE        reduce using rule 116 (neu_llamada_gosub -> .)
    MAYORQUE        reduce using rule 116 (neu_llamada_gosub -> .)
    MENORIGUALQUE   reduce using rule 116 (neu_llamada_gosub -> .)
    MAYORIGUALQUE   reduce using rule 116 (neu_llamada_gosub -> .)
    IGUALQUE        reduce using rule 116 (neu_llamada_gosub -> .)
    DIFQUE          reduce using rule 116 (neu_llamada_gosub -> .)
    OR              reduce using rule 116 (neu_llamada_gosub -> .)
    AND             reduce using rule 116 (neu_llamada_gosub -> .)
    R_PAR           reduce using rule 116 (neu_llamada_gosub -> .)
    COMA            reduce using rule 116 (neu_llamada_gosub -> .)
    HACER           reduce using rule 116 (neu_llamada_gosub -> .)

    neu_llamada_gosub              shift and go to state 263

state 212

    (45) retorno -> REGRESA L_PAR ID R_PAR empty .

    PUNTOYCOMA      reduce using rule 45 (retorno -> REGRESA L_PAR ID R_PAR empty .)


state 213

    (46) lectura -> LEER L_PAR ID neu_lectura R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 264

state 214

    (98) factor -> L_PAR hiper_exp R_PAR . empty
    (103) empty -> .

    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 265

state 215

    (47) escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .

    PUNTOYCOMA      reduce using rule 47 (escritura -> ESCRIBIR L_PAR escrituraD R_PAR empty .)


state 216

    (48) escrituraD -> hiper_exp neu_escritura empty .

    R_PAR           reduce using rule 48 (escrituraD -> hiper_exp neu_escritura empty .)


state 217

    (84) hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .

    R_PAR           reduce using rule 84 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    COMA            reduce using rule 84 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    PUNTOYCOMA      reduce using rule 84 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)
    HACER           reduce using rule 84 (hiper_exp -> super_exp neu_hacerHiperExp hiper_expU .)


state 218

    (85) hiper_expU -> operadorL . hiper_exp empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 266
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 219

    (86) hiper_expU -> empty .

    R_PAR           reduce using rule 86 (hiper_expU -> empty .)
    COMA            reduce using rule 86 (hiper_expU -> empty .)
    PUNTOYCOMA      reduce using rule 86 (hiper_expU -> empty .)
    HACER           reduce using rule 86 (hiper_expU -> empty .)


state 220

    (76) operadorL -> OR . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 267

state 221

    (77) operadorL -> AND . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 268

state 222

    (87) super_exp -> exp neu_hacerSuperExp super_expU .

    OR              reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)
    AND             reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)
    R_PAR           reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)
    COMA            reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)
    PUNTOYCOMA      reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)
    HACER           reduce using rule 87 (super_exp -> exp neu_hacerSuperExp super_expU .)


state 223

    (88) super_expU -> operadorR . super_exp empty
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    super_exp                      shift and go to state 269
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 224

    (89) super_expU -> empty .

    OR              reduce using rule 89 (super_expU -> empty .)
    AND             reduce using rule 89 (super_expU -> empty .)
    R_PAR           reduce using rule 89 (super_expU -> empty .)
    COMA            reduce using rule 89 (super_expU -> empty .)
    PUNTOYCOMA      reduce using rule 89 (super_expU -> empty .)
    HACER           reduce using rule 89 (super_expU -> empty .)


state 225

    (78) operadorR -> MENORQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 270

state 226

    (79) operadorR -> MAYORQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 271

state 227

    (80) operadorR -> MENORIGUALQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 272

state 228

    (81) operadorR -> MAYORIGUALQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 273

state 229

    (82) operadorR -> IGUALQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 274

state 230

    (83) operadorR -> DIFQUE . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 275

state 231

    (90) exp -> termino neu_hacerExp expU .

    MENORQUE        reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    MAYORQUE        reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    MENORIGUALQUE   reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    MAYORIGUALQUE   reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    IGUALQUE        reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    DIFQUE          reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    OR              reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    AND             reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    R_PAR           reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    COMA            reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    PUNTOYCOMA      reduce using rule 90 (exp -> termino neu_hacerExp expU .)
    HACER           reduce using rule 90 (exp -> termino neu_hacerExp expU .)


state 232

    (91) expU -> operadorA . exp
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    exp                            shift and go to state 276
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 233

    (92) expU -> empty .

    MENORQUE        reduce using rule 92 (expU -> empty .)
    MAYORQUE        reduce using rule 92 (expU -> empty .)
    MENORIGUALQUE   reduce using rule 92 (expU -> empty .)
    MAYORIGUALQUE   reduce using rule 92 (expU -> empty .)
    IGUALQUE        reduce using rule 92 (expU -> empty .)
    DIFQUE          reduce using rule 92 (expU -> empty .)
    OR              reduce using rule 92 (expU -> empty .)
    AND             reduce using rule 92 (expU -> empty .)
    R_PAR           reduce using rule 92 (expU -> empty .)
    COMA            reduce using rule 92 (expU -> empty .)
    PUNTOYCOMA      reduce using rule 92 (expU -> empty .)
    HACER           reduce using rule 92 (expU -> empty .)


state 234

    (72) operadorA -> MAS . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 277

state 235

    (73) operadorA -> MENOS . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 278

state 236

    (93) termino -> factor neu_hacerTermino terminoU .

    MAS             reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    MENOS           reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    MENORQUE        reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    MAYORQUE        reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    MENORIGUALQUE   reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    MAYORIGUALQUE   reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    IGUALQUE        reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    DIFQUE          reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    OR              reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    AND             reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    R_PAR           reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    COMA            reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    PUNTOYCOMA      reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)
    HACER           reduce using rule 93 (termino -> factor neu_hacerTermino terminoU .)


state 237

    (94) terminoU -> operadorT . termino
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    termino                        shift and go to state 279
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 238

    (95) terminoU -> empty .

    MAS             reduce using rule 95 (terminoU -> empty .)
    MENOS           reduce using rule 95 (terminoU -> empty .)
    MENORQUE        reduce using rule 95 (terminoU -> empty .)
    MAYORQUE        reduce using rule 95 (terminoU -> empty .)
    MENORIGUALQUE   reduce using rule 95 (terminoU -> empty .)
    MAYORIGUALQUE   reduce using rule 95 (terminoU -> empty .)
    IGUALQUE        reduce using rule 95 (terminoU -> empty .)
    DIFQUE          reduce using rule 95 (terminoU -> empty .)
    OR              reduce using rule 95 (terminoU -> empty .)
    AND             reduce using rule 95 (terminoU -> empty .)
    R_PAR           reduce using rule 95 (terminoU -> empty .)
    COMA            reduce using rule 95 (terminoU -> empty .)
    PUNTOYCOMA      reduce using rule 95 (terminoU -> empty .)
    HACER           reduce using rule 95 (terminoU -> empty .)


state 239

    (74) operadorT -> MULT . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 280

state 240

    (75) operadorT -> DIV . neu_addOperador empty
    (117) neu_addOperador -> .

    L_PAR           reduce using rule 117 (neu_addOperador -> .)
    ID              reduce using rule 117 (neu_addOperador -> .)
    ENTEROVAL       reduce using rule 117 (neu_addOperador -> .)
    FLOTANTEVAL     reduce using rule 117 (neu_addOperador -> .)
    CARACTERVAL     reduce using rule 117 (neu_addOperador -> .)

    neu_addOperador                shift and go to state 281

state 241

    (99) varcte -> ID neu_addID empty .

    MULT            reduce using rule 99 (varcte -> ID neu_addID empty .)
    DIV             reduce using rule 99 (varcte -> ID neu_addID empty .)
    MAS             reduce using rule 99 (varcte -> ID neu_addID empty .)
    MENOS           reduce using rule 99 (varcte -> ID neu_addID empty .)
    MENORQUE        reduce using rule 99 (varcte -> ID neu_addID empty .)
    MAYORQUE        reduce using rule 99 (varcte -> ID neu_addID empty .)
    MENORIGUALQUE   reduce using rule 99 (varcte -> ID neu_addID empty .)
    MAYORIGUALQUE   reduce using rule 99 (varcte -> ID neu_addID empty .)
    IGUALQUE        reduce using rule 99 (varcte -> ID neu_addID empty .)
    DIFQUE          reduce using rule 99 (varcte -> ID neu_addID empty .)
    OR              reduce using rule 99 (varcte -> ID neu_addID empty .)
    AND             reduce using rule 99 (varcte -> ID neu_addID empty .)
    R_PAR           reduce using rule 99 (varcte -> ID neu_addID empty .)
    COMA            reduce using rule 99 (varcte -> ID neu_addID empty .)
    PUNTOYCOMA      reduce using rule 99 (varcte -> ID neu_addID empty .)
    HACER           reduce using rule 99 (varcte -> ID neu_addID empty .)


state 242

    (100) varcte -> ENTEROVAL neu_addConstanteEntero empty .

    MULT            reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIV             reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAS             reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENOS           reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORQUE        reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORQUE        reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MENORIGUALQUE   reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    MAYORIGUALQUE   reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    IGUALQUE        reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    DIFQUE          reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    OR              reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    AND             reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    R_PAR           reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    COMA            reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    PUNTOYCOMA      reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)
    HACER           reduce using rule 100 (varcte -> ENTEROVAL neu_addConstanteEntero empty .)


state 243

    (101) varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .

    MULT            reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIV             reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAS             reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENOS           reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORQUE        reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORQUE        reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MENORIGUALQUE   reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    MAYORIGUALQUE   reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    IGUALQUE        reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    DIFQUE          reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    OR              reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    AND             reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    R_PAR           reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    COMA            reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    PUNTOYCOMA      reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)
    HACER           reduce using rule 101 (varcte -> FLOTANTEVAL neu_addConstanteFlotante empty .)


state 244

    (102) varcte -> CARACTERVAL neu_addConstanteCaracter empty .

    MULT            reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIV             reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAS             reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENOS           reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORQUE        reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORQUE        reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MENORIGUALQUE   reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    MAYORIGUALQUE   reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    IGUALQUE        reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    DIFQUE          reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    OR              reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    AND             reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    R_PAR           reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    COMA            reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    PUNTOYCOMA      reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)
    HACER           reduce using rule 102 (varcte -> CARACTERVAL neu_addConstanteCaracter empty .)


state 245

    (50) decision -> SI L_PAR hiper_exp R_PAR ENTONCES . bloque decisionU empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 282

state 246

    (53) condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER . bloque empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 283

state 247

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR HASTA . hiper_exp HACER bloque empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 284
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 248

    (64) circulo -> CIRCULO L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 64 (circulo -> CIRCULO L_PAR hiper_exp R_PAR empty .)


state 249

    (65) color -> COLOR L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 65 (color -> COLOR L_PAR hiper_exp R_PAR empty .)


state 250

    (66) grosor -> GROSOR L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 66 (grosor -> GROSOR L_PAR hiper_exp R_PAR empty .)


state 251

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp . COMA hiper_exp COMA hiper_exp R_PAR empty

    COMA            shift and go to state 285


state 252

    (68) puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp . R_PAR empty

    R_PAR           shift and go to state 286


state 253

    (69) arco -> ARCO L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 69 (arco -> ARCO L_PAR hiper_exp R_PAR empty .)


state 254

    (70) penup -> PENUP L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 70 (penup -> PENUP L_PAR hiper_exp R_PAR empty .)


state 255

    (71) pendown -> PENDOWN L_PAR hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 71 (pendown -> PENDOWN L_PAR hiper_exp R_PAR empty .)


state 256

    (22) recibir_parametrosD -> COMA recibir_parametros empty .

    R_PAR           reduce using rule 22 (recibir_parametrosD -> COMA recibir_parametros empty .)


state 257

    (10) funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .

    PRINCIPAL       reduce using rule 10 (funcionesU -> tipo_funcion FUNCION ID neu_addFuncion L_PAR recibir_parametros R_PAR variables bloque neu_endFuncion funcionesD .)


state 258

    (11) funcionesD -> funciones .

    PRINCIPAL       reduce using rule 11 (funcionesD -> funciones .)


state 259

    (12) funcionesD -> empty .
    (9) funciones -> empty .

  ! reduce/reduce conflict for PRINCIPAL resolved using rule 9 (funciones -> empty .)
    PRINCIPAL       reduce using rule 9 (funciones -> empty .)

  ! PRINCIPAL       [ reduce using rule 12 (funcionesD -> empty .) ]


state 260

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 287

state 261

    (24) mandar_parametros -> ID mandar_parametrosD empty .

    R_PAR           reduce using rule 24 (mandar_parametros -> ID mandar_parametrosD empty .)


state 262

    (26) mandar_parametrosD -> COMA mandar_parametros . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 288

state 263

    (44) llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    MULT            reduce using rule 103 (empty -> .)
    DIV             reduce using rule 103 (empty -> .)
    MAS             reduce using rule 103 (empty -> .)
    MENOS           reduce using rule 103 (empty -> .)
    MENORQUE        reduce using rule 103 (empty -> .)
    MAYORQUE        reduce using rule 103 (empty -> .)
    MENORIGUALQUE   reduce using rule 103 (empty -> .)
    MAYORIGUALQUE   reduce using rule 103 (empty -> .)
    IGUALQUE        reduce using rule 103 (empty -> .)
    DIFQUE          reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 289

state 264

    (46) lectura -> LEER L_PAR ID neu_lectura R_PAR empty .

    PUNTOYCOMA      reduce using rule 46 (lectura -> LEER L_PAR ID neu_lectura R_PAR empty .)


state 265

    (98) factor -> L_PAR hiper_exp R_PAR empty .

    MULT            reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIV             reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAS             reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENOS           reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORQUE        reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORQUE        reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MENORIGUALQUE   reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    MAYORIGUALQUE   reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    IGUALQUE        reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    DIFQUE          reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    OR              reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    AND             reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    R_PAR           reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    COMA            reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    PUNTOYCOMA      reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)
    HACER           reduce using rule 98 (factor -> L_PAR hiper_exp R_PAR empty .)


state 266

    (85) hiper_expU -> operadorL hiper_exp . empty
    (103) empty -> .

    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 290

state 267

    (76) operadorL -> OR neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 291

state 268

    (77) operadorL -> AND neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 292

state 269

    (88) super_expU -> operadorR super_exp . empty
    (103) empty -> .

    OR              reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    R_PAR           reduce using rule 103 (empty -> .)
    COMA            reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    HACER           reduce using rule 103 (empty -> .)

    empty                          shift and go to state 293

state 270

    (78) operadorR -> MENORQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 294

state 271

    (79) operadorR -> MAYORQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 295

state 272

    (80) operadorR -> MENORIGUALQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 296

state 273

    (81) operadorR -> MAYORIGUALQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 297

state 274

    (82) operadorR -> IGUALQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 298

state 275

    (83) operadorR -> DIFQUE neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 299

state 276

    (91) expU -> operadorA exp .

    MENORQUE        reduce using rule 91 (expU -> operadorA exp .)
    MAYORQUE        reduce using rule 91 (expU -> operadorA exp .)
    MENORIGUALQUE   reduce using rule 91 (expU -> operadorA exp .)
    MAYORIGUALQUE   reduce using rule 91 (expU -> operadorA exp .)
    IGUALQUE        reduce using rule 91 (expU -> operadorA exp .)
    DIFQUE          reduce using rule 91 (expU -> operadorA exp .)
    OR              reduce using rule 91 (expU -> operadorA exp .)
    AND             reduce using rule 91 (expU -> operadorA exp .)
    R_PAR           reduce using rule 91 (expU -> operadorA exp .)
    COMA            reduce using rule 91 (expU -> operadorA exp .)
    PUNTOYCOMA      reduce using rule 91 (expU -> operadorA exp .)
    HACER           reduce using rule 91 (expU -> operadorA exp .)


state 277

    (72) operadorA -> MAS neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 300

state 278

    (73) operadorA -> MENOS neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 301

state 279

    (94) terminoU -> operadorT termino .

    MAS             reduce using rule 94 (terminoU -> operadorT termino .)
    MENOS           reduce using rule 94 (terminoU -> operadorT termino .)
    MENORQUE        reduce using rule 94 (terminoU -> operadorT termino .)
    MAYORQUE        reduce using rule 94 (terminoU -> operadorT termino .)
    MENORIGUALQUE   reduce using rule 94 (terminoU -> operadorT termino .)
    MAYORIGUALQUE   reduce using rule 94 (terminoU -> operadorT termino .)
    IGUALQUE        reduce using rule 94 (terminoU -> operadorT termino .)
    DIFQUE          reduce using rule 94 (terminoU -> operadorT termino .)
    OR              reduce using rule 94 (terminoU -> operadorT termino .)
    AND             reduce using rule 94 (terminoU -> operadorT termino .)
    R_PAR           reduce using rule 94 (terminoU -> operadorT termino .)
    COMA            reduce using rule 94 (terminoU -> operadorT termino .)
    PUNTOYCOMA      reduce using rule 94 (terminoU -> operadorT termino .)
    HACER           reduce using rule 94 (terminoU -> operadorT termino .)


state 280

    (74) operadorT -> MULT neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 302

state 281

    (75) operadorT -> DIV neu_addOperador . empty
    (103) empty -> .

    L_PAR           reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    ENTEROVAL       reduce using rule 103 (empty -> .)
    FLOTANTEVAL     reduce using rule 103 (empty -> .)
    CARACTERVAL     reduce using rule 103 (empty -> .)

    empty                          shift and go to state 303

state 282

    (50) decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque . decisionU empty
    (51) decisionU -> . SINO bloque empty
    (52) decisionU -> . empty
    (103) empty -> .

    SINO            shift and go to state 306
    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    decisionU                      shift and go to state 304
    empty                          shift and go to state 305

state 283

    (53) condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 307

state 284

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp . HACER bloque empty

    HACER           shift and go to state 308


state 285

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA . hiper_exp COMA hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 309
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 286

    (68) puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 310

state 287

    (43) asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .

    PUNTOYCOMA      reduce using rule 43 (asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .)
    R_PAR           reduce using rule 43 (asignacion -> ID neu_addID IGUAL neu_addOperador hiper_exp neu_asignacion empty .)


state 288

    (26) mandar_parametrosD -> COMA mandar_parametros empty .

    R_PAR           reduce using rule 26 (mandar_parametrosD -> COMA mandar_parametros empty .)


state 289

    (44) llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .

    PUNTOYCOMA      reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MULT            reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    DIV             reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MAS             reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MENOS           reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MENORQUE        reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MAYORQUE        reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MENORIGUALQUE   reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    MAYORIGUALQUE   reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    IGUALQUE        reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    DIFQUE          reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    OR              reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    AND             reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    R_PAR           reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    COMA            reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)
    HACER           reduce using rule 44 (llamada -> ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty .)


state 290

    (85) hiper_expU -> operadorL hiper_exp empty .

    R_PAR           reduce using rule 85 (hiper_expU -> operadorL hiper_exp empty .)
    COMA            reduce using rule 85 (hiper_expU -> operadorL hiper_exp empty .)
    PUNTOYCOMA      reduce using rule 85 (hiper_expU -> operadorL hiper_exp empty .)
    HACER           reduce using rule 85 (hiper_expU -> operadorL hiper_exp empty .)


state 291

    (76) operadorL -> OR neu_addOperador empty .

    L_PAR           reduce using rule 76 (operadorL -> OR neu_addOperador empty .)
    ID              reduce using rule 76 (operadorL -> OR neu_addOperador empty .)
    ENTEROVAL       reduce using rule 76 (operadorL -> OR neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 76 (operadorL -> OR neu_addOperador empty .)
    CARACTERVAL     reduce using rule 76 (operadorL -> OR neu_addOperador empty .)


state 292

    (77) operadorL -> AND neu_addOperador empty .

    L_PAR           reduce using rule 77 (operadorL -> AND neu_addOperador empty .)
    ID              reduce using rule 77 (operadorL -> AND neu_addOperador empty .)
    ENTEROVAL       reduce using rule 77 (operadorL -> AND neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 77 (operadorL -> AND neu_addOperador empty .)
    CARACTERVAL     reduce using rule 77 (operadorL -> AND neu_addOperador empty .)


state 293

    (88) super_expU -> operadorR super_exp empty .

    OR              reduce using rule 88 (super_expU -> operadorR super_exp empty .)
    AND             reduce using rule 88 (super_expU -> operadorR super_exp empty .)
    R_PAR           reduce using rule 88 (super_expU -> operadorR super_exp empty .)
    COMA            reduce using rule 88 (super_expU -> operadorR super_exp empty .)
    PUNTOYCOMA      reduce using rule 88 (super_expU -> operadorR super_exp empty .)
    HACER           reduce using rule 88 (super_expU -> operadorR super_exp empty .)


state 294

    (78) operadorR -> MENORQUE neu_addOperador empty .

    L_PAR           reduce using rule 78 (operadorR -> MENORQUE neu_addOperador empty .)
    ID              reduce using rule 78 (operadorR -> MENORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 78 (operadorR -> MENORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 78 (operadorR -> MENORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 78 (operadorR -> MENORQUE neu_addOperador empty .)


state 295

    (79) operadorR -> MAYORQUE neu_addOperador empty .

    L_PAR           reduce using rule 79 (operadorR -> MAYORQUE neu_addOperador empty .)
    ID              reduce using rule 79 (operadorR -> MAYORQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 79 (operadorR -> MAYORQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 79 (operadorR -> MAYORQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 79 (operadorR -> MAYORQUE neu_addOperador empty .)


state 296

    (80) operadorR -> MENORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 80 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 80 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 80 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 80 (operadorR -> MENORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 80 (operadorR -> MENORIGUALQUE neu_addOperador empty .)


state 297

    (81) operadorR -> MAYORIGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 81 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ID              reduce using rule 81 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 81 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 81 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 81 (operadorR -> MAYORIGUALQUE neu_addOperador empty .)


state 298

    (82) operadorR -> IGUALQUE neu_addOperador empty .

    L_PAR           reduce using rule 82 (operadorR -> IGUALQUE neu_addOperador empty .)
    ID              reduce using rule 82 (operadorR -> IGUALQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 82 (operadorR -> IGUALQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 82 (operadorR -> IGUALQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 82 (operadorR -> IGUALQUE neu_addOperador empty .)


state 299

    (83) operadorR -> DIFQUE neu_addOperador empty .

    L_PAR           reduce using rule 83 (operadorR -> DIFQUE neu_addOperador empty .)
    ID              reduce using rule 83 (operadorR -> DIFQUE neu_addOperador empty .)
    ENTEROVAL       reduce using rule 83 (operadorR -> DIFQUE neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 83 (operadorR -> DIFQUE neu_addOperador empty .)
    CARACTERVAL     reduce using rule 83 (operadorR -> DIFQUE neu_addOperador empty .)


state 300

    (72) operadorA -> MAS neu_addOperador empty .

    L_PAR           reduce using rule 72 (operadorA -> MAS neu_addOperador empty .)
    ID              reduce using rule 72 (operadorA -> MAS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 72 (operadorA -> MAS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 72 (operadorA -> MAS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 72 (operadorA -> MAS neu_addOperador empty .)


state 301

    (73) operadorA -> MENOS neu_addOperador empty .

    L_PAR           reduce using rule 73 (operadorA -> MENOS neu_addOperador empty .)
    ID              reduce using rule 73 (operadorA -> MENOS neu_addOperador empty .)
    ENTEROVAL       reduce using rule 73 (operadorA -> MENOS neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 73 (operadorA -> MENOS neu_addOperador empty .)
    CARACTERVAL     reduce using rule 73 (operadorA -> MENOS neu_addOperador empty .)


state 302

    (74) operadorT -> MULT neu_addOperador empty .

    L_PAR           reduce using rule 74 (operadorT -> MULT neu_addOperador empty .)
    ID              reduce using rule 74 (operadorT -> MULT neu_addOperador empty .)
    ENTEROVAL       reduce using rule 74 (operadorT -> MULT neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 74 (operadorT -> MULT neu_addOperador empty .)
    CARACTERVAL     reduce using rule 74 (operadorT -> MULT neu_addOperador empty .)


state 303

    (75) operadorT -> DIV neu_addOperador empty .

    L_PAR           reduce using rule 75 (operadorT -> DIV neu_addOperador empty .)
    ID              reduce using rule 75 (operadorT -> DIV neu_addOperador empty .)
    ENTEROVAL       reduce using rule 75 (operadorT -> DIV neu_addOperador empty .)
    FLOTANTEVAL     reduce using rule 75 (operadorT -> DIV neu_addOperador empty .)
    CARACTERVAL     reduce using rule 75 (operadorT -> DIV neu_addOperador empty .)


state 304

    (50) decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 311

state 305

    (52) decisionU -> empty .

    ID              reduce using rule 52 (decisionU -> empty .)
    REGRESA         reduce using rule 52 (decisionU -> empty .)
    LEER            reduce using rule 52 (decisionU -> empty .)
    ESCRIBIR        reduce using rule 52 (decisionU -> empty .)
    SI              reduce using rule 52 (decisionU -> empty .)
    MIENTRAS        reduce using rule 52 (decisionU -> empty .)
    DESDE           reduce using rule 52 (decisionU -> empty .)
    CIRCULO         reduce using rule 52 (decisionU -> empty .)
    COLOR           reduce using rule 52 (decisionU -> empty .)
    GROSOR          reduce using rule 52 (decisionU -> empty .)
    LINEA           reduce using rule 52 (decisionU -> empty .)
    PUNTOXY         reduce using rule 52 (decisionU -> empty .)
    ARCO            reduce using rule 52 (decisionU -> empty .)
    PENUP           reduce using rule 52 (decisionU -> empty .)
    PENDOWN         reduce using rule 52 (decisionU -> empty .)
    PUNTOYCOMA      reduce using rule 52 (decisionU -> empty .)
    R_LLAVE         reduce using rule 52 (decisionU -> empty .)


state 306

    (51) decisionU -> SINO . bloque empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 312

state 307

    (53) condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .

    ID              reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    REGRESA         reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    LEER            reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    ESCRIBIR        reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    SI              reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    MIENTRAS        reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    DESDE           reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    CIRCULO         reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    COLOR           reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    GROSOR          reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    LINEA           reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    PUNTOXY         reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    ARCO            reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    PENUP           reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    PENDOWN         reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    PUNTOYCOMA      reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)
    R_LLAVE         reduce using rule 53 (condicional -> MIENTRAS L_PAR hiper_exp R_PAR HACER bloque empty .)


state 308

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER . bloque empty
    (28) bloque -> . L_LLAVE bloqueU R_LLAVE empty

    L_LLAVE         shift and go to state 47

    bloque                         shift and go to state 313

state 309

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp . COMA hiper_exp R_PAR empty

    COMA            shift and go to state 314


state 310

    (68) puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 68 (puntoxy -> PUNTOXY L_PAR hiper_exp COMA hiper_exp R_PAR empty .)


state 311

    (50) decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .

    ID              reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    REGRESA         reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    LEER            reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    ESCRIBIR        reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    SI              reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    MIENTRAS        reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    DESDE           reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    CIRCULO         reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    COLOR           reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    GROSOR          reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    LINEA           reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    PUNTOXY         reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    ARCO            reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    PENUP           reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    PENDOWN         reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    PUNTOYCOMA      reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)
    R_LLAVE         reduce using rule 50 (decision -> SI L_PAR hiper_exp R_PAR ENTONCES bloque decisionU empty .)


state 312

    (51) decisionU -> SINO bloque . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 315

state 313

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque . empty
    (103) empty -> .

    ID              reduce using rule 103 (empty -> .)
    REGRESA         reduce using rule 103 (empty -> .)
    LEER            reduce using rule 103 (empty -> .)
    ESCRIBIR        reduce using rule 103 (empty -> .)
    SI              reduce using rule 103 (empty -> .)
    MIENTRAS        reduce using rule 103 (empty -> .)
    DESDE           reduce using rule 103 (empty -> .)
    CIRCULO         reduce using rule 103 (empty -> .)
    COLOR           reduce using rule 103 (empty -> .)
    GROSOR          reduce using rule 103 (empty -> .)
    LINEA           reduce using rule 103 (empty -> .)
    PUNTOXY         reduce using rule 103 (empty -> .)
    ARCO            reduce using rule 103 (empty -> .)
    PENUP           reduce using rule 103 (empty -> .)
    PENDOWN         reduce using rule 103 (empty -> .)
    PUNTOYCOMA      reduce using rule 103 (empty -> .)
    R_LLAVE         reduce using rule 103 (empty -> .)

    empty                          shift and go to state 316

state 314

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA . hiper_exp R_PAR empty
    (84) hiper_exp -> . super_exp neu_hacerHiperExp hiper_expU
    (87) super_exp -> . exp neu_hacerSuperExp super_expU
    (90) exp -> . termino neu_hacerExp expU
    (93) termino -> . factor neu_hacerTermino terminoU
    (96) factor -> . varcte empty
    (97) factor -> . llamada empty
    (98) factor -> . L_PAR hiper_exp R_PAR empty
    (99) varcte -> . ID neu_addID empty
    (100) varcte -> . ENTEROVAL neu_addConstanteEntero empty
    (101) varcte -> . FLOTANTEVAL neu_addConstanteFlotante empty
    (102) varcte -> . CARACTERVAL neu_addConstanteCaracter empty
    (44) llamada -> . ID neu_llamada_era L_PAR mandar_parametros R_PAR neu_llamada_gosub empty

    L_PAR           shift and go to state 142
    ID              shift and go to state 152
    ENTEROVAL       shift and go to state 153
    FLOTANTEVAL     shift and go to state 154
    CARACTERVAL     shift and go to state 155

    hiper_exp                      shift and go to state 317
    super_exp                      shift and go to state 146
    exp                            shift and go to state 147
    termino                        shift and go to state 148
    factor                         shift and go to state 149
    varcte                         shift and go to state 150
    llamada                        shift and go to state 151

state 315

    (51) decisionU -> SINO bloque empty .

    ID              reduce using rule 51 (decisionU -> SINO bloque empty .)
    REGRESA         reduce using rule 51 (decisionU -> SINO bloque empty .)
    LEER            reduce using rule 51 (decisionU -> SINO bloque empty .)
    ESCRIBIR        reduce using rule 51 (decisionU -> SINO bloque empty .)
    SI              reduce using rule 51 (decisionU -> SINO bloque empty .)
    MIENTRAS        reduce using rule 51 (decisionU -> SINO bloque empty .)
    DESDE           reduce using rule 51 (decisionU -> SINO bloque empty .)
    CIRCULO         reduce using rule 51 (decisionU -> SINO bloque empty .)
    COLOR           reduce using rule 51 (decisionU -> SINO bloque empty .)
    GROSOR          reduce using rule 51 (decisionU -> SINO bloque empty .)
    LINEA           reduce using rule 51 (decisionU -> SINO bloque empty .)
    PUNTOXY         reduce using rule 51 (decisionU -> SINO bloque empty .)
    ARCO            reduce using rule 51 (decisionU -> SINO bloque empty .)
    PENUP           reduce using rule 51 (decisionU -> SINO bloque empty .)
    PENDOWN         reduce using rule 51 (decisionU -> SINO bloque empty .)
    PUNTOYCOMA      reduce using rule 51 (decisionU -> SINO bloque empty .)
    R_LLAVE         reduce using rule 51 (decisionU -> SINO bloque empty .)


state 316

    (54) no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .

    ID              reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    REGRESA         reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    LEER            reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    ESCRIBIR        reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    SI              reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    MIENTRAS        reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    DESDE           reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    CIRCULO         reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    COLOR           reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    GROSOR          reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    LINEA           reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    PUNTOXY         reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    ARCO            reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    PENUP           reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    PENDOWN         reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    PUNTOYCOMA      reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)
    R_LLAVE         reduce using rule 54 (no_condicional -> DESDE L_PAR asignacion R_PAR HASTA hiper_exp HACER bloque empty .)


state 317

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp . R_PAR empty

    R_PAR           shift and go to state 318


state 318

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR . empty
    (103) empty -> .

    PUNTOYCOMA      reduce using rule 103 (empty -> .)

    empty                          shift and go to state 319

state 319

    (67) linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty .

    PUNTOYCOMA      reduce using rule 67 (linea -> LINEA L_PAR hiper_exp COMA hiper_exp COMA hiper_exp COMA hiper_exp R_PAR empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 47 resolved as shift
WARNING: shift/reduce conflict for LEER in state 47 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 47 resolved as shift
WARNING: shift/reduce conflict for SI in state 47 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 47 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 47 resolved as shift
WARNING: shift/reduce conflict for CIRCULO in state 47 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 47 resolved as shift
WARNING: shift/reduce conflict for GROSOR in state 47 resolved as shift
WARNING: shift/reduce conflict for LINEA in state 47 resolved as shift
WARNING: shift/reduce conflict for PUNTOXY in state 47 resolved as shift
WARNING: shift/reduce conflict for ARCO in state 47 resolved as shift
WARNING: shift/reduce conflict for PENUP in state 47 resolved as shift
WARNING: shift/reduce conflict for PENDOWN in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for REGRESA in state 55 resolved as shift
WARNING: shift/reduce conflict for LEER in state 55 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 55 resolved as shift
WARNING: shift/reduce conflict for SI in state 55 resolved as shift
WARNING: shift/reduce conflict for MIENTRAS in state 55 resolved as shift
WARNING: shift/reduce conflict for DESDE in state 55 resolved as shift
WARNING: shift/reduce conflict for CIRCULO in state 55 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 55 resolved as shift
WARNING: shift/reduce conflict for GROSOR in state 55 resolved as shift
WARNING: shift/reduce conflict for LINEA in state 55 resolved as shift
WARNING: shift/reduce conflict for PUNTOXY in state 55 resolved as shift
WARNING: shift/reduce conflict for ARCO in state 55 resolved as shift
WARNING: shift/reduce conflict for PENUP in state 55 resolved as shift
WARNING: shift/reduce conflict for PENDOWN in state 55 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (estatuto -> empty)
WARNING: rejected rule (funciones_especiales -> empty) in state 54
WARNING: reduce/reduce conflict in state 92 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (bloqueD -> empty) in state 92
WARNING: reduce/reduce conflict in state 92 resolved using rule (bloqueU -> empty)
WARNING: rejected rule (estatuto -> empty) in state 92
WARNING: reduce/reduce conflict in state 92 resolved using rule (estatuto -> empty)
WARNING: rejected rule (funciones_especiales -> empty) in state 92
WARNING: reduce/reduce conflict in state 259 resolved using rule (funciones -> empty)
WARNING: rejected rule (funcionesD -> empty) in state 259
WARNING: Rule (funciones_especiales -> empty) is never reduced
WARNING: Rule (bloqueD -> empty) is never reduced
WARNING: Rule (funcionesD -> empty) is never reduced
